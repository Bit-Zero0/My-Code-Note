{
	"ID": "20221012223458-a97j3qk",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221012223458-a97j3qk",
		"title": "lambda表达式",
		"updated": "20221012223708"
	},
	"Children": [
		{
			"ID": "20221012223509-tz39id8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221012223509-tz39id8",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "lambda的由来"
				}
			]
		},
		{
			"ID": "20221012223509-xub09qg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-xub09qg",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "++98中的一个例子\n在C++98中，如果想要对一个数据集合中的元素进行排序，可以使用std::sort方法。"
				}
			]
		},
		{
			"ID": "20221012223509-r0q7e8u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221012223509-r0q7e8u",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()  \n{  \n    int array[] = {4,1,8,5,3,7,0,9,2,6};  \n    // 默认按照小于比较，排出来结果是升序  \n    std::sort(array, array+sizeof(array)/sizeof(array[0]));  \n  \n    // 如果需要降序，需要改变元素的比较规则  \n    std::sort(array, array + sizeof(array) / sizeof(array[0]), greater\u003cint\u003e());  \n    return 0;  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221012223509-7zrmvdq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-7zrmvdq",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果待排序元素为自定义类型，需要用户定义排序时的比较规则:"
				}
			]
		},
		{
			"ID": "20221012223509-mf87q6x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221012223509-mf87q6x",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "struct Goods\n{\n    string _name;\n    double _price;\n};\nstruct Compare\n{\n    bool operator()(const Goods\u0026 gl, const Goods\u0026 gr)\n    {\n        return gl._price \u003c= gr._price;\n    }\n};\nint main()\n{\n    Goods gds[] = { { \"苹果\", 2.1 }, { \"相交\", 3 }, { \"橙子\", 2.2 }, {\"菠萝\", 1.5} };\n    sort(gds, gds + sizeof(gds) / sizeof(gds[0]), Compare());\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221012223509-0dkdozz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-0dkdozz",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "随着C++语法的发展，"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "人们开始觉得上面的写法太复杂了，每次为了实现一个algorithm算法， 都要重新去写一个类，如果每次比较的逻辑不一样，还要去实现多个类，特别是相同类的命名，这些都给编程者带来了极大的不便"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。因此，在C11语法中出现了Lambda表达式"
				}
			]
		},
		{
			"ID": "20221012223521-snr5k1u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223521-snr5k1u"
			}
		},
		{
			"ID": "20221012223509-d4p3idh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-d4p3idh",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上面例子改用lambda表达式"
				}
			]
		},
		{
			"ID": "20221012223509-mdsf2pq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221012223509-mdsf2pq",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()  \n{  \n    Goods gds[] = { { \"苹果\", 2.1 }, { \"相交\", 3 }, { \"橙子\", 2.2 }, {\"菠萝\", 1.5} };  \n    sort(gds, gds + sizeof(gds) / sizeof(gds[0]), [](const Goods\u0026 l, const Goods\u0026 r)-\u003ebool  \n    {  \n        return l._price \u003c r._price;  \n    });  \n    return 0;  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221012223509-pzjclog",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-pzjclog",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上述代码就是使用C++11中的lambda表达式来解决，可以看出lamb表达式实际是一个匿名函数。"
				}
			]
		},
		{
			"ID": "20221012223526-dsltso7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223526-dsltso7"
			}
		},
		{
			"ID": "20221012223509-77vm0ly",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221012223509-77vm0ly",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "lambda表达式语法"
				}
			]
		},
		{
			"ID": "20221012223509-2ze5vq9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-2ze5vq9",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "lambda表达式书写格式："
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "[capture-list] (parameters) mutable -\u003e return-type { statement }"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20221012223509-3uuowdb",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221012223509-3uuowdb",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"ID": "20221012223509-yfwudjq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221012223509-yfwudjq",
						"updated": "20221012223509"
					},
					"Children": [
						{
							"ID": "20221012223509-mfo9wlr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221012223509-mfo9wlr",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "lambda表达式各部分说明"
								}
							]
						},
						{
							"ID": "20221012223509-kk85nul",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20221012223509-kk85nul",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"ID": "20221012223509-st861ql",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20221012223509-st861ql",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"ID": "20221012223509-w7hlmz9",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221012223509-w7hlmz9",
												"updated": "20221012223509"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "[capture-list] : "
												},
												{
													"Type": "NodeStrong",
													"Data": "strong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "捕捉列表"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，该列表总是出现在lambda函数的开始位置，"
												},
												{
													"Type": "NodeStrong",
													"Data": "strong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "编译器根据[]来判断接下来的代码是否为lambda函数，捕捉列表能够捕捉上下文中的变量供lambda函数使用"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "。"
												}
											]
										}
									]
								},
								{
									"ID": "20221012223509-q0bnqs5",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20221012223509-q0bnqs5",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"ID": "20221012223509-ejq4va4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221012223509-ejq4va4",
												"updated": "20221012223509"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "(parameters)：参数列表。"
												},
												{
													"Type": "NodeStrong",
													"Data": "strong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "与普通函数的参数列表一致"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "，如果不需要参数传递，则可以连同()一起省略"
												}
											]
										}
									]
								},
								{
									"ID": "20221012223509-xk4almb",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20221012223509-xk4almb",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"ID": "20221012223509-2jpq2dk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221012223509-2jpq2dk",
												"updated": "20221012223509"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "mutable：默认情况下，lambda函数总是一个const函数，mutable可以取消其常量性。使用该修饰符时，参数列表不可省略(即使参数为空)。"
												}
											]
										}
									]
								},
								{
									"ID": "20221012223509-i669bzq",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20221012223509-i669bzq",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"ID": "20221012223509-286vfll",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221012223509-286vfll",
												"updated": "20221012223509"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "-\u003ereturn-type：返回值类型。用追踪返回类型形式声明函数的返回值类型，没有返回值时此部分可省略。返回值类型明确情况下，也可省略，由编译器对返回类型进行推导。"
												}
											]
										}
									]
								},
								{
									"ID": "20221012223509-zivx6xn",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20221012223509-zivx6xn",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"ID": "20221012223509-k0h3fhq",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221012223509-k0h3fhq",
												"updated": "20221012223509"
											},
											"Children": [
												{
													"Type": "NodeStrong",
													"Data": "strong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "{statement}：函数体"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "。在该函数体内，除了可以使用其参数外，还可以使用所有捕获到的变量。\n"
												},
												{
													"Type": "NodeStrong",
													"Data": "strong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "注意"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "：  在lambda函数定义中，"
												},
												{
													"Type": "NodeStrong",
													"Data": "strong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "参数列表和返回值类型都是可选部分，而捕捉列表和函数体可以为空"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "。因此C++11中"
												},
												{
													"Type": "NodeStrong",
													"Data": "strong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "最简单的lambda函数"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "为："
												},
												{
													"Type": "NodeCodeSpan",
													"Data": "code",
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "[]{}"
														},
														{
															"Type": "NodeCodeSpanCloseMarker"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": " ; 该lambda函数不能做任何事情。"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221012223509-l37y8xk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221012223509-l37y8xk",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()\n{\n    // 最简单的lambda表达式, 该lambda表达式没有任何意义\n    [] {};\n\n    // 省略参数列表和返回值类型，返回值类型由编译器推导为int \n    int a = 3, b = 4;\n    [=] {return a + 3; };\n\n    // 省略了返回值类型，无返回值类型\n    auto fun1 = [\u0026](int c) {b = a + c; };\n    fun1(10);\n    cout \u003c\u003c a \u003c\u003c \" \" \u003c\u003c b \u003c\u003c endl;\n\n    // 各部分都很完善的lambda函数\n    auto fun2 = [=, \u0026b](int c)-\u003eint {return b += a + c; };\n    cout \u003c\u003c fun2(10) \u003c\u003c endl;\n\n    // 复制捕捉x ,但捕捉到的x是不可变的，所以需要加上mutable\n    int x = 10;\n    auto add_x = [x](int a) mutable { x *= 2; return a + x; };\n    cout \u003c\u003c add_x(10) \u003c\u003c endl;\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221012223509-v7ske3l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-v7ske3l",
				"updated": "20221012223611"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过上述例子可以看出，"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "lambda表达式实际上可以理解为无名函数，该函数无法直接调用，如果想要直接调用，可借助"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "auto"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "将其赋值给一个变量"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20221012223540-tdu3tx6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223540-tdu3tx6"
			}
		},
		{
			"ID": "20221012223509-1757ly9",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221012223509-1757ly9",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"ID": "20221012223509-vggkwkl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221012223509-vggkwkl",
						"updated": "20221012223509"
					},
					"Children": [
						{
							"ID": "20221012223509-3kggaml",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221012223509-3kggaml",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "捕获列表说明\n捕捉列表描述了上下文中那些数据可以被lambda使用，以及使用的方式传值还是传引用。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221012223509-sg3hazf",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221012223509-sg3hazf",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221012223509-1pbgkyh",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221012223509-1pbgkyh",
						"updated": "20221012223509"
					},
					"Children": [
						{
							"ID": "20221012223509-lvac5z9",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221012223509-lvac5z9",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"ID": "20221012223509-pjxw980",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221012223509-pjxw980",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "[var]：表示值传递方式捕捉变量var"
										}
									]
								}
							]
						},
						{
							"ID": "20221012223509-rt6myb6",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221012223509-rt6myb6",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"ID": "20221012223509-x3jxtl0",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221012223509-x3jxtl0",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "[=]：表示值传递方式捕获所有父作用域中的变量(包括this)"
										}
									]
								}
							]
						},
						{
							"ID": "20221012223509-nvj7ako",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221012223509-nvj7ako",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"ID": "20221012223509-ph9fru0",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221012223509-ph9fru0",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "[\u0026var]：表示引用传递捕捉变量var"
										}
									]
								}
							]
						},
						{
							"ID": "20221012223509-jr8tq9i",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221012223509-jr8tq9i",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"ID": "20221012223509-hpk8btj",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221012223509-hpk8btj",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "[\u0026]：表示引用传递捕捉所有父作用域中的变量(包括this)"
										}
									]
								}
							]
						},
						{
							"ID": "20221012223509-w0stxp6",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221012223509-w0stxp6",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"ID": "20221012223509-pf695vq",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221012223509-pf695vq",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "[this]：表示值传递方式捕捉当前的this指针"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221012223509-70q1i0v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-70q1i0v",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				}
			]
		},
		{
			"ID": "20221012223509-z6bcozg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221012223509-z6bcozg",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"ID": "20221012223509-9a1922i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221012223509-9a1922i",
						"updated": "20221012223509"
					},
					"Children": [
						{
							"ID": "20221012223509-vxfxxe2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221012223509-vxfxxe2",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "a. "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "父作用域指包含lambda函数的语句块"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20221012223509-1v3hc20",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221012223509-1v3hc20",
						"updated": "20221012223509"
					},
					"Children": [
						{
							"ID": "20221012223509-116rj1b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221012223509-116rj1b",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "b. "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "语法上捕捉列表可由多个捕捉项组成，并以逗号分割"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						},
						{
							"ID": "20221012223509-sncceii",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20221012223509-sncceii",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"ID": "20221012223509-u2ckuno",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20221012223509-u2ckuno",
										"updated": "20221012223509"
									},
									"Children": [
										{
											"ID": "20221012223509-4ubkspa",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221012223509-4ubkspa",
												"updated": "20221012223509"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "比如：[=, \u0026a, \u0026b]：以引用传递的方式捕捉变量a和b，值传递方式捕捉其他所有变量 [\u0026，a, this]：值传递方式捕捉变量a和this，引用方式捕捉其他变量"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20221012223509-ln1i8xb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221012223509-ln1i8xb",
						"updated": "20221012223509"
					},
					"Children": [
						{
							"ID": "20221012223509-sn68lcg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221012223509-sn68lcg",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "c. "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "捕捉列表不允许变量重复传递，否则就会导致编译错误"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。 比如：[=, a]：=已经以值传递方式捕捉了所有变量，捕捉a重复"
								}
							]
						}
					]
				},
				{
					"ID": "20221012223509-1w7htkk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221012223509-1w7htkk",
						"updated": "20221012223509"
					},
					"Children": [
						{
							"ID": "20221012223509-nf6xd0a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221012223509-nf6xd0a",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "d.  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "在块作用域以外的lambda函数捕捉列表必须为空"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20221012223509-37r9poj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221012223509-37r9poj",
						"updated": "20221012223509"
					},
					"Children": [
						{
							"ID": "20221012223509-ots9fj3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221012223509-ots9fj3",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "e. 在块作用域中的lambda函数仅能捕捉父作用域中局部变量，捕捉任何非此作用域或者非局部变量都会导致编译报错。"
								}
							]
						}
					]
				},
				{
					"ID": "20221012223509-5b7wjuo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221012223509-5b7wjuo",
						"updated": "20221012223509"
					},
					"Children": [
						{
							"ID": "20221012223509-c0tz40e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221012223509-c0tz40e",
								"updated": "20221012223509"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "f. "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "lambda表达式之间不能相互赋值"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，即使看起来类型相同"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221012223509-y7rk3oz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221012223509-y7rk3oz",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void (*PF)();\nint main()\n{\n\tauto f1 = [] {cout \u003c\u003c \"hello world\" \u003c\u003c endl; };\n\tauto f2 = [] {cout \u003c\u003c \"hello world\" \u003c\u003c endl; };\n\t// 此处先不解释原因，等lambda表达式底层实现原理看完后，大家就清楚了 \n\t//f1 = f2;    // 编译失败---\u003e提示找不到operator=()\n\n\t// 允许使用一个lambda表达式拷贝构造一个新的副本 \n\tauto f3(f2);\n\tf3();\n\n\t// 可以将lambda表达式赋值给相同类型的函数指针 \n\tPF = f2;\n\tPF();\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221012223708-iw7bp1z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223708-iw7bp1z"
			}
		},
		{
			"ID": "20221012223509-3n0j813",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221012223509-3n0j813",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数对象与lambda表达式"
				}
			]
		},
		{
			"ID": "20221012223509-gru9r17",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-gru9r17",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数对象，又称为仿函数，即可以想函数一样使用的对象，就是在类中重载了"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "operator()"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "运算符的类对象。"
				}
			]
		},
		{
			"ID": "20221012223509-nbdng3z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221012223509-nbdng3z",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Rate \n{\npublic:\n\tRate(double rate): _rate(rate) \n    {}\n  \n\tdouble operator()(double money, int year) \n    { \n\t    return money * _rate * year;\n\t}\n  \nprivate:\n\tdouble _rate; \n};\n\nint main() \n{\n\t// 函数对象\n\tdouble rate = 0.49; \n\tRate r1(rate);\n\tr1(10000, 2); \n\n\t// lambda\n\tauto r2 = [=](double monty, int year)-\u003edouble{return monty*rate*year; }; \n\tr2(10000, 2);\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221012223509-0le6lua",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-0le6lua",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从使用方式上来看，函数对象与lambda表达式完全一样。\n函数对象将rate作为其成员变量，在定义对象时给出初始值即可，lambda表达式通过捕获列表可以直接将该变量捕获到。"
				}
			]
		},
		{
			"ID": "20221012223623-uvs13e3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223623-uvs13e3"
			}
		},
		{
			"ID": "20221012223509-saqvei4",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221012223509-saqvei4",
				"updated": "20221012223509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "lambda的本质"
				}
			]
		},
		{
			"ID": "20221012223509-w5c1ww1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223509-w5c1ww1",
				"updated": "20221012223657"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "lambda其实是一个类，定义了一个lambda表达式，编译器会自动生成一个类，在该类中重载了operator()"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。  这也是定义lambda表达式的需要使用 [[变量类型推导#auto 使用细则|auto]] 来定义\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221012223030"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221012223030-20221012223657-bxhw8yi.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n实际在底层编译器对于lambda表达式的处理方式，完全就是按照函数对象的方式处理的，即：如果定义了一个lambda表达式，编译器会自动生成一个类，在该类中重载了operator()。"
				}
			]
		}
	]
}