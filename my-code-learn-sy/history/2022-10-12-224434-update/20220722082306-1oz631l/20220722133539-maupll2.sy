{
	"ID": "20220722133539-maupll2",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220722133539-maupll2",
		"title": "list",
		"updated": "20221012224258"
	},
	"Children": [
		{
			"ID": "20220722133552-sc8jl5a",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722133552-sc8jl5a",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "list介绍"
				}
			]
		},
		{
			"ID": "20220722133552-kk5qqfl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-kk5qqfl",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "list的文档介绍"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "[list - C++ Reference (cplusplus.com)](http://m.cplusplus.com/reference/list/list/?kw=list)"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722133552-82ubj1v",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220722133552-82ubj1v",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"ID": "20220722133552-usouvai",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220722133552-usouvai",
						"updated": "20220722133552"
					},
					"Children": [
						{
							"ID": "20220722133552-ib8q3bu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722133552-ib8q3bu",
								"updated": "20220722133552"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "list是可以在常数范围内在任意位置进行插入和删除的序列式容器，并且该容器可以前后双向迭代。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722133552-8sty5u6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220722133552-8sty5u6",
						"updated": "20220722133552"
					},
					"Children": [
						{
							"ID": "20220722133552-6ljn3wp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722133552-6ljn3wp",
								"updated": "20220722133552"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "list的底层是"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "双向链表结构"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，双向链表中每个元素存储在互不相关的独立节点中，在节点中通过指针指向其前一个元素和后一个元素。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722133552-blxxkzh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220722133552-blxxkzh",
						"updated": "20220722133552"
					},
					"Children": [
						{
							"ID": "20220722133552-f8haxwf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722133552-f8haxwf",
								"updated": "20220722133552"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "list与forward_list非常相似：最主要的不同在于forward_list是单链表，只能朝前迭代，已让其更简单高效。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722133552-kkjff6p",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220722133552-kkjff6p",
						"updated": "20220722133552"
					},
					"Children": [
						{
							"ID": "20220722133552-unl0mls",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722133552-unl0mls",
								"updated": "20220722133552"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与其他的序列式容器相比(array，vector，deque)，list通常在任意位置进行插入、移除元素的执行效率更好。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722133552-jpw3uag",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220722133552-jpw3uag",
						"updated": "20220722133552"
					},
					"Children": [
						{
							"ID": "20220722133552-fs3ssgd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722133552-fs3ssgd",
								"updated": "20220722133552"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与其他序列式容器相比，list和forward_list最大的缺陷是不支持任意位置的随机访问，比如：要访问list的第6个元素，必须从已知的位置(比如头部或者尾部)迭代到该位置，在这段位置上迭代需要线性的时间开销；list还需要一些额外的空间，以保存每个节点的相关联信息(对于存储类型较小元素的大list来说这可能是一个重要的因素)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722133552-r3cjjzi",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722133552-r3cjjzi",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "list的使用"
				}
			]
		},
		{
			"ID": "20220722133552-i10l0vr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722133552-i10l0vr",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "list的构造"
				}
			]
		},
		{
			"ID": "20220722133552-z59pty1",
			"Type": "NodeTable",
			"TableAligns": [
				1,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20220722133552-z59pty1",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "构造函数（ (constructor)"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "接口说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ist()"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造空的list"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "list (size_type n, const value_type\u0026 val = value_type())"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造的list中包含n个值为val的元素"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "list (const list\u0026 x)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "拷贝构造函数"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "list (InputIterator first, InputIterator last)"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用 [fifirst, last) 区间中的元素构造list"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722133552-3uwwda2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722133552-3uwwda2",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\nusing namespace std;\n#include \u003clist\u003e\n\nvoid print_list(const list\u003cint\u003e\u0026 l) {\n\t// 注意这里调用的是list的 begin() const，返回list的const_iterator对象\n\tfor (list\u003cint\u003e::const_iterator it = l.begin(); it != l.end(); ++it)\n\t{\n\t\tcout \u003c\u003c *it \u003c\u003c \" \";\n\t\t// *it = 10; 编译不通过\n\t}\n\n\tcout \u003c\u003c endl;\n}\n\nint main()\n{\n\tint array[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };\n\tlist\u003cint\u003e l(array, array + sizeof(array) / sizeof(array[0]));\n\t// 使用正向迭代器正向list中的元素\n\tfor (list\u003cint\u003e::iterator it = l.begin(); it != l.end(); ++it)\n\t\tcout \u003c\u003c *it \u003c\u003c \" \";\n\tcout \u003c\u003c endl;\n\t// 使用反向迭代器逆向打印list中的元素\n\tfor (list\u003cint\u003e::reverse_iterator it = l.rbegin(); it != l.rend(); ++it)\n\t\tcout \u003c\u003c *it \u003c\u003c \" \";\n\tcout \u003c\u003c endl;\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722133552-rj2rn94",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722133552-rj2rn94",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "list capacity"
				}
			]
		},
		{
			"ID": "20220722133552-zwwp0nw",
			"Type": "NodeTable",
			"TableAligns": [
				1,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20220722133552-zwwp0nw",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "函数声明"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "接口说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "empty"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "检测Iist是否为空，是返回true,否则返回false"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "size"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回Iist中有效节点的个数"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722133552-chxviaa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722133552-chxviaa",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "list element access"
				}
			]
		},
		{
			"ID": "20220722133552-l3jynwr",
			"Type": "NodeTable",
			"TableAligns": [
				1,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20220722133552-l3jynwr",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "函数声明"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "接口说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "front"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回ist的第一个节点中值的引用"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "back"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回ist的最后一个节点中值的引用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722133552-mcn37p0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722133552-mcn37p0",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "list modifiers"
				}
			]
		},
		{
			"ID": "20220722133552-j84sz0f",
			"Type": "NodeTable",
			"TableAligns": [
				1,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20220722133552-j84sz0f",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "函数声明"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "接口说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "push_front"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在ist首元素前插入值为val的元素"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "pop_front"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除st中第一个元素"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "push_back"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在ist尾部插入值为val的元素"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "pop_back"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除st中最后一个元素"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "insert"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在list position位置中插入值为val的元素"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "erase"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除list position位置的元素"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "swap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "交换两个ist中的元素"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "clear"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "清空Iist中的有效元素"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722133552-g69xg2q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722133552-g69xg2q",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003clist\u003e\nvoid PrintList(list\u003cint\u003e\u0026 l) {\n\tfor (auto\u0026 e : l)\n\t\tcout \u003c\u003c e \u003c\u003c \" \";\n\tcout \u003c\u003c endl;\n}\n//=====================================================================================\n====\n// push_back/pop_back/push_front/pop_front\nvoid TestList1()\n{\n\tint array[] = { 1, 2, 3 };\n\tlist\u003cint\u003e L(array, array + sizeof(array) / sizeof(array[0]));\n\t// 在list的尾部插入4，头部插入0\n\tL.push_back(4);\n\tL.push_front(0);\n\tPrintList(L);\n\t// 删除list尾部节点和头部节点\n\tL.pop_back();\n\tL.pop_front();\n\tPrintList(L);\n}\n//=====================================================================================\n====\n// insert /erase \nvoid TestList3()\n{\n\tint array1[] = { 1, 2, 3 };\n\tlist\u003cint\u003e L(array1, array1 + sizeof(array1) / sizeof(array1[0]));\n\t// 获取链表中第二个节点\n\tauto pos = ++L.begin();\n\tcout \u003c\u003c *pos \u003c\u003c endl;\n\t// 在pos前插入值为4的元素\n\tL.insert(pos, 4);\n\tPrintList(L);\n\t// 在pos前插入5个值为5的元素\n\tL.insert(pos, 5, 5);\n\tPrintList(L);\n\t// 在pos前插入[v.begin(), v.end)区间中的元素\n\tvector\u003cint\u003e v{ 7, 8, 9 };\n\tL.insert(pos, v.begin(), v.end());\n\tPrintList(L);\n\t// 删除pos位置上的元素\n\tL.erase(pos);\n\tPrintList(L);\n\t// 删除list中[begin, end)区间中的元素，即删除list中的所有元素\n\tL.erase(L.begin(), L.end());\n\tPrintList(L);\n}\n// resize/swap/clear\nvoid TestList4()\n{\n\t// 用数组来构造list\n\tint array1[] = { 1, 2, 3 };\n\tlist\u003cint\u003e l1(array1, array1 + sizeof(array1) / sizeof(array1[0]));\n\tPrintList(l1);\n\t// 交换l1和l2中的元素\n\tl1.swap(l2);\n\tPrintList(l1);\n\tPrintList(l2);\n\t// 将l2中的元素清空\n\tl2.clear();\n\tcout \u003c\u003c l2.size() \u003c\u003c endl;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722133552-rfhuz17",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722133552-rfhuz17",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "list的模拟实现"
				}
			]
		},
		{
			"ID": "20220722133552-5fk3rnd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-5fk3rnd",
				"updated": "20220722133741"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "list使用的"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722100407-vxftv8c"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefText",
							"Data": "双向迭代器"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n并带有"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722100407-graa4dd"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "反向迭代器"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的实现。"
				}
			]
		},
		{
			"ID": "20220722133552-3pcshth",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722133552-3pcshth",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "ListNode"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "节点结构体定义"
				}
			]
		},
		{
			"ID": "20220722133552-xanj8x9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-xanj8x9",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此结构体用来初始化节点"
				}
			]
		},
		{
			"ID": "20220722133552-qbyj07r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722133552-qbyj07r",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003cclass T\u003e\nstruct ListNode\n{\n\tListNode\u003cT\u003e* _next;\n\tListNode\u003cT\u003e* _prev;\n\tT _data;\n\n\tListNode(const T\u0026 data = T()) //T()是一个匿名结构体\n\t\t:_next(nullptr)\n\t\t, _prev(nullptr)\n\t\t, _data(data)\n\t{}\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722133552-m006x51",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-m006x51",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ListNode的构造函数的"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "缺省值"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "是使用一个"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "匿名结构体"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来进行赋值的。匿名结构体被"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "const"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "修饰会延迟他的生命周期，直到此栈帧被释放。"
				}
			]
		},
		{
			"ID": "20220722133552-zu1w7qn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722133552-zu1w7qn",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "__list_iterator"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 迭代器的定义"
				}
			]
		},
		{
			"ID": "20220722133552-jkj500u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-jkj500u",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定义了list的迭代器，以及一些运算符重载的函数。"
				}
			]
		},
		{
			"ID": "20220722133552-2b2aruh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-2b2aruh",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "Ref 是 const T*\nPtr 是 const T\u0026"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722133552-4mt2x2z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722133552-4mt2x2z",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003cclass T , class Ref , class Ptr\u003e\nstruct __list_iterator\n{\n\ttypedef ListNode\u003cT\u003e Node;\n\ttypedef __list_iterator\u003cT, Ref, Ptr\u003e self;\n\tNode* _node;\n\n\t__list_iterator(Node* x)\n\t\t:_node(x)\n\t{}\n\n\t//Ref 是 const T\u0026\n\tRef operator*()\n\t{\n\t\treturn _node -\u003e _data;\n\t}\n\n\t//ptr 是 const T*\n\tPtr operator-\u003e()\n\t{\n\t\treturn \u0026_node-\u003e_data;\n\t}\n\n\t//++int\n\tself\u0026 operator++()\n\t{\n\t\t_node = _node-\u003e_next;\n\t\treturn *this;\n\t}\n\t//int++\n\tself operator++(int)\n\t{\n\t\t__list_iterator\u003cT\u003e tmp(*this);\n\t\t_node = _node-\u003e_next;\n\t\treturn tmp;\n\t}\n\n\t//--int\n\tself\u0026 operator--()\n\t{\n\t\t_node = _node-\u003e_prev;\n\t\treturn *this;\n\t}\n\n\t// int--\n\tself operator--(int)\n\t{\n\t\t__list_iterator\u003cT\u003e tmp(*this);\n\t\t_node = _node-\u003e_prev;\n\t\treturn tmp;\n\t}\n\n\tbool operator!=(const self\u0026 it) const\n\t{\n\t\treturn _node != it._node;\n\t}\n\n\tbool operator==(const self\u0026 it) const\n\t{\n\t\treturn _node == it._node;\n\t}\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722133552-v6nxlvk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722133552-v6nxlvk",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "list"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 主体"
				}
			]
		},
		{
			"ID": "20220722133552-thbtxhr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722133552-thbtxhr",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template\u003cclass T\u003e\n\tclass list\n\t{\n\t\ttypedef ListNode\u003cT\u003e Node;\n\n\tpublic:\n\t\ttypedef __list_iterator\u003cT , T\u0026 , T*\u003e iterator; //这是普通的迭代器\n\t\ttypedef __list_iterator\u003cT, const T\u0026, const T*\u003e const_iterator; //这是const迭代器\n\n\t\ttypedef reverse_iterator\u003cconst_iterator, const T\u0026, const T*\u003e const_reverse_iterator;\n\t\ttypedef reverse_iterator\u003citerator, T\u0026, T*\u003e  reverse_iterator;\n\t\n\n\t\treverse_iterator rbegin()\n\t\t{\n\t\t\treturn reverse_iterator(end());\n\t\t}\n\n\t\treverse_iterator rend()\n\t\t{\n\t\t\treturn reverse_iterator(begin());\n\t\t}\n\n\t\titerator begin() //因为 _head-\u003e_next 是指针，所以iterator放回的是一个 T*\n\t\t{\n\t\t\treturn iterator(_head-\u003e_next);\n\t\t}\n\n\t\titerator end()//因为 _head是指针，所以iterator放回的是一个 T*\n\t\t{\n\t\t\treturn iterator(_head);\n\t\t}\n\n\t\tconst_iterator begin() const//因为 _head-\u003e_next 是指针，但const_iterator是const修饰的，所以返回的是一个 const T*\n\t\t{\n\t\t\treturn const_iterator(_head-\u003e_next);\n\t\t}\n\n\t\tconst_iterator end() const//因为 _head 是指针，但const_iterator是const修饰的，所以返回的是一个 const T*\n\t\t{\n\t\t\treturn const_iterator(_head);\n\t\t}\n\n\t\tlist()\n\t\t{\n\t\t\t_head = new Node();\n\t\t\t_head-\u003e_next = _head;\n\t\t\t_head-\u003e_prev = _head;\n\t\t}\n\n\t\t////传统写法 lt2(lt1)\n\t\t//list(const list\u003cT\u003e\u0026 lt)\n\t\t//{\n\t\t//\t_head = new Node();\n\t\t//\t_head-\u003e_next = _head;\n\t\t//\t_head-\u003e_prev = _head;\n\n\t\t//\tfor (auto e : lt)\n\t\t//\t{\n\t\t//\t\tpush_back(e);\n\t\t//\t}\n\t\t//}\n\t\t////lt2 = lt1\n\t\t//list\u003cT\u003e\u0026 operator=(const list\u003cT\u003e\u0026 lt)\n\t\t//{\n\t\t//\tif (this != \u0026lt)\n\t\t//\t{\n\t\t//\t\tclear();\n\t\t//\t\tfor (auto e : lt)\n\t\t//\t\t{\n\t\t//\t\t\tpush_back(e);\n\t\t//\t\t}\n\t\t//\t}\n\n\t\t//\treturn *this;\n\t\t//}\n\n\n\t\tlist(int n, const T\u0026 val = T())\n\t\t{\n\t\t\t_head = new Node();\n\t\t\t_head-\u003e_next = _head;\n\t\t\t_head-\u003e_prev = _head;\n\t\t\tfor (int i = 0; i \u003c n; i++)\n\t\t\t{\n\t\t\t\tpush_back(val);\n\t\t\t}\n\t\t}\n\t\tlist(size_t n, const T\u0026 val = T())\n\t\t{\n\t\t\t_head = new Node();\n\t\t\t_head-\u003e_next = _head;\n\t\t\t_head-\u003e_prev = _head;\n\t\t\tfor (size_t i = 0; i \u003c n; i++)\n\t\t\t{\n\t\t\t\tpush_back(val);\n\t\t\t}\n\t\t}\n\t\t//现代写法\n\t\ttemplate\u003cclass InputIterator\u003e\n\t\tlist(InputIterator first, InputIterator last )\n\t\t{\n\t\t\t_head = new Node();\n\t\t\t_head-\u003e_next = _head;\n\t\t\t_head-\u003e_prev = _head;\n\n\t\t\twhile (first != last)\n\t\t\t{\n\t\t\t\tpush_back(*first);\n\t\t\t\t++first;\n\t\t\t}\n\t\t}\n\t\tlist(const list\u003cT\u003e\u0026 lt)\n\t\t{\n\t\t\t_head = new Node();\n\t\t\t_head-\u003e_next = _head;\n\t\t\t_head-\u003e_prev = _head;\n\n\t\t\tlist\u003cT\u003e tmp(lt.begin(), lt.end());\n\t\t\tstd::swap(_head, tmp._head);\n\t\t}\n\n\t\tlist\u003cT\u003e\u0026 operator=(list\u003cT\u003e lt)\n\t\t{\n\t\t\tstd::swap(_head, lt._head);\n\t\t\treturn *this;\n\t\t}\n\n\t\t~list()\n\t\t{\n\t\t\tclear();\n\n\t\t\tdelete _head;\n\t\t\t_head = nullptr;\n\t\t}\n\n\t\n\n\n\t\tvoid clear()\n\t\t{\n\n\t\t\t/*iterator it = begin();\n\t\t\twhile (it != end())\n\t\t\t{\n\t\t\t\titerator del = it++;\n\t\t\t\tdelete del._node;\n\t\t\t}\n\n\t\t\t_head-\u003e_next = _head;\n\t\t\t_head-\u003e_prev = _head;*/\n\n\n\t\t\titerator lt = begin();\n\t\t\twhile (lt != end())\n\t\t\t{\n\t\t\t\terase(lt++);\n\t\t\t}\n\t\t}\n\n\n\t\tvoid push_front(const T\u0026 x)\n\t\t{\n\t\t\tinsert(begin(), x);\n\t\t}\n\n\t\tvoid pop_front()\n\t\t{\n\t\t\terase(begin());\n\t\t}\n\n\n\t\titerator insert(iterator pos , const T\u0026 x)\n\t\t{\n\t\t\tNode* cur = pos._node;\n\t\t\tNode* prev = cur-\u003e_prev;\n\t\t\tNode* NewNode = new Node(x);\n\n\t\t\tprev-\u003e_next = NewNode;\n\t\t\tNewNode-\u003e_prev = prev;\n\t\t\tNewNode-\u003e_next = cur;\n\t\t\tcur-\u003e_prev = NewNode;\n\n\t\t\treturn iterator(NewNode);\n\t\t}\n\n\t\tvoid push_back(const T\u0026 x)\n\t\t{\n\t\t\t/*Node* tail = _head-\u003e_prev;\n\t\t\tNode* NewNode = new Node(x);\n\t\t\ttail-\u003e_next = NewNode;\n\t\t\tNewNode-\u003e_prev = tail;\n\t\t\tNewNode-\u003e_next = _head;\n\t\t\t_head-\u003e_prev = NewNode;*/\n\n\t\t\tinsert(end(), x);\n\t\t}\n\n\n\t\tvoid pop_back()\n\t\t{\n\t\t\terase(--end());\n\t\t}\n\n\n\t\titerator erase(iterator pos)\n\t\t{\n\t\t\tassert(pos != end());\n\n\t\t\tNode* prev = pos._node-\u003e_prev;\n\t\t\tNode* next = pos._node-\u003e_next;\n\t\t\tdelete pos._node;\n\t\t\tprev-\u003e_next = next;\n\t\t\tnext-\u003e_prev = prev;\n\n\t\t\treturn iterator(next); //返回的是删除节点的下一个节点\n\t\t}\n\n\n\tprivate:\n\t\tNode* _head;\n\t};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722133552-xkfl7ds",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-xkfl7ds",
				"updated": "20220722133828"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这部分的其实就是指定迭代器所用的模板参数\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220518220442.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n对应的就是"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "__list_iterator"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "self"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 中的 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "模板"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722133833-f76vbmo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133833-f76vbmo",
				"updated": "20220722133844"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220518220728.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722133552-f5k2gkk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722133552-f5k2gkk",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "list"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 迭代器失效"
				}
			]
		},
		{
			"ID": "20220722133552-cpo9fdf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-cpo9fdf",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在list的增删查改中，都有可能会出现迭代器失效。"
				}
			]
		},
		{
			"ID": "20220722133552-4n4r1uh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-4n4r1uh",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "错误案例："
				}
			]
		},
		{
			"ID": "20220722133552-oqgau40",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722133552-oqgau40",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void test3()\n{\n\tlist\u003cint\u003e lt3;\n\tlt3.push_back(44);\n\tlt3.push_back(66);\n\tlt3.push_back(68);\n\tlt3.push_back(87);\n\n\tlist\u003cint\u003e::iterator b = lt3.begin();\n\twhile (b != lt3.end())\n\t{\n\t\tif (b._node-\u003e_data == 66)\n\t\t{\n\t\t\tlt3.erase(b); //必须要考虑到迭代器失效，所以必须为b = erase 的返回值。 erase的返回值是一个iterator，也就是一个新的迭代器了。然后却没有变量接收。\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++b;\n\t\t}\n\t}                             \n\tprint_list(lt3);//打印list\n\n\tlist\u003cint\u003e::iterator c = lt3.begin();\n\twhile (c != lt3.end())\n\t{\n\t\tif (c._node-\u003e_data == 68)\n\t\t{\n\t\t\tc = lt3.insert(c, 77);//insert 插入后迭代器是在插入值的位置，后一个就是我们的目标值68，所以会陷入死循环\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++c;\n\t\t}\n\t}\n\tprint_list(lt3);//打印list\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722133552-pjag06n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133552-pjag06n",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正确做法："
				}
			]
		},
		{
			"ID": "20220722133552-ngidmjh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722133552-ngidmjh",
				"updated": "20220722133552"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void test3()\n{\n\tlist\u003cint\u003e lt3;\n\tlt3.push_back(44);\n\tlt3.push_back(66);\n\tlt3.push_back(68);\n\tlt3.push_back(87);\n\n\tlist\u003cint\u003e::iterator b = lt3.begin();\n\twhile (b != lt3.end())\n\t{\n\t\tif (b._node-\u003e_data == 66)\n\t\t{\n\t\t\tb = lt3.erase(b); //必须要考虑到迭代器失效，所以必须为b = erase 的返回值。 erase的返回值是一个iterator，也就是一个新的迭代器了。然后却没有变量接收。\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++b;\n\t\t}\n\t}                             \n\tprint_list(lt3);//打印list\n\n\tlist\u003cint\u003e::iterator c = lt3.begin();\n\twhile (c != lt3.end())\n\t{\n\t\tif (c._node-\u003e_data == 68)\n\t\t{\n\t\t\tlt3.insert(c, 77);//insert 插入后迭代器是在插入值的位置，后一个就是我们的目标值68，，如果再使用 c=lt3.insert(c, 77) 就会会陷入死循环.\n\t\t\tc++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++c;\n\t\t}\n\t}\n\tprint_list(lt3);//打印list\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221012223931-nfooctc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223931-nfooctc"
			}
		},
		{
			"ID": "20221012224002-wpw37s0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221012224002-wpw37s0",
				"updated": "20221012224258"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用initializer_list构造来构造list"
				}
			]
		},
		{
			"ID": "20221012224002-ryxq5vr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012224002-ryxq5vr",
				"updated": "20221012224017"
			},
			"Children": [
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20221012223739-qdrsz4q"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "initializer_list"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来构造list。"
				}
			]
		},
		{
			"ID": "20221012224002-ht6h04q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221012224002-ht6h04q",
				"updated": "20221012224002"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "list(std::initializer_list\u003cT\u003e ilt)\n{\n\t_head = new Node();\n\t_head-\u003e_next = _head;\n\t_head-\u003e_prev = _head;\n\n\tfor (auto e : ilt)\n\t{\n\t\tpush_back(e);\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221012223932-oakga38",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012223932-oakga38"
			}
		}
	]
}