{
	"ID": "20220722100637-md5xqdk",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220722100637-md5xqdk",
		"title": "vector",
		"updated": "20221012224056"
	},
	"Children": [
		{
			"ID": "20220722100646-ucga94v",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722100646-ucga94v",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector的介绍与使用"
				}
			]
		},
		{
			"ID": "20220722100646-igok6m2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722100646-igok6m2",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector的介绍"
				}
			]
		},
		{
			"ID": "20220722100646-1qvnigu",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722100646-1qvnigu",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722100646-ex942a8",
					"Type": "NodeList",
					"ListData": {
						"Typ": 1
					},
					"Properties": {
						"id": "20220722100646-ex942a8",
						"updated": "20220722100646"
					},
					"Children": [
						{
							"ID": "20220722100646-524nddy",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "MS4=",
								"Num": 1
							},
							"Properties": {
								"id": "20220722100646-524nddy",
								"updated": "20220722100646"
							},
							"Children": [
								{
									"ID": "20220722100646-h57937e",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722100646-h57937e",
										"updated": "20220722100646"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "vector是表示"
										},
										{
											"Type": "NodeMark",
											"Data": "mark",
											"Children": [
												{
													"Type": "NodeMark2OpenMarker"
												},
												{
													"Type": "NodeStrong",
													"Data": "strong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "可变大小数组"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeMark2CloseMarker"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "的序列容器。"
										}
									]
								}
							]
						},
						{
							"ID": "20220722100646-i2yzojv",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "Mi4=",
								"Num": 2
							},
							"Properties": {
								"id": "20220722100646-i2yzojv",
								"updated": "20220722100646"
							},
							"Children": [
								{
									"ID": "20220722100646-bj9ib2w",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722100646-bj9ib2w",
										"updated": "20220722100646"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "就像数组一样，vector也"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "采用"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "的"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "连续存储空间"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "来存储元素。也就是意味着可以采用下标对vector的元素进行访问，和数组一样高效。但是又不像数组，它的"
										},
										{
											"Type": "NodeMark",
											"Data": "mark",
											"Children": [
												{
													"Type": "NodeMark2OpenMarker"
												},
												{
													"Type": "NodeText",
													"Data": "大小是可以动态改变"
												},
												{
													"Type": "NodeMark2CloseMarker"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "的，而且它的"
										},
										{
											"Type": "NodeMark",
											"Data": "mark",
											"Children": [
												{
													"Type": "NodeMark2OpenMarker"
												},
												{
													"Type": "NodeText",
													"Data": "大小会被容器自动处理"
												},
												{
													"Type": "NodeMark2CloseMarker"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "。"
										}
									]
								}
							]
						},
						{
							"ID": "20220722100646-zxgdr8p",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "My4=",
								"Num": 3
							},
							"Properties": {
								"id": "20220722100646-zxgdr8p",
								"updated": "20220722100646"
							},
							"Children": [
								{
									"ID": "20220722100646-tt677jq",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722100646-tt677jq",
										"updated": "20220722100646"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "本质讲，vector使用动态分配数组来存储它的元素。当新元素插入时候，这个数组需要被重新分配大小为了增加存储空间。其做法是，分配一个新的数组，然后将全部元素移到这个数组。就时间而言，这是一个相对代价高的任务，因为每当一个新的元素加入到容器的时候，vector并不会每次都重新分配大小。"
										}
									]
								}
							]
						},
						{
							"ID": "20220722100646-0zocvpq",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "NC4=",
								"Num": 4
							},
							"Properties": {
								"id": "20220722100646-0zocvpq",
								"updated": "20220722100646"
							},
							"Children": [
								{
									"ID": "20220722100646-am6ufm9",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722100646-am6ufm9",
										"updated": "20220722100646"
									},
									"Children": [
										{
											"Type": "NodeMark",
											"Data": "mark",
											"Children": [
												{
													"Type": "NodeMark2OpenMarker"
												},
												{
													"Type": "NodeStrong",
													"Data": "strong",
													"Children": [
														{
															"Type": "NodeStrongA6kOpenMarker",
															"Data": "**"
														},
														{
															"Type": "NodeText",
															"Data": "vector分配空间策略"
														},
														{
															"Type": "NodeStrongA6kCloseMarker",
															"Data": "**"
														}
													]
												},
												{
													"Type": "NodeMark2CloseMarker"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "：vector会分配一些额外的空间以适应可能的增长，因为存储空间比实际需要的存储空间更大。不同的库采用不同的策略权衡空间的使用和重新分配。但是无论如何，重新分配都应该是对数增长的间隔大小，以至于在末尾插入一个元素的时候是在常数时间的复杂度完成的。("
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "增长速度大约为1.5倍"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": ")"
										}
									]
								}
							]
						},
						{
							"ID": "20220722100646-3xtgsai",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "NS4=",
								"Num": 5
							},
							"Properties": {
								"id": "20220722100646-3xtgsai",
								"updated": "20220722100646"
							},
							"Children": [
								{
									"ID": "20220722100646-ruminjo",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722100646-ruminjo",
										"updated": "20220722100646"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "因此，vector占用了更多的存储空间，为了获得管理存储空间的能力，并且以一种有效的方式动态增长。"
										}
									]
								}
							]
						},
						{
							"ID": "20220722100646-y09gql2",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "Ni4=",
								"Num": 6
							},
							"Properties": {
								"id": "20220722100646-y09gql2",
								"updated": "20220722100646"
							},
							"Children": [
								{
									"ID": "20220722100646-oqu68xq",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722100646-oqu68xq",
										"updated": "20220722100646"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "与其它动态序列容器相比（deques, lists and forward_lists）， vector在访问元素的时候更加高效，在末尾添加和删除元素相对高效。对于其它不在末尾的删除和插入操作，效率更低。比起lists和forward_lists统一的迭代器和引用更好。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722100646-btnxnig",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722100646-btnxnig",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector的使用"
				}
			]
		},
		{
			"ID": "20220722100646-95q9o4q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-95q9o4q",
				"updated": "20220722100709"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220511204407.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722100646-rdh04p6",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722100646-rdh04p6",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722100646-d9d3hu0",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722100646-d9d3hu0",
						"updated": "20220722100646"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "value_type 就是数据的类型"
						}
					]
				}
			]
		},
		{
			"ID": "20220722100646-ftkkjkn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-ftkkjkn",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cvector\u003e\nint main()\n{\n\tvector\u003cint\u003e v1; //无参构造\n\n\tvector\u003cint\u003e v2(10, 8); // 构造出 10个 8\n\n\tvector\u003cint\u003e v3(++v2.begin(), --v2.end()); //使用迭代器构造出8个 8\n\n\tstring s(\"emm\");\n\tvector\u003cchar\u003e v4(s.begin(), s.end()); //使用迭代器构造\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-hr3djhd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-hr3djhd",
				"updated": "20220722100732"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220511210741.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722100646-c4iqa92",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722100646-c4iqa92",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector iterator 的使用"
				}
			]
		},
		{
			"ID": "20220722100646-c4rpcll",
			"Type": "NodeTable",
			"TableAligns": [
				1,
				1
			],
			"Properties": {
				"colgroup": "width: 240px;|",
				"id": "20220722100646-c4rpcll",
				"updated": "20220722100818"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "iterator的使用"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "接口说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "begin +end（重点）"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeText",
											"Data": "第一个数据位置"
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "的iterator/const_iterator， 获取"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeText",
											"Data": "最后一个数据的下一个位置"
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "的iterator/const_iterator"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "rbegin + rend"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取最后一个数据位置的reverse_iterator，获取第一个数据前一个位置的"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722100836-o0j68sn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100836-o0j68sn",
				"updated": "20220722100850"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220511213051.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722100836-ir6egwz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100836-ir6egwz"
			}
		},
		{
			"ID": "20220722100646-910fn5v",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722100646-910fn5v",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector 空间增长问题"
				}
			]
		},
		{
			"ID": "20220722100646-1vaibhz",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				2
			],
			"Properties": {
				"colgroup": "|",
				"id": "20220722100646-1vaibhz",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "容量空间"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "接口说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "size"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取数据个数"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "capacity"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取容量大小"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "empty"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "判断是否为空"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "reserve （重点）"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "改变vector放入capacity"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "resize（重点）"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "改变vector的size"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722100646-7berr8k",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722100646-7berr8k",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722100646-dsfaztz",
					"Type": "NodeList",
					"ListData": {
						"Typ": 1
					},
					"Properties": {
						"id": "20220722100646-dsfaztz",
						"updated": "20220722100646"
					},
					"Children": [
						{
							"ID": "20220722100646-t4zry3m",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "MS4=",
								"Num": 1
							},
							"Properties": {
								"id": "20220722100646-t4zry3m",
								"updated": "20220722100646"
							},
							"Children": [
								{
									"ID": "20220722100646-cxclux7",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722100646-cxclux7",
										"updated": "20220722100646"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "capacity的代码在vs和g++下分别运行会发现，vs下capacity是按1.5倍增长的，g++是按2倍增长的。这个问题经常会考察，不要固化的认为，顺序表增容都是2倍，具体增长多少是根据具体的需求定义的。vs是PJ版本STL，g++是SGI版本STL。"
										}
									]
								}
							]
						},
						{
							"ID": "20220722100646-3jrzsds",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "Mi4=",
								"Num": 2
							},
							"Properties": {
								"id": "20220722100646-3jrzsds",
								"updated": "20220722100646"
							},
							"Children": [
								{
									"ID": "20220722100646-jm348jr",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722100646-jm348jr",
										"updated": "20220722100646"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "reserve只负责开辟空间，如果确定知道需要用多少空间，reserve可以缓解vector增容的代价缺陷问题。"
										}
									]
								}
							]
						},
						{
							"ID": "20220722100646-kcjnp6v",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "My4=",
								"Num": 3
							},
							"Properties": {
								"id": "20220722100646-kcjnp6v",
								"updated": "20220722100646"
							},
							"Children": [
								{
									"ID": "20220722100646-aa30jl8",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722100646-aa30jl8",
										"updated": "20220722100646"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "resize在开空间的同时还会进行初始化，影响size。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722100903-b37jcht",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100903-b37jcht"
			}
		},
		{
			"ID": "20220722100646-md6q4v9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722100646-md6q4v9",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector 增删查改"
				}
			]
		},
		{
			"ID": "20220722100646-j3quy31",
			"Type": "NodeTable",
			"TableAligns": [
				1,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20220722100646-j3quy31",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "vector增删查改"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "接口说明"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "push_back（重点）"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "尾插"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "pop_back （重点）"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "尾删"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "find"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "查找。"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "（注意这个是算法模块实现，不是vector的成员接口）,需要导入头文件"
										},
										{
											"Type": "NodeCodeSpan",
											"Data": "code",
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "\u003calgorithm\u003e"
												},
												{
													"Type": "NodeCodeSpanCloseMarker"
												}
											]
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "insert"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在position之前插入val"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "erase"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "删除position位置的数据"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "swap"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "交换两个vector的数据空间"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "operator[] （重点）"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "像数组一样访问"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722100646-578ckhm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-578ckhm",
				"updated": "20220722100928"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector中使用find,需要使用到"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722100351-cnqwdxc"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "迭代器"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20220722100646-1ykw4rs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-1ykw4rs",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003c\nint main()\n{\n\tvector\u003cint\u003e v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(4);\n\n\tvector\u003cint\u003e::iterator ret = find(v.begin(), v.end(), 3);//使用迭代器来寻找\n\tif (ret != v.end())\n\t{\n\t\tv.insert(ret, 66); //在迭代器处插入66\n\n\t\tv.erase(ret);//不能在这里删除，这里涉及到迭代器失效问题\n\t}\n\n\tv.insert(v.begin(), -1);\n\n\tv.clear();\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-kjwy374",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-kjwy374",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "![[Pasted image 20220511215636.png]]"
				}
			]
		},
		{
			"ID": "20220722100646-cail2ec",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722100646-cail2ec",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector模拟实现"
				}
			]
		},
		{
			"ID": "20220722100646-ycqcxcn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-ycqcxcn",
				"updated": "20220722101006"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector使用的"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722100407-bk6qcro"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "随机迭代器"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722100646-k7v68ux",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-k7v68ux",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace fmy\n{\n\ttemplate\u003cclass T\u003e\n\tclass vector\n\t{\n\tpublic:\n\t\ttypedef T* iterator;\n\t\ttypedef const T* const_iterator;\n\n\t\tvector()\n\t\t\t:_start(nullptr)\n\t\t\t, _finish(nullptr)\n\t\t\t, _end_of_storage(nullptr)\n\t\t{\n\n\t\t}\n\n\t\t////v2(v1) 传统写法\n\t\t//vector(const vector\u003cT\u003e\u0026 v)\n\t\t//{\n\t\t//\t_start = new T[v.capacity()];\n\t\t//\t_finish = _start + v.size();\n\t\t//\t_end_of_storage = _start + v.capacity();\n\n\t\t//\tmemcpy(_start, v._start, v.size() * sizeof(T));\n\t\t//}\n\t\n\t\t//现代写法\n\t\tvector(const vector\u003cT\u003e\u0026 v)\n\t\t\t:_start(nullptr)\n\t\t\t, _finish(nullptr)\n\t\t\t, _end_of_storage(nullptr)\n\t\t{\n\t\t\tvector\u003cT\u003e tmp(v.begin(), v.end());\n\n\t\t\tswap(tmp);\n\t\t}\n\n\t\ttemplate \u003cclass InputIterator\u003e\n\t\tvector(InputIterator first, InputIterator last)\n\t\t\t:_start(nullptr)\n\t\t\t, _finish(nullptr)\n\t\t\t, _end_of_storage(nullptr)\n\t\t{\n\t\t\twhile (first != last)\n\t\t\t{\n\t\t\t\tpush_back(*first);\n\t\t\t\tfirst++;\n\t\t\t}\n\t\t}\n\n\t\t~vector()\n\t\t{\n\t\t\tif (_start)\n\t\t\t{\n\t\t\t\tdelete[] _start;\n\t\t\t\t_start = _finish = _end_of_storage = nullptr;\n\t\t\t}\n\t\t}\n\n\n\t\titerator begin()\n\t\t{\n\t\t\treturn _start;\n\t\t}\n\n\t\titerator end()\n\t\t{\n\t\t\treturn _finish;\n\t\t}\n\n\t\tconst_iterator begin() const\n\t\t{\n\t\t\treturn _start;\n\t\t}\n\n\t\tconst_iterator end() const\n\t\t{\n\t\t\treturn _finish;\n\t\t}\n\n\n\t\tvector\u003cT\u003e\u0026 operator=(vector\u003cT\u003e v)\n\t\t{\n\t\t\tswap(v);\n\n\t\t\treturn *this;\n\t\t}\n\n\t\tvoid swap(vector\u003cT\u003e\u0026 v)\n\t\t{\n\t\t\tstd::swap(_start,v._start);\n\t\t\tstd::swap(_finish, v._finish);\n\t\t\tstd::swap(_end_of_storage, v._end_of_storage);\n\t\t}\n\n\t\tsize_t size() const\n\t\t{\n\t\t\treturn _finish - _start; //指针减指针，得到指针相隔的距离\n\t\t}\n\n\t\tsize_t capacity() const\n\t\t{\n\t\t\treturn _end_of_storage - _start;\n\t\t}\n\n\t\tconst T\u0026 operator[](size_t i) const//作为返回值T\u0026不可被修改。\n\t\t{\n\t\t\tassert(i \u003c size());\n\t\t\treturn _start[i]; // 相当于指针 _start + i ;\n\t\t}\n\n\t\tT\u0026 operator[](size_t i) \n\t\t{\n\t\t\tassert(i \u003c size());\n\t\t\treturn _start[i]; // 相当于指针 _start + i ;\n\t\t}\n\n\t\tvoid reserve(size_t n)\n\t\t{\n\t\t\tif (n \u003e capacity())\n\t\t\t{\n\t\t\t\tsize_t sz = size();\n\t\t\t\tT* tmp = new T[n];\n\n\t\t\t\tif (_start)\n\t\t\t\t{\n\t\t\t\t\t//memcpy(tmp, _start, sizeof(T) * size());\n\t\t\t\t\tfor (int i = 0; i \u003c sz; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\t// T 是int，一个一个拷贝没问题\n\t\t\t\t\t\t// T 是string， 一个一个拷贝调用是T的深拷贝赋值，也没问题\n\t\t\t\t\t\ttmp[i] = _start[i];\n\t\t\t\t\t}\n\t\t\t\t\tdelete[] _start;\n\t\t\t\t}\n\n\t\t\t\t_start = tmp;\n\t\t\t\t_finish = _start + sz; // _finish = _start + size();   size（）有问题\n\t\t\t\t_end_of_storage = _start + n;\n\t\t\t}\n\t\t}\n\n\t\tvoid resize(size_t n , const T\u0026 val = T())\n\t\t{\n\t\t\tif (n \u003c size())\n\t\t\t{\n\t\t\t\t_finish = _start + n;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (n \u003e capacity())\n\t\t\t\t{\n\t\t\t\t\treserve(n);\n\t\t\t\t}\n\n\t\t\t\twhile (_finish != _start + n)\n\t\t\t\t{\n\t\t\t\t\t*_finish = val;\n\t\t\t\t\t++_finish;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\titerator insert(iterator pos, const T\u0026 x)\n\t\t{\n\t\t\tassert(pos \u003e= _start);\n\t\t\tassert(pos \u003c= _finish);\n\n\t\t\tif (_finish == _end_of_storage)\n\t\t\t{\n\t\t\t\tint len = pos - _start;\n\t\t\t\treserve(capacity() == 0 ? 4 : capacity() * 2);\n\t\t\t\tpos = _start + len;\n\t\t\t}\n\n\t\t\titerator end = _finish - 1;\n\t\t\twhile (end \u003e= pos)\n\t\t\t{\n\t\t\t\t*(end + 1) = *end;\n\t\t\t\tend--;\n\t\t\t}\n\t\t\t*pos = x;\n\t\t\t_finish++;\n\n\t\t\treturn pos;\n\t\t}\n\n\t\titerator erase(iterator pos)\n\t\t{\n\t\t\tassert(pos \u003e= _start);\n\t\t\tassert(pos \u003c _finish);\n\n\t\t\titerator begin = pos + 1;\n\t\t\twhile (begin \u003c _finish)\n\t\t\t{\n\t\t\t\t*(begin - 1) = *begin;\n\t\t\t\tbegin++;\n\t\t\t}\n\n\t\t\t_finish--;\n\n\t\t\treturn pos;\n\t\t\n\t\t}\n\n\t\tvoid push_back(const T\u0026 x)\n\t\t{\n\t\t\tif (_finish == _end_of_storage)\n\t\t\t{\n\t\t\t\treserve(capacity() == 0 ? 4 : capacity() * 2);\n\t\t\t}\n\n\t\t\t*_finish = x;\n\t\t\t++_finish;\n\t\t}\n\n\t\tvoid pop_back()\n\t\t{\n\t\t\tassert(_finish \u003e _start);\n\t\t\t--_finish;\n\t\t}\n\n\n\t\tvoid print()\n\t\t{\n\t\t\tfor (int i = 0; i \u003c size(); i++)\n\t\t\t{\n\t\t\t\tcout \u003c\u003c _start[i] \u003c\u003c \" \" ;\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\tprivate:\n\t\titerator _start;\n\t\titerator _finish;\n\t\titerator _end_of_storage;\n\t};\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-q80n4bq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722100646-q80n4bq",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector的拷贝构造"
				}
			]
		},
		{
			"ID": "20220722100646-89cc37m",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722100646-89cc37m",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "传统写法"
				}
			]
		},
		{
			"ID": "20220722100646-ymvlmly",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-ymvlmly",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//v2(v1) 传统写法\nvector(const vector\u003cT\u003e\u0026 v)\n{\n\t_start = new T[v.capacity()];\n\t_finish = _start + v.size();\n\t_end_of_storage = _start + v.capacity();\n\n\tmemcpy(_start, v._start, v.size() * sizeof(T));\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-f22ibkw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722100646-f22ibkw",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现代写法"
				}
			]
		},
		{
			"ID": "20220722100646-zfwdmbg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-zfwdmbg",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现代写法实际上是使用了"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "迭代器"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来初识化。"
				}
			]
		},
		{
			"ID": "20220722100646-28qg5fi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-28qg5fi",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//现代写法\nvector(const vector\u003cT\u003e\u0026 v)\n\t:_start(nullptr)\n\t, _finish(nullptr)\n\t, _end_of_storage(nullptr)\n{\n\tvector\u003cT\u003e tmp(v.begin(), v.end());\n\n\tswap(tmp);\n}\n\ntemplate \u003cclass InputIterator\u003e\nvector(InputIterator first, InputIterator last)\n\t:_start(nullptr)\n\t, _finish(nullptr)\n\t, _end_of_storage(nullptr)\n{\n\twhile (first != last)\n\t{\n\t\tpush_back(*first);\n\t\tfirst++;\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-q8dvpts",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722100646-q8dvpts",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector的析构函数"
				}
			]
		},
		{
			"ID": "20220722100646-az8iw00",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-az8iw00",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "~vector()\n{\n\tdelete[] _start;\n\t_start = _finish = _end_of_storage = nullptr;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-tg4cfjw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722100646-tg4cfjw",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "reserve()"
				}
			]
		},
		{
			"ID": "20220722100646-qd9rura",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-qd9rura",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void reserve(size_t n)\n{\n\tif (n \u003e capacity())\n\t{\n\t\tsize_t sz = size();\n\t\tT* tmp = new T[n];\n\n\t\tif (_start)\n\t\t{\n\t\t\t//memcpy(tmp, _start, sizeof(T) * size()); //不能使用memcpy，因为如果vector中存储的是string，那就会出现一些乱码。\n\t\t\n\t\t\tfor (int i = 0; i \u003c sz; i++)\n\t\t\t{\n\t\t\t\t// T 是int，一个一个拷贝没问题\n\t\t\t\t// T 是string， 一个一个拷贝调用是T的深拷贝赋值，也没问题\n\t\t\t\ttmp[i] = _start[i];\n\t\t\t}\n\t\t\tdelete[] _start;\n\t\t}\n\n\t\t_start = tmp;\n\t\t_finish = _start + sz; // _finish = _start + size();   size（）有问题\n\t\t_end_of_storage = _start + n;\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-am6goh4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-am6goh4",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "sz的大小一定要事先记录好， 不然等到释放了"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "_start"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 时，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "size()"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 就是不是原来的值，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "_finish"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 也会因此出问题。"
				}
			]
		},
		{
			"ID": "20220722100646-83fmjv0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722100646-83fmjv0",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "resize()"
				}
			]
		},
		{
			"ID": "20220722100646-1e0o6lr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-1e0o6lr",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void resize(size_t n , const T\u0026 val = T()) // T() 是 匿名对象。\n{\n\tif (n \u003c size())\n\t{\n\t\t_finish = _start + n;\n\t}\n\telse\n\t{\n\t\tif (n \u003e capacity())\n\t\t{\n\t\t\treserve(n); //复用reserve\n\t\t}\n\n\t\twhile (_finish != _start + n)//reserve之后，将_finish及其之后的空间设置为 val；\n\t\t{\n\t\t\t*_finish = val;\n\t\t\t++_finish;\n\t\t}\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-jwg9rwr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722100646-jwg9rwr",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "insert()"
				}
			]
		},
		{
			"ID": "20220722100646-hnfjpr2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-hnfjpr2",
				"updated": "20220722101103"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "涉及到"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722100407-a6y1vn0"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "迭代器失效"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的问题。"
				}
			]
		},
		{
			"ID": "20220722100646-ikkcm4g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-ikkcm4g",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "iterator insert(iterator pos, const T\u0026 x)\n{\n\tassert(pos \u003e= _start);\n\tassert(pos \u003c= _finish);\n\n\tif (_finish == _end_of_storage) \n\t{\n\t\tint len = pos - _start; //扩容后迭代器可以会失效，需要要先保存pos到_start之间的长度。\n\t\treserve(capacity() == 0 ? 4 : capacity() * 2);\n\t\tpos = _start + len;//恢复迭代器的位置\n\t}\n\n\titerator end = _finish - 1;\n\twhile (end \u003e= pos)\n\t{\n\t\t*(end + 1) = *end;\n\t\tend--;\n\t}\n\t*pos = x;\n\t_finish++;\n\n\treturn pos;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-n0a2n53",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722100646-n0a2n53",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "erase()"
				}
			]
		},
		{
			"ID": "20220722100646-t2jrdtt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-t2jrdtt",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "iterator erase(iterator pos)\n{\n\tassert(pos \u003e= _start);\n\tassert(pos \u003c _finish);\n\n\titerator begin = pos + 1;\n\twhile (begin \u003c _finish)\n\t{\n\t\t*(begin - 1) = *begin;\n\t\tbegin++;\n\t}\n\n\t_finish--;\n\n\treturn pos;\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-ou0llyq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722100646-ou0llyq",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用erase()的注意事项"
				}
			]
		},
		{
			"ID": "20220722100646-juu30sg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-juu30sg",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当要删除vector中所有偶数时容易出现的逻辑错误。"
				}
			]
		},
		{
			"ID": "20220829131935-gmnqkvw",
			"Type": "NodeSuperBlock",
			"Properties": {
				"id": "20220829131935-gmnqkvw",
				"updated": "20220829131935"
			},
			"Children": [
				{
					"Type": "NodeSuperBlockOpenMarker"
				},
				{
					"Type": "NodeSuperBlockLayoutMarker",
					"Data": "row"
				},
				{
					"ID": "20220722100646-43799zr",
					"Type": "NodeCodeBlock",
					"IsFencedCodeBlock": true,
					"Properties": {
						"id": "20220722100646-43799zr",
						"updated": "20220829131935"
					},
					"Children": [
						{
							"Type": "NodeCodeBlockFenceOpenMarker",
							"Data": "```"
						},
						{
							"Type": "NodeCodeBlockFenceInfoMarker",
							"CodeBlockInfo": "Y3Bw"
						},
						{
							"Type": "NodeCodeBlockCode",
							"Data": "int main()\n{\n\tvector\u003cint\u003e v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(4);\n\tv.push_back(5);\n\tv.push_back(6);\n\n\t//删除v中所有的偶数\n\tvector\u003cint\u003e::iterator ret = v.begin();\n\twhile (ret != v.end())\n\t{\n\t\tif (*ret % 2 == 0)\n\t\t{\n\t\t\tv.erase(ret);\n\t\t}\n\t\tret++; //此处有逻辑错误\n\t}\n\n\tv.print();\n\treturn 0;\n}\n"
						},
						{
							"Type": "NodeCodeBlockFenceCloseMarker",
							"Data": "```"
						}
					]
				},
				{
					"ID": "20220722100646-3indeky",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722100646-3indeky",
						"updated": "20220829131935"
					},
					"Children": [
						{
							"Type": "NodeImage",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeBang"
								},
								{
									"Type": "NodeOpenBracket"
								},
								{
									"Type": "NodeLinkText",
									"Data": "assets/"
								},
								{
									"Type": "NodeCloseBracket"
								},
								{
									"Type": "NodeOpenParen"
								},
								{
									"Type": "NodeLinkDest",
									"Data": "assets/020220522172624.png"
								},
								{
									"Type": "NodeCloseParen"
								}
							]
						}
					]
				},
				{
					"ID": "20220722100646-g9g2biv",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722100646-g9g2biv",
						"updated": "20220829131935"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "此处是有问题的，因为ret其实走了两步，当erase执行完后，会返回新pos节点的数据，就不需要 ret++ 了。所以需要加一个else判断。"
						}
					]
				},
				{
					"ID": "20220722100646-cn1lsg7",
					"Type": "NodeCodeBlock",
					"IsFencedCodeBlock": true,
					"Properties": {
						"id": "20220722100646-cn1lsg7",
						"updated": "20220829131935"
					},
					"Children": [
						{
							"Type": "NodeCodeBlockFenceOpenMarker",
							"Data": "```"
						},
						{
							"Type": "NodeCodeBlockFenceInfoMarker",
							"CodeBlockInfo": "Y3Bw"
						},
						{
							"Type": "NodeCodeBlockCode",
							"Data": "int main()\n{\n\tvector\u003cint\u003e v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(4);\n\tv.push_back(5);\n\tv.push_back(6);\n\n\t//删除v中所有的偶数\n\tvector\u003cint\u003e::iterator ret = v.begin();\n\twhile (ret != v.end())\n\t{\n\t\tif (*ret % 2 == 0)\n\t\t{\n\t\t\tv.erase(ret);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret++; //此处有逻辑错误\n\t\t}\n\t}\n\n\tv.print();\n\treturn 0;\n}\n"
						},
						{
							"Type": "NodeCodeBlockFenceCloseMarker",
							"Data": "```"
						}
					]
				},
				{
					"Type": "NodeSuperBlockCloseMarker"
				}
			]
		},
		{
			"ID": "20220722100646-bo4pgwr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-bo4pgwr",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时就是正确的了。"
				}
			]
		},
		{
			"ID": "20220722101152-8r84hyo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101152-8r84hyo"
			}
		},
		{
			"ID": "20220722100646-yzdu52x",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722100646-yzdu52x",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "vector的反向迭代器"
				}
			]
		},
		{
			"ID": "20220722101340-glx95y4",
			"Type": "NodeBlockQueryEmbed",
			"Properties": {
				"id": "20220722101340-glx95y4",
				"updated": "20220722101340"
			},
			"Children": [
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeBlockQueryEmbedScript",
					"Data": "select * from blocks where id='20220722100407-graa4dd'"
				},
				{
					"Type": "NodeCloseBrace"
				},
				{
					"Type": "NodeCloseBrace"
				}
			]
		},
		{
			"ID": "20220722101401-ggt6vze",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101401-ggt6vze"
			}
		},
		{
			"ID": "20220722100646-69ok8pa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-69ok8pa",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在vector文件中添加"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "revser_iterator"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "和 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "const_reverse_iterator"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的定义"
				}
			]
		},
		{
			"ID": "20220722101402-8gngq6n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101402-8gngq6n"
			}
		},
		{
			"ID": "20220722100646-yskfvnn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-yskfvnn",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "namespace fmy\n{\n\ttemplate\u003cclass T\u003e\n\tclass vector\n\t{\n\tpublic:\n\t\ttypedef T* iterator;\n\t\ttypedef const T* const_iterator;\n\n\t\ttypedef reverse_iterator\u003cconst_iterator, const T\u0026, const T*\u003e const_reverse_iterator;\n\t\ttypedef reverse_iterator\u003citerator, T\u0026, T*\u003e reverse_iterator;\n\n\t\n\t\treverse_iterator rbegin()\n\t\t{\n\t\t\treturn reverse_iterator(end());\n\t\t}\n\n\t\treverse_iterator rend()\n\t\t{\n\t\t\treturn reverse_iterator(begin());\n\t\t}\n\t\n\t\titerator begin()\n\t\t{\n\t\t\treturn _start;\n\t\t}\n\n\t\titerator end()\n\t\t{\n\t\t\treturn _finish;\n\t\t}\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-8xcmyn2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-8xcmyn2",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "reverse_iterator 的使用"
				}
			]
		},
		{
			"ID": "20220722100646-ltojwnh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722100646-ltojwnh",
				"updated": "20220722100646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void test5()\n{\n\tvector\u003cint\u003e v1;\n\tv1.push_back(1);\n\tv1.push_back(2);\n\tv1.push_back(3);\n\tv1.push_back(4);\n\tv1.push_back(5);\n\n\tvector\u003cint\u003e::reverse_iterator it = v1.rbegin();\n\twhile (it != v1.rend())\n\t{\n\t\tcout \u003c\u003c *it \u003c\u003c \" \";\n\t\t++it;\n\t}\n\tcout \u003c\u003c endl;\n\n}\n\nint main()\n{\n\ttest5();\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722100646-thu6i8m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722100646-thu6i8m",
				"updated": "20220722133505"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220528152522.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722133507-0wnvu8x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722133507-0wnvu8x"
			}
		},
		{
			"ID": "20221012224056-dkn63hy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221012224056-dkn63hy",
				"updated": "20221012224056"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用initializer_list来构造vector"
				}
			]
		},
		{
			"ID": "20221012224056-c1ly8nt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221012224056-c1ly8nt",
				"updated": "20221012224056"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用[[列表初始化#initializer_list|initializer_list]]来构造vector"
				}
			]
		},
		{
			"ID": "20221012224056-zox9ixt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221012224056-zox9ixt",
				"updated": "20221012224056"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "vector(initializer_list\u003cT\u003e itl)\n\t:_start(nullptr)\n\t, _finish(nullptr)\n\t, _end_of_storage(nullptr)\n{\n\tvector\u003cT\u003e tmp;\n\tfor (auto e : itl)\n\t{\n\t\ttmp.push_back(e);\n\t}\n\tswap(tmp);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}