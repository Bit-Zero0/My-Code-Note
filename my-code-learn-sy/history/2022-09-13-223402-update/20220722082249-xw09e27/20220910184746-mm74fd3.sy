{
	"ID": "20220910184746-mm74fd3",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220910184746-mm74fd3",
		"title": " Linux信号",
		"updated": "20220913223337"
	},
	"Children": [
		{
			"ID": "20220913083713-ilrnt1d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083713-ilrnt1d",
				"updated": "20220913083722"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " 信号和"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220910160318-8azaq0g"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "信号量"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 没有关系，就像老婆和老婆饼"
				}
			]
		},
		{
			"ID": "20220913083713-jahugk2",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913083713-jahugk2",
				"updated": "20220913083713"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生活中的信号"
				}
			]
		},
		{
			"ID": "20220913083713-dscmezm",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220913083713-dscmezm",
				"updated": "20220913083713"
			},
			"Children": [
				{
					"ID": "20220913083713-in2xeka",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913083713-in2xeka",
						"updated": "20220913083713"
					},
					"Children": [
						{
							"ID": "20220913083713-m811q3n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083713-m811q3n",
								"updated": "20220913083713"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "你在网上买了很多件商品，再等待不同商品快递的到来。但即便快递没有到来，你也知道快递来临时， 你该怎么处理快递。也就是你能“识别快递”"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083713-u1pyi3g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913083713-u1pyi3g",
						"updated": "20220913083713"
					},
					"Children": [
						{
							"ID": "20220913083713-9vh3802",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083713-9vh3802",
								"updated": "20220913083713"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当快递员到了你楼下，你也收到快递到来的通知，但是你正在打游戏，需5min之后才能去取快递。那 么在在这5min之内，你并没有下去去取快递，但是你是知道有快递到来了。也就是取快递的行为并不 是一定要立即执行，可以理解成“在合适的时候去取”。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083713-lke4ysd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913083713-lke4ysd",
						"updated": "20220913083713"
					},
					"Children": [
						{
							"ID": "20220913083713-6xsofjf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083713-6xsofjf",
								"updated": "20220913083713"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在收到通知，再到你拿到快递期间，是有一个时间窗口的，在这段时间，你并没有拿到快递，但是你知道有一个快递已经来了。本质上是你“记住了有一个快递要去取”"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083713-mswq9by",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913083713-mswq9by",
						"updated": "20220913083713"
					},
					"Children": [
						{
							"ID": "20220913083713-8w6hx0j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083713-8w6hx0j",
								"updated": "20220913083713"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当你时间合适，顺利拿到快递之后，就要开始处理快递了。而处理快递一般方式有三种：1. 执行默认动作（幸福的打开快递，使用商品）2. 执行自定义动作（快递是零食，你要送给你你的女朋友）3. 忽略快递（快递拿上来之后，扔掉床头，继续开一把游戏）"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083713-dl0zjb4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913083713-dl0zjb4",
						"updated": "20220913083713"
					},
					"Children": [
						{
							"ID": "20220913083713-omqhh8x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083713-omqhh8x",
								"updated": "20220913083713"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "快递到来的整个过程，对你来讲是异步的，你不能准确断定快递员什么时候给你打电话"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913083713-0gu9ipi",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913083713-0gu9ipi",
				"updated": "20220913083713"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "技术角度的信号"
				}
			]
		},
		{
			"ID": "20220913083713-mcptlwc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083713-mcptlwc",
				"updated": "20220913083713"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号产生 --\u003e 信号是给进程发的 --\u003e 进程要在合适的时候要执行对应的动作"
				}
			]
		},
		{
			"ID": "20220913083713-i1n4zxq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083713-i1n4zxq",
				"updated": "20220913083713"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "进程在没有收到信号时，进程是知道如何识别是哪一个信号的，因为工程师们在写进程源代码的时候就设置好了。"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "进程具有识别信号并处理信号的能力远远早于信号的产生的!"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220910184759-lhfnb51",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220910184759-lhfnb51",
				"updated": "20220910184800"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "max-width: 945px;",
						"style": "width: 935px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20220910184800-2tyfxiw.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 935px;\" parent-style=\"max-width: 945px;\"}"
				}
			]
		},
		{
			"ID": "20220913083814-cipukt0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083814-cipukt0",
				"updated": "20220913083814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "既然进程收到进程时，不是立即处理的，那么这个信号保持在了那里？在 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "struct task_struct"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20220913083814-cjdzv1b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083814-cjdzv1b",
				"updated": "20220913083814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "task_struct 是一个内核数据结构，定义进程对象。"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "内核不相信任何人，只相信自己"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。那是谁向task_struct 内写入信号数据呢？ "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "OS!!!!"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220913083814-6z2f6oi",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913083814-6z2f6oi",
				"updated": "20220913083814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号概念"
				}
			]
		},
		{
			"ID": "20220913083814-9wgkfie",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083814-9wgkfie",
				"updated": "20220913083814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号是进程之间事件异步通知的一种方式，属于软中断"
				}
			]
		},
		{
			"ID": "20220913083814-64zyh2b",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913083814-64zyh2b",
				"updated": "20220913083814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "kill -l"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "命令可以察看系统定义的信号列表"
				}
			]
		},
		{
			"ID": "20220910185920-q7ddhuo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220910185920-q7ddhuo",
				"updated": "20220910185921"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20220910185921-f3ub9vk.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913083829-lit903w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083829-lit903w",
				"updated": "20220913083829"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1号到31号的信号是 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "普通信号"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，34号及以后的信号是 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "实时信号"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。而我们只学习普通信号，不学习实时信号。\n而我们在程序运行时使用的 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "ctrl+c"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ，其实就是2号信号 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "SIGINT"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ."
				}
			]
		},
		{
			"ID": "20220913083834-r8rrw9s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083834-r8rrw9s"
			}
		},
		{
			"ID": "20220913083829-5i82vf5",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913083829-5i82vf5",
				"updated": "20220913083829"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号捕捉函数 signal()"
				}
			]
		},
		{
			"ID": "20220911191119-s7fxpih",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220911191119-s7fxpih",
				"updated": "20220911191119"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20220911191119-1537oug.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913083845-nv00pgx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083845-nv00pgx",
				"updated": "20220913083845"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以将捕捉信号 ， 并修改信号的处理方式。\n第一个参数 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "signum"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 表示我们要捕捉的信号，\n第二个参数 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "handler"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 则是一个函数指针，指向了我们修改信号处理方式的函数地址。"
				}
			]
		},
		{
			"ID": "20220913083851-wtl500n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083851-wtl500n"
			}
		},
		{
			"ID": "20220913083845-9o1cbbq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083845-9o1cbbq",
				"updated": "20220913083845"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "注意：9号信号是无法被捕捉(自定义)的."
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220911194959-y8d3ne2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220911194959-y8d3ne2",
				"updated": "20220911195000"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20220911195000-isoadbc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913083904-seaafiv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913083904-seaafiv",
				"updated": "20220913083904"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n\n\nvoid handler(int signo)//当捕捉到信号后，才会调用\n{\n    printf(\"get a signal: signal no : %d ,pid %d \\n\" , signo , getpid());\n}\n\n\nint main(){\n    signal(2 , handler); //捕捉2号信号 ，也就SIGINT ， ctrl+c\n\n    int count = 0;\n    while(1){\n        printf(\"count = %d\\n\" , count);\n        sleep(1);\n    }\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913083904-3hmsawf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083904-3hmsawf",
				"updated": "20220913083929"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们修改了2号信号默认的处理方式后，ctrl+c快捷键的功能也相应改变了。"
				}
			]
		},
		{
			"ID": "20220913083920-y4sql2t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083920-y4sql2t",
				"updated": "20220913083921"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20220913083921-u01ip2m.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913083948-on1wwgo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083948-on1wwgo"
			}
		},
		{
			"ID": "20220913083946-9htkzid",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913083946-9htkzid",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号处理的常见方式"
				}
			]
		},
		{
			"ID": "20220913083946-mrqbdwc",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220913083946-mrqbdwc",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"ID": "20220913083946-0st7uog",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220913083946-0st7uog",
						"updated": "20220913083946"
					},
					"Children": [
						{
							"ID": "20220913083946-9qmi3fe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-9qmi3fe",
								"updated": "20220913083946"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "忽略"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "此信号。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083946-ezcjwas",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220913083946-ezcjwas",
						"updated": "20220913083946"
					},
					"Children": [
						{
							"ID": "20220913083946-7bnemxz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-7bnemxz",
								"updated": "20220913083946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "执行该信号的"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "默认处理动作"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083946-89ndfml",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220913083946-89ndfml",
						"updated": "20220913083946"
					},
					"Children": [
						{
							"ID": "20220913083946-1w5o6zs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-1w5o6zs",
								"updated": "20220913083946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "(信号的捕捉）"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "自定义动作"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "--我们刚刚用signal方法，就是在修改信号的处理动作由:默认-\u003e自定义动作"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913083946-ptv0f7v",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913083946-ptv0f7v",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "产生信号"
				}
			]
		},
		{
			"ID": "20220913083946-c3ykam5",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220913083946-c3ykam5",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"ID": "20220913083946-2fsnfut",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220913083946-2fsnfut",
						"updated": "20220913083946"
					},
					"Children": [
						{
							"ID": "20220913083946-o55by9h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-o55by9h",
								"updated": "20220913083946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "键盘产生，如我们的 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "ctrl+c"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "  ， "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "ctrl+/"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 等；"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083946-mf2kyq7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220913083946-mf2kyq7",
						"updated": "20220913083946"
					},
					"Children": [
						{
							"ID": "20220913083946-9f1wt72",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-9f1wt72",
								"updated": "20220913083946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "进程异常，也能产生信号"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083946-e74oy23",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220913083946-e74oy23",
						"updated": "20220913083946"
					},
					"Children": [
						{
							"ID": "20220913083946-i53jzoz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-i53jzoz",
								"updated": "20220913083946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过系统调用，产生信号"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083946-tbx7re9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220913083946-tbx7re9",
						"updated": "20220913083946"
					},
					"Children": [
						{
							"ID": "20220913083946-4rn51de",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-4rn51de",
								"updated": "20220913083946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "软件条件,也能产生信号"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913083946-c91t2n8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913083946-c91t2n8",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.键盘产生的信号"
				}
			]
		},
		{
			"ID": "20220913083946-3x2td61",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083946-3x2td61",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "键盘产生的信号： ctrl+c , ctrl+/"
				}
			]
		},
		{
			"ID": "20220913083946-7o37fxu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083946-7o37fxu",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对所有信号信息捕捉，但是我们的handler函数中，只是针对个别几个继续处理。"
				}
			]
		},
		{
			"ID": "20220913083946-vt7i2q1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913083946-vt7i2q1",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cstdlib.h\u003e\n\n\nvoid handler(int signo)\n{\n    switch(signo)\n    {\n        case 2:\n             printf(\"hello fmy ... get a signal no : %d\" , signo );\n            break;\n\n        case 3:\n             printf(\"hello world ... get a signal no : %d\" , signo );\n            break;\n\n       // case 11:\n       //      printf(\"hello word... get a signal no : %d\" , signo );\n       //     break;\n\n    }\n    exit(0);\n}\n\n\nint main(){\n\n    int sig = 1;\n    for(; sig \u003c= 31 ; sig++ )\n    {\n        signal(sig , handler);\n    }\n\n\n\n    while(1)\n    {\n        int* p = (int*)100;\n        *p = 100;\n        printf(\"hello\");\n        sleep(1);\n    }\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084000-w8hfgal",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084000-w8hfgal"
			}
		},
		{
			"ID": "20220913083946-yupwfbu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913083946-yupwfbu",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.程序中存在异常问题，导致我们收到信号退出"
				}
			]
		},
		{
			"ID": "20220913083946-if88ouk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913083946-if88ouk",
				"updated": "20220913083946"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "硬件异常被硬件以某种方式被硬件检测到并通知内核,然后内核向当前进程发送适当的信号。例如当前进程执行了除以0的指令,CPU的运算单元会产生异常,内核将这个异常解释 为SIGFPE信号发送给进程。再比如当前进程访问了非法内存地址,,MMU会产生异常,内核将这个异常解释为SIGSEGV信号发送给进程。"
				}
			]
		},
		{
			"ID": "20220913083946-n93asee",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220913083946-n93asee",
				"updated": "20220913084044"
			},
			"Children": [
				{
					"ID": "20220913083946-ngribyn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913083946-ngribyn",
						"updated": "20220913083946"
					},
					"Children": [
						{
							"ID": "20220913083946-xz4u1sv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-xz4u1sv",
								"updated": "20220913083946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在Linux中，当一个进程退出的时候，它的退出码和退出信号都会被设置(正常情况)。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083946-uedphoi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913083946-uedphoi",
						"updated": "20220913083946"
					},
					"Children": [
						{
							"ID": "20220913083946-gju9iob",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-gju9iob",
								"updated": "20220913083946"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当一个进程异常的时候，进程的退出信号会被设置，表明当前进程退出的原因。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913083946-mu1p6tl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913083946-mu1p6tl",
						"updated": "20220913084044"
					},
					"Children": [
						{
							"ID": "20220913083946-rudja5l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913083946-rudja5l",
								"updated": "20220913084044"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果必要，OS会设置退出信息中的"
								},
								{
									"Type": "NodeBlockRef",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeBlockRefID",
											"Data": "20220722143034-xz7vedt"
										},
										{
											"Type": "NodeBlockRefSpace"
										},
										{
											"Type": "NodeBlockRefText",
											"Data": "core dump"
										},
										{
											"Type": "NodeCloseParen"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "标志位，并将进程在内存中的数据转储到磁盘当中，方便我们后期调试。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913084051-qe1medt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084051-qe1medt",
				"updated": "20220913084114"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20220913084114-o664ife.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084152-oaiqftp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084152-oaiqftp"
			}
		},
		{
			"ID": "20220913084126-2asf86x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084126-2asf86x",
				"updated": "20220913084146"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "如下8号信号 "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "SIGFPE"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "  和 11号信号 "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "SIGSEGV"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 就属于硬件异常产生的信号。"
				}
			]
		},
		{
			"ID": "20220913084206-l91c4o3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084206-l91c4o3",
				"updated": "20220913084207"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20220913084207-bu1hjdy.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084234-6v0qc07",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084234-6v0qc07"
			}
		},
		{
			"ID": "20220913084235-w7veada",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084235-w7veada",
				"updated": "20220913084235"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "捕捉信号"
				}
			]
		},
		{
			"ID": "20220913084235-z7ewgje",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084235-z7ewgje",
				"updated": "20220913084235"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cstdlib.h\u003e\n\nvoid handler(int signo)\n{\n    printf(\"get a sig no: %d\\n\" , signo);\n    exit(0);\n}\n\nint main(){\n\n    signal(SIGSEGV , handler);\n\n    int *p = NULL;\n    p = (int*)100;\n    *p = 100;\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-xkawb8b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-xkawb8b",
				"updated": "20220913084428"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912091950"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912091950-20220913084428-y6ha5wo.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084431-v2qrkmc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084431-v2qrkmc"
			}
		},
		{
			"ID": "20220913084333-abjadml",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-abjadml",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "core dump的使用"
				}
			]
		},
		{
			"ID": "20220913084333-vo100wk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-vo100wk",
				"updated": "20220913084533"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "云服务器上的 core dump 一般是被关闭的，需要我们开启\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911205704"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911205704-20220913084532-d80aq3s.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-3tiu8iq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-3tiu8iq",
				"updated": "20220913084608"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "开始时需要我们定义此文件的大小，使用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "ulimit -c 10240"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 指令。 我这里定义为 10240byte , 表示开启core dump。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911212049"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911212049-20220913084608-hf1zoky.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084618-xab87q3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084618-xab87q3"
			}
		},
		{
			"ID": "20220913084333-squ9sww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-squ9sww",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "开启core dump前"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084333-a1a1kr0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-a1a1kr0",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main(){\n    while(1)\n    {\n        printf(\"hello, pid:%d\\n\" ,getpid() );\n        fflush(stdout);\n        sleep(1);\n    }\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-coqkjvi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-coqkjvi",
				"updated": "20220913084656"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时这个程序时和死循环。我们对此进程使用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "kill -11"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 后\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911212353"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911212353-20220913084640-0d6j0tu.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n运行结果上就会报出 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Segmentation fault"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "  段错误。也就是11 号信号。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911211745"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911211745-20220913084655-lag4wsv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-vw8msf5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-vw8msf5",
				"updated": "20220913084732"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "开启core dump后"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ，运行一样的代码发现  "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "Segmentation fault"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 后多了一句 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "core dumped"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n，此时我们就可以使用"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722140818-rhpe03n"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "gdb调试"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "出产生信号的代码行了\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911212650"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911212650-20220913084715-vyfut37.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-ezy7kdi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-ezy7kdi",
				"updated": "20220913084748"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在使用 "
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722135728-ycmemjs"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "ls"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 时，可以发现出现了一个 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "core.4323"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的文件4323其实就是我们的进程ID。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911212911"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911212911-20220913084722-kwou2u0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-5h48g27",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-5h48g27",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先看以下代码,以下代码会产生8号信号"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "SIGFPE"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20220913084333-2aojzzt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-2aojzzt",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main(){\n    while(1)\n    {\n        int a = 10 ;\n        a /= 0;\n        printf(\"hello, pid:%d\\n\" ,getpid() );\n        sleep(1);\n    }\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-1bzzavj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-1bzzavj",
				"updated": "20220913084820"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们开启core dump后就可以对其进行"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722140818-rhpe03n"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "gdb调试"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "了\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911213658"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911213658-20220913084820-zl6jy5r.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-2d4zhsb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-2d4zhsb",
				"updated": "20220913084828"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911214448"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911214448-20220913084828-1l0vgqt.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084900-ea2oqiv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084900-ea2oqiv"
			}
		},
		{
			"ID": "20220913084333-b8c7t5z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913084333-b8c7t5z",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.系统调用产生的信号"
				}
			]
		},
		{
			"ID": "20220913084333-nmzphoq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-nmzphoq",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "还可以使用 系统调用 kill() ,  raise() , abort() 来产生信号"
				}
			]
		},
		{
			"ID": "20220913084858-gyh16i7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084858-gyh16i7"
			}
		},
		{
			"ID": "20220913084333-99qrwqr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-99qrwqr",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kill()"
				}
			]
		},
		{
			"ID": "20220913084333-nff885y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-nff885y",
				"updated": "20220913084853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "kill可以给指定的进程发送信号。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911230221"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911230221-20220913084853-qalvtve.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-gnt13jr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-gnt13jr",
				"updated": "20220913084916"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其实可以配合"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722144823-577g5sa"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "Linux 进程参数"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来进行使用"
				}
			]
		},
		{
			"ID": "20220913084333-h1am1d2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-h1am1d2",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "static void Usage(const char* proc)//使用手册\n{\n    printf(\"Usage:\\n\\t %s signo who\\n\" , proc);\n}\n\nint main(int argc , char* argv[]){\n\n    if(argc != 3)//因为主要由三个参数，等于3时，这打开手册\n    {\n        Usage(argv[0]);\n        return 1;\n    }\n\n\n    int signo = atoi(argv[1]);//因为argv中是字符或字符串，所以需要强转\n    int who = atoi(argv[2]);\n\n    kill(who ,signo);\n\n    printf(\"signo: %d , who: %d \\n\" ,signo ,who);\n\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-5e6maz7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-5e6maz7",
				"updated": "20220913085004"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911230136"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911230136-20220913085004-mn6upc5.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913085013-tmwa0bd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085013-tmwa0bd"
			}
		},
		{
			"ID": "20220913084333-xj27r0m",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-xj27r0m",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "raise()"
				}
			]
		},
		{
			"ID": "20220913084333-6hk8kfd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-6hk8kfd",
				"updated": "20220913084934"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "raise只能给自己发送信号；\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911230717"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911230717-20220913084934-uuw2w6a.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-5hivjla",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-5hivjla",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cstdlib.h\u003e\n\n\nvoid handler(int signo)\n{\n    switch(signo)\n    {\n        case 2:\n             printf(\"hello fmy ... get a signal no : %d\" , signo );\n            break;\n\n        case 3:\n             printf(\"hello world ... get a signal no : %d\" , signo );\n            break;\n          \n        default:\n            printf(\"get a signal no : %d \\n\" ,signo );\n    }\n    exit(0);\n}\n\nstatic void Usage(const char* proc)\n{\n    printf(\"Usage:\\n\\t %s signo who\\n\" , proc);\n}\n\nint main(){\n\n    int sig = 1;\n    for(; sig \u003c= 31 ; sig++ )\n    {\n        signal(sig , handler);\n    }\n\n\n    raise(8);//向自己发送8号信号\n    printf(\"hello\\n\" );\n\n    sleep(5);\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-9rfv3vd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-9rfv3vd",
				"updated": "20220913085046"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911231456"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911231456-20220913085046-jnxucpv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913085050-qzp7k5h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085050-qzp7k5h"
			}
		},
		{
			"ID": "20220913084333-uutnow3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-uutnow3",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "abort()"
				}
			]
		},
		{
			"ID": "20220913084333-0qkxais",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-0qkxais",
				"updated": "20220913085102"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "向自己进程发送6号"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "SIGABRT"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "信号\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911231923"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911231923-20220913085102-lrt3y94.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-aj3cpeg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-aj3cpeg",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cstdlib.h\u003e\n\n\nvoid handler(int signo)\n{\n    switch(signo)\n    {\n        case 2:\n             printf(\"hello fmy ... get a signal no : %d\" , signo );\n            break;\n\n        case 3:\n             printf(\"hello world ... get a signal no : %d\" , signo );\n            break;\n          \n        default:\n            printf(\"get a signal no : %d \\n\" ,signo );\n    }\n    exit(0);\n}\n\n\nstatic void Usage(const char* proc)\n{\n    printf(\"Usage:\\n\\t %s signo who\\n\" , proc);\n}\n\nint main(){\n\n    int sig = 1;\n    for(; sig \u003c= 31 ; sig++ )\n    {\n        signal(sig , handler);\n    }\n\n    abort(); //向自己进程发送6号信号\n    printf(\"hello\\n\" );\n\n    sleep(5);\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-pui3489",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-pui3489",
				"updated": "20220913085136"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220911231907"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220911231907-20220913085136-mrg8wci.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913085139-adzcw95",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085139-adzcw95"
			}
		},
		{
			"ID": "20220913084333-2g75yki",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913084333-2g75yki",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4.由软件条件产生的信号"
				}
			]
		},
		{
			"ID": "20220913084333-r2788pd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-r2788pd",
				"updated": "20220913085149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "系统调用产生的信号就如 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "进程间通信:当读端不光不读，而且还关闭了读fd，写端一直在写，最终写进程会受到sigpipe （13)，就是一种典型的软件条件触发的信号发送"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220913085151-om7hdo7",
			"Type": "NodeBlockQueryEmbed",
			"Properties": {
				"id": "20220913085151-om7hdo7",
				"updated": "20220913085208"
			},
			"Children": [
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeBlockQueryEmbedScript",
					"Data": "select * from blocks where id='20220905114815-d09ee4f'"
				},
				{
					"Type": "NodeCloseBrace"
				},
				{
					"Type": "NodeCloseBrace"
				}
			]
		},
		{
			"ID": "20220913084333-oz8faa9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-oz8faa9",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "alarm()"
				}
			]
		},
		{
			"ID": "20220913084333-873mgaj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-873mgaj",
				"updated": "20220913085229"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个函数的返回值是0或者是以前设定的闹钟时间还余下的秒数。函数的返回值仍然是以前设定的闹钟时间还余下的秒数。发送的信号是 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "14号 SIGALRM"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 信号。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912084056"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912084056-20220913085229-q0yu0yq.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-cpfekr3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-cpfekr3",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n#include \u003csys/types.h\u003e\n\nint main(){\n\n    int sig = 0;\n    for(;sig \u003c=31 ; sig++){\n        signal(sig , handler);\n    }\n\n    int count = 10;\n    alarm(5);\n    while(1)\n    {\n        printf(\"hello world\\n\");\n        count--;\n        sleep(1);\n    }\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-8w4pqan",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-8w4pqan",
				"updated": "20220913085241"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912084039"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912084039-20220913085241-3hdg1w2.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913085243-i86cl1f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085243-i86cl1f"
			}
		},
		{
			"ID": "20220913084333-zhy2v0k",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220913084333-zhy2v0k",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "取消alarm()"
				}
			]
		},
		{
			"ID": "20220913084333-debi9of",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-debi9of",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将设好的"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "alarm()"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "置零，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "alarm(0)"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 则取消闹钟。"
				}
			]
		},
		{
			"ID": "20220913084333-5wzx3yd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-5wzx3yd",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003cstdlib.h\u003e\n\nvoid handler(int signo)\n{\n    switch(signo)\n    {\n        case 2:\n             printf(\"hello fmy ... get a signal no : %d\" , signo );\n            break;\n\n        case 3:\n             printf(\"hello world ... get a signal no : %d\" , signo );\n            break;\n\n        default:\n            printf(\"get a signal no : %d \\n\" ,signo );\n    }\n    exit(0);\n}\n\nint main(){\n     int sig = 1;\n     for(; sig \u003c= 31 ; sig++){\n        signal(sig , handler);\n     }\n\n    int ret = alarm(30); //定时一个30秒的闹钟\n\n    while(1){\n        printf(\"I am process : ret:%d\\n\" , ret);\n        sleep(5);\n        int res = alarm(0);//取消闹钟 ，获取返回值\n        printf(\"res: %d \\n\" , res);\n    }\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-munqzug",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-munqzug",
				"updated": "20220913085301"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912090408"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912090408-20220913085301-782rtrv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084333-00e151l",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913084333-00e151l",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号发送中"
				}
			]
		},
		{
			"ID": "20220913084333-v3uwfxt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913084333-v3uwfxt",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号其他相关常见概念"
				}
			]
		},
		{
			"ID": "20220913084333-bmihvbu",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220913084333-bmihvbu",
				"updated": "20220913085357"
			},
			"Children": [
				{
					"ID": "20220913084333-l9u04hv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-l9u04hv",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-2379q8c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-2379q8c",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "实际执行信号的处理动作称为信号递达"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "(Delivery)"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-ndu0ybe",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-ndu0ybe",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-yhw29im",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-yhw29im",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "信号从产生到递达之间的状态,称为信号未决"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "(Pending)。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-blxnvvc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-blxnvvc",
						"updated": "20220913085357"
					},
					"Children": [
						{
							"ID": "20220913084333-5quwf2u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-5quwf2u",
								"updated": "20220913085357"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "进程可以选择"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "阻塞 (Block )"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "某个信号。"
								}
							]
						},
						{
							"ID": "20220913084333-dko7eaw",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20220913084333-dko7eaw",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"ID": "20220913084333-f6c902q",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220913084333-f6c902q",
										"updated": "20220913084333"
									},
									"Children": [
										{
											"ID": "20220913084333-80dhk70",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220913084333-80dhk70",
												"updated": "20220913084333"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "被阻塞的信号产生时将保持在未决状态,直到进程解除对此信号的阻塞,才执行递达的动作."
												}
											]
										}
									]
								},
								{
									"ID": "20220913084333-hk4y3de",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20220913084333-hk4y3de",
										"updated": "20220913084333"
									},
									"Children": [
										{
											"ID": "20220913084333-zbafayz",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20220913084333-zbafayz",
												"updated": "20220913084333"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "注意,阻塞和忽略是不同的,只要信号被阻塞就不会递达,而忽略是在递达之后可选的一种处理动作"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913084333-e28hz38",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-e28hz38",
				"updated": "20220913085338"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912092732"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912092732-20220913085338-dwp5due.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913085341-0aycxdc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085341-0aycxdc"
			}
		},
		{
			"ID": "20220913084333-0uvk6xt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913084333-0uvk6xt",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在内核中的标识"
				}
			]
		},
		{
			"ID": "20220913084333-lq38lvt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-lq38lvt",
				"updated": "20220913085350"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912093157"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912093157-20220913085350-im60c0n.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n这张表需要的数组是一一相应的。"
				}
			]
		},
		{
			"ID": "20220913084333-4xtawfq",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220913084333-4xtawfq",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"ID": "20220913084333-3uzcsop",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-3uzcsop",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-g604pzc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-g604pzc",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每个信号都有两个标志位分别表示阻塞(block)和未决(pending),还有一个函数指针表示处理动作。信号产生时,内核在进程控制块中设置该信号的未决标志,直到信号递达才清除该标志。在上图的例子 中,SIGHUP信号未阻塞也未产生过,当它递达时执行默认处理动作。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-0lniqo1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-0lniqo1",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-rztiku6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-rztiku6",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SIGINT信号产生过,但正在被阻塞,所以暂时不能递达。虽然它的处理动作是忽略,但在没有解除阻塞之前不能忽略这个信号,因为进程仍有机会改变处理动作之后再解除阻塞。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-w7iig06",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-w7iig06",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-l8sqb0l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-l8sqb0l",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SIGQUIT信号未产生过,一旦产生SIGQUIT信号也将被阻塞,无法递达,它的处理动作是用户自定义函数sighandler。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913085443-lukwafh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085443-lukwafh"
			}
		},
		{
			"ID": "20220913084333-jclbrgx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-jclbrgx",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pending"
				}
			]
		},
		{
			"ID": "20220913084333-oocvg4s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-oocvg4s",
				"updated": "20220913085431"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912093748"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912093748-20220913085424-sifrbxj.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\npending 本质上就是一个"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "位图"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "  "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "uint32_t sigs"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912094011"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912094011-20220913085431-xlenjz6.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913085440-ovntnaw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085440-ovntnaw"
			}
		},
		{
			"ID": "20220913084333-aknztao",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-aknztao",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "block"
				}
			]
		},
		{
			"ID": "20220913084333-66hm6p7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-66hm6p7",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "block表:本质上，也是位图结构uint32_t block ;\n比特位的位置，代表信号的编号\n比特位的内容，代表信号是否被阻塞阻塞位图也叫作信号屏蔽字"
				}
			]
		},
		{
			"ID": "20220913085512-xiz8q1w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085512-xiz8q1w"
			}
		},
		{
			"ID": "20220913084333-m9alc3h",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-m9alc3h",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "handler"
				}
			]
		},
		{
			"ID": "20220913084333-8n822a7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-8n822a7",
				"updated": "20220913085504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "是一个函数指针数组 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "void (*handler[31])(int)"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " , 用来存放相应的默认信号函数或自定义函数。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912095705"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912095705-20220913085504-e3cff61.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913085506-9xgfjoe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085506-9xgfjoe"
			}
		},
		{
			"ID": "20220913084333-vpg7tn5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-vpg7tn5",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "伪代码"
				}
			]
		},
		{
			"ID": "20220913084333-jiikhks",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-jiikhks",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int isHandler(int signo)\n{\n\tif(block \u0026 signo) //该信号被 block 阻塞\n\t{\n\t\t//根本不看是否收到信号\n\t}\n\telse // 信号没被 block\n\t{\n\t\tif(signo \u0026 pending) //该信号没被block ，已收到。\n\t\t{\n\t\t\thandlier_arrar[signo](signo);\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn 1;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913085517-n8h98dz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085517-n8h98dz"
			}
		},
		{
			"ID": "20220913084333-ntiw4yu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913084333-ntiw4yu",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "sigset_t"
				}
			]
		},
		{
			"ID": "20220913084333-f3wzmty",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-f3wzmty",
				"updated": "20220913085534"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从上图来看,每个信号只有一个bit的未决标志,非0即1,不记录该信号产生了多少次,阻塞标志也是这样表示的。\n因此,未决和阻塞标志可以用相同的数据类型"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "sigset_t"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来存储,"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "sigset_t"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "称为"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "信号集"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ",这个类型可以表示每个信号的“有效”或“无效”状态,在阻塞信号集中“有效”和“无效”的含义是该信号是否被阻塞,而在未决信号集中“有效”和“无效”的含义是该信号是否处于未决状态。"
				}
			]
		},
		{
			"ID": "20220913084333-hm0wavu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913084333-hm0wavu",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号集 操作函数"
				}
			]
		},
		{
			"ID": "20220913084333-xhhc3sl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-xhhc3sl",
				"updated": "20220913085543"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "sigset_t"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "类型对于每种信号用一个bit表示“有效”或“无效”状态,至于这个类型内部如何存储这些bit则依赖于系统实现,从使用者的角度是不必关心的,使用者只能调用以下函数来操作sigset_ t变量,而不应该对它的内部数据做任何解释,比如用printf直接打印sigset_t变量是没有意义的。"
				}
			]
		},
		{
			"ID": "20220913084333-h3nwd4h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-h3nwd4h",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003csignal.h\u003e\n\nint sigemptyset(sigset_t *set);//将所有信号对应的bit位清零\n\nint sigfillset(sigset_t *set);//将所有信号对应的bit位 置1\n\nint sigaddset (sigset_t *set, int signo);//添加signo到set中\n\nint sigdelset(sigset_t *set, int signo);//将set中的signo删除\n\nint sigismember（const sigset_t *set, int signo);//判断是否与pending位图中的相应bit位相等\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-jwb2e1b",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220913084333-jwb2e1b",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"ID": "20220913084333-sietwmq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-sietwmq",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-300lb10",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-300lb10",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "函数"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "sigemptyset"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "初始化set所指向的信号集,使其中所有信号的对应bit清零,表示该信号集不包含任何有效信号。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-y08qndt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-y08qndt",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-0lt1zwl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-0lt1zwl",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "函数"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "sigﬁllset"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "初始化set所指向的信号集,使其中所有信号的对应bit置位,表示  该信号集的有效信号包括系统支持的所有信号。\n"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeText",
											"Data": "注意,在使用sigset_ t类型的变量之前,一定要调用"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "sigemptyset"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "或"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "sigﬁllset"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "做初始化,使信号集处于确定的状态"
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。初始化sigset_t变量之后就可以在调用"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "sigaddset"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "和"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "sigdelset"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "在该信号集中添加或删除某种有效信号。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913084333-zgibrgx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-zgibrgx",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "sigprocmask()"
				}
			]
		},
		{
			"ID": "20220913084333-zb3llrd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-zb3llrd",
				"updated": "20220913085609"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "调用函数sigprocmask可以读取或更改进程的信号屏蔽字(阻塞信号集)。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912141720"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912141720-20220913085609-14qlgc2.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n如果oldset是非空指针,则读取进程的当前信号屏蔽字通过oset参数传出。如果set是非空指针,则 更改进程的信号屏蔽字\n参数how指示如何更改。如果oldset和set都是非空指针,则先将原来的信号 屏蔽字备份到oset里,然后 根据set和how参数更改信号屏蔽字。"
				}
			]
		},
		{
			"ID": "20220913084333-lb6twma",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-lb6twma",
				"updated": "20220913085617"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设当前的信号屏蔽字为mask,下表说明了how参数的可选值。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912145508"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912145508-20220913085617-gdnz10b.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n如果调用sigprocmask解除了对当前若干个未决信号的阻塞,则在sigprocmask返回前,至少将其中一个信号递达。"
				}
			]
		},
		{
			"ID": "20220913085623-ef4c982",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085623-ef4c982"
			}
		},
		{
			"ID": "20220913084333-b0s3rbi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-b0s3rbi",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "sigpending()"
				}
			]
		},
		{
			"ID": "20220913084333-x5no61r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-x5no61r",
				"updated": "20220913085632"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读取当前进程的未决信号集,通过set参数传出。。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912145931"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912145931-20220913085632-rw4urmp.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n调用成功则返回0,出错则返回-1"
				}
			]
		},
		{
			"ID": "20220913085625-wbxxd45",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085625-wbxxd45"
			}
		},
		{
			"ID": "20220913084333-ofgz5zt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-ofgz5zt",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用案例"
				}
			]
		},
		{
			"ID": "20220913084333-xi6seq4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-xi6seq4",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将2号信号block后，查看 pending位图"
				}
			]
		},
		{
			"ID": "20220913084333-zepe03c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-zepe03c",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cstdlib.h\u003e\n\nvoid show_pending(sigset_t* set) //打印pending位图\n{\n    int sig = 1;\n    for( ; sig \u003c= 31 ; sig++ )\n    {\n         if(sigismember(set , sig))//如果sig与pending位图相应的bit位 相同，则表示 未决\n            printf(\"1\");\n         else\n            printf(\"0\");\n     }\n     printf(\"\\n\");\n }\nint main()\n{\n    sigset_t iset , oset;\n\n    sigemptyset(\u0026iset); //将iset 和 oset 置零\n    sigemptyset(\u0026oset);\n\n    sigaddset(\u0026iset , 2); //添加2号信号到 iset。\n\n    sigprocmask(SIG_SETMASK , \u0026iset , \u0026oset); //设置block位图中的屏蔽位，被修改的屏蔽位返回到oset中\n\n    sigset_t pending;\n    while(1)\n    {\n        sigemptyset(\u0026pending);\n\n        sigpending(\u0026pending);//读取当前信号中的未决信号集，返回到pending中。\n\n        show_pending(\u0026pending);//打印penging位图\n\n        sleep(1);\n    }\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-4fbrtf8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-4fbrtf8",
				"updated": "20220913085653"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以下是运行结果\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912144331"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912144331-20220913085653-43epg1z.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-2akab3w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-2akab3w",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "恢复block位图，将oset传进 sigprocmask() 中。"
				}
			]
		},
		{
			"ID": "20220913084333-tdky3ac",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-tdky3ac",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cstdlib.h\u003e\n\nvoid show_pending(sigset_t* set)\n{\n    printf(\"curr process  pending: \");\n    int sig = 1;\n    for( ; sig \u003c= 31 ; sig++ )\n    {\n         if(sigismember(set , sig))//如果sig与pending位图相应的bit位 相同，则表示 未决\n            printf(\"1\");\n         else\n            printf(\"0\");\n     }\n     printf(\"\\n\");\n }\nint main()\n{\n    sigset_t iset , oset;\n\n    sigemptyset(\u0026iset); //将iset 和 oset 置零\n    sigemptyset(\u0026oset);\n\n    sigaddset(\u0026iset , 2); //添加2号信号到 iset。\n\n    sigprocmask(SIG_SETMASK , \u0026iset , \u0026oset); //设置block位图中的屏蔽位，被修改的屏蔽位返回到oset中\n\n    sigset_t pending;\n    while(1)\n    {\n        sigemptyset(\u0026pending);\n\n        sigpending(\u0026pending);//读取当前信号中的未决信号集，返回到pending中。\n\n        show_pending(\u0026pending);//打印penging位图\n\t  \n\t    sleep(1);\n\n        count++;\n        if(count == 20){ //当count == 20 时，将会执行 2号信号\n            printf(\"恢复2号信号可以递达了\\n\");\n            sigprocmask(SIG_SETMASK , \u0026oset , NULL);\n        }\n    }\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-wdebhj8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-wdebhj8",
				"updated": "20220913085703"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912151902"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912151902-20220913085703-31e013y.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084333-mo49n5g",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913084333-mo49n5g",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号发送后"
				}
			]
		},
		{
			"ID": "20220913084333-qbgnh3d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-qbgnh3d",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号发送到task_struct 后，在\""
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "合适"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\"的时候会被处理。"
				}
			]
		},
		{
			"ID": "20220913084333-cpzjoie",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-cpzjoie",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "为什么是“合适”的时候"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ":\n\t信号的产生是异步的，当前进程可能在做更重要的事情。"
				}
			]
		},
		{
			"ID": "20220913084333-943lc19",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-943lc19",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "什么时候是合适的时候？"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n\t"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "从内核切换回用户态的时候进行信号检测与信号的处理!"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084333-3nnywqy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913084333-3nnywqy",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用户态与核心态"
				}
			]
		},
		{
			"ID": "20220913084333-1wwz7ea",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-1wwz7ea",
				"updated": "20220913085726"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "所谓的系统调用:就是进程的身份转化成为内核，然后根据内核页表找到系统函数，执行就行了。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912152829"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912152829-20220913085726-cspl0cx.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913085740-qwtokba",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085740-qwtokba"
			}
		},
		{
			"ID": "20220913084333-a7nkwhn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-a7nkwhn",
				"updated": "20220913085746"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912153215"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912153215-20220913085746-khzdk0x.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "每个进程都有各自的用户级页表，但是所有进程的内核空间都共用着一张系统级页表"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084333-wn0dmoa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913084333-wn0dmoa",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号的处理过程"
				}
			]
		},
		{
			"ID": "20220913084333-4rfdly8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-4rfdly8",
				"updated": "20220913085755"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912153814"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912153814-20220913085755-0otq26i.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913084333-bfs47vx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-bfs47vx",
				"updated": "20220913085809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体出来就像这样。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912153859"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912153859-20220913085809-qzzk2oc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-lfj82i0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-lfj82i0",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总共进行了4次 态切换 ，"
				}
			]
		},
		{
			"ID": "20220913084333-0mawf10",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220913084333-0mawf10",
				"updated": "20220913085818"
			},
			"Children": [
				{
					"ID": "20220913084333-6lg2es2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-6lg2es2",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-2gvhroh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-2gvhroh",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第一次先从用户态-\u003e核心态 ，处理当前可以递达的信号。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-uiwyfyr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-uiwyfyr",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-exd2h6w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-exd2h6w",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第二次是如果要执行自定义捕捉的信号，则从核心态-\u003e用户态 去执行我们写的自定义捕捉函数。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-d3aopbt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-d3aopbt",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-1kovjyn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-1kovjyn",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "执行自定义捕捉函数后，进行第三次切换，从用户态-\u003e核心态 调用"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "sys_sigreturn()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-8rbfssh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-8rbfssh",
						"updated": "20220913085818"
					},
					"Children": [
						{
							"ID": "20220913084333-1jfabby",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-1jfabby",
								"updated": "20220913085818"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "第四次 核心态-\u003e用户态 返回用户模式从主控制流程中上次被中断的地方继续句下执行\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20220912154205"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/Pasted image 20220912154205-20220913085818-016a0yk.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913085826-xiteezn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913085826-xiteezn"
			}
		},
		{
			"ID": "20220913084333-dtpnbjq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220913084333-dtpnbjq",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内核时如何捕捉信号的"
				}
			]
		},
		{
			"ID": "20220913084333-6enpbpj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220913084333-6enpbpj",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "sigsction()"
				}
			]
		},
		{
			"ID": "20220913084333-mf2vnyk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-mf2vnyk",
				"updated": "20220913090107"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用其实和"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220913083829-5i82vf5"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefText",
							"Data": "singal()"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "一样，不过能捕捉实时信号，而且功能多一些,能屏蔽一些我们不想接收的信号。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912161331"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912161331-20220913085833-hzc7rc0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-d95bkxa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-d95bkxa",
				"updated": "20220913085839"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "struct sigcation结构体的内容，被红线划了的内容表示我们用不到。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912161516"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912161516-20220913085839-3h20fta.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913084333-b1yw3nj",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220913084333-b1yw3nj",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"ID": "20220913084333-wel2dyj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-wel2dyj",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-20yse1n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-20yse1n",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "sigaction函数可以读取和修改与指定信号相关联的处理动作。调用成功则返回0,出错则返回- 1。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-8g7pzw7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-8g7pzw7",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-wpql0gd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-wpql0gd",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "signum"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 是指定信号的编号。若act指针非空,则根据act修改该信号的处理动作。若oact指针非 空,则通过oldact传出该信号原来的处理动作。act和oldact指向sigaction结构体。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913084333-0tksjzt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913084333-0tksjzt",
						"updated": "20220913084333"
					},
					"Children": [
						{
							"ID": "20220913084333-xvvf6fm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913084333-xvvf6fm",
								"updated": "20220913084333"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "sa_handler"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "赋值为常数SIG_IGN传给sigaction表示忽略信号,赋值为常数SIG_DFL表示执行系统默认动作,赋值为一个函数指针表示用自定义函数捕捉信号,或者说向内核注册了一个信号处理函 数,该函数返回 值为void,可以带一个int参数,通过参数可以得知当前信号的编号,这样就可以用同一个函数处理多种信号。显然,这也是一个回调函数,不是被main函数调用,而是被系统所调用。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913084333-gobrcok",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-gobrcok",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "当某个信号的处理函数被调用时,内核自动将当前信号加入进程的信号屏蔽字,当信号处理函数返回时自动恢复原来的信号屏蔽字,这样就保证了在处理某个信号时,如果这种信号再次产生,那么 它会被阻塞到当前处理结束为止。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "如果在调用信号处理函数时,除了当前信号被自动屏蔽之外,还希望自动屏蔽另外一些信号,则用"
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "sa_mask"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "字段说明这些需要额外屏蔽的信号,当信号处理函数返回时自动恢复原来的信号屏蔽字。 sa_ﬂags字段包含一些选项,本章的代码都把"
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "sa_ﬂags"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "设为0,"
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "sa_sigaction"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "是实时信号的处理函数"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "."
				}
			]
		},
		{
			"ID": "20220913084333-vyysod7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-vyysod7",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们发送2号信号时，则会在handler自定义捕捉处理方式中死循环。由于对3号信号进行了block，所以也无法使用3号信号退出。"
				}
			]
		},
		{
			"ID": "20220913084333-a03mi89",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913084333-a03mi89",
				"updated": "20220913084333"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003csignal.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n\n\nvoid handler(int signo)\n{\n    while(1)\n    {\n        printf(\"get a signo: %d\\n\" ,signo );\n        sleep(1);\n    }\n}\n\nint main()\n{\n    struct sigaction act; //这个结构体在 signal.h 中包含了\n    memset(\u0026act , 0 , sizeof(act));//对act进行初始化\n\n    sigemptyset(\u0026act.sa_mask);//清空 act.mask \n\n    sigaddset(\u0026act.sa_mask , 3 );//添加3号信号进入 act.sa_mask\n\n    act.sa_handler = handler; //将默认的信号处理方法修改为我们定义handler方法\n    //act.sa_handler = SIG_IGN //将默认的信号处理方法修改为 忽略\n    //act.sa_handler = SIG_DFL; //将信号处理方法修改为 默认\n\n    sigaction(2 , \u0026act , NULL);\n\n    while(1){\n        printf(\"hello bit\\n\");\n        sleep(1);\n    }\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913084333-n17nrfu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913084333-n17nrfu",
				"updated": "20220913085851"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220912163359"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220912163359-20220913085851-d1mkj37.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913222409-58ccy8h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222409-58ccy8h"
			}
		},
		{
			"ID": "20220913222411-e7o7da9",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913222411-e7o7da9",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可重入函数"
				}
			]
		},
		{
			"ID": "20220913222411-nv1w75q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-nv1w75q",
				"updated": "20220913222451"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220913090449"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220913090449-20220913222451-1g2klc2.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913222411-gakgchz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220913222411-gakgchz",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"ID": "20220913222411-1352va8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913222411-1352va8",
						"updated": "20220913222411"
					},
					"Children": [
						{
							"ID": "20220913222411-jj0ku91",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913222411-jj0ku91",
								"updated": "20220913222411"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "main函数调用insert函数向一个链表head中插入节点node1。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913222411-qugtqrd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913222411-qugtqrd",
						"updated": "20220913222411"
					},
					"Children": [
						{
							"ID": "20220913222411-46nf3wp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913222411-46nf3wp",
								"updated": "20220913222411"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "插入操作分为两步,刚做完第一步的时候,因为硬件中断使进程切换到内核,再次回用户态之前检查到有信号待处理,于是切换 到sighandler函数,sighandler也调用insert函数向同一个链表head中插入节点node2。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913222411-avht5fp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913222411-avht5fp",
						"updated": "20220913222411"
					},
					"Children": [
						{
							"ID": "20220913222411-5yv3v1k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913222411-5yv3v1k",
								"updated": "20220913222411"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "插入操作的两步都做完之后从sighandler返回内核态,再次回到用户态就从main函数调用的insert函数中继续 往下执行,先前做第一步之后被打断,现在继续做完第二步。"
								}
							]
						}
					]
				},
				{
					"ID": "20220913222411-c697pto",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220913222411-c697pto",
						"updated": "20220913222411"
					},
					"Children": [
						{
							"ID": "20220913222411-s6enonc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220913222411-s6enonc",
								"updated": "20220913222411"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "结果是,main函数和sighandler先后  向链表中插入两个节点,而最后只有一个节点真正插入链表中了。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913222411-5jj5rdt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-5jj5rdt",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "像上例这样,insert函数被不同的控制流程调用,有可能在第一次调用还没返回时就再次进入该函数,这称为重入,insert函数访问一个全局链表,有可能因为重入而造成错乱,像这样的函数称为 不可重入函数,反之, 如果一个函数只访问自己的局部变量或参数,则称为可重入(Reentrant) 函数。\n为什么两个不同的控制流程调用同一个函数,访问它的同一个局部变量或参数就不会造成错乱?"
				}
			]
		},
		{
			"ID": "20220913222411-6930pbe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-6930pbe",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果一个函数符合以下条件之一则是不可重入的:"
				}
			]
		},
		{
			"ID": "20220913222411-38g4x9e",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220913222411-38g4x9e",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220913222411-2dyc5xt",
					"Type": "NodeList",
					"ListData": {
						"Typ": 1
					},
					"Properties": {
						"id": "20220913222411-2dyc5xt",
						"updated": "20220913222411"
					},
					"Children": [
						{
							"ID": "20220913222411-59s8sbm",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "MS4=",
								"Num": 1
							},
							"Properties": {
								"id": "20220913222411-59s8sbm",
								"updated": "20220913222411"
							},
							"Children": [
								{
									"ID": "20220913222411-c5boa8s",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220913222411-c5boa8s",
										"updated": "20220913222411"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "调用了malloc或free,因为malloc也是用全局链表来管理堆的。"
										}
									]
								}
							]
						},
						{
							"ID": "20220913222411-x48qsmx",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "Mi4=",
								"Num": 2
							},
							"Properties": {
								"id": "20220913222411-x48qsmx",
								"updated": "20220913222411"
							},
							"Children": [
								{
									"ID": "20220913222411-gj5ru8a",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220913222411-gj5ru8a",
										"updated": "20220913222411"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "调用了标准I/O库函数。标准I/O库的很多实现都以不可重入的方式使用全局数据结构。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220913222411-q8pjtiv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-q8pjtiv",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "insert函数一旦重入，"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "有可能出现问题"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "---该函数"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "不可被重入"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\ninsert函数一旦重入，"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "不会出现问题"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "--- 该函数:"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "可重入函数"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "我们所学到的大部分函数，STL，boost库中的函数，大部分都是"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "不可重入"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "的!"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220913222411-2dg35mz",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913222411-2dg35mz",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "volatile"
				}
			]
		},
		{
			"ID": "20220913222411-y9hz2h4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-y9hz2h4",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "volatile的作用：保"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "存内存的可见性，告知编译器，被该关键字修饰的变量，不允许被优化，对该变量的任何操作，都必须在真实内存中进行操作。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220913222411-w27zv58",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-w27zv58",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在编程程序是 ，我们的代码基本上都会被编译器进行一定程度的优化，以提升效率，编译器在优化时会出现问题吗？ "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "会的"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220913222411-vljkxs4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-vljkxs4",
				"updated": "20220913222716"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以下代码使用gcc编译器的 "
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722140734-9s3kxbt"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefText",
							"Data": "-O3"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 优化，正常的代码结果是，当按下 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "ctrl+c"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ， 程序将运行结束。"
				}
			]
		},
		{
			"ID": "20220913222411-f24mhb2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913222411-f24mhb2",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003csignal.h\u003e\n\n\nint flag = 0; \n\nvoid handler(int signo)\n{\n    flag = 1;\n    printf(\"change flag 0 to 1\\n\");\n}\n\n\nint main()\n{\n\n    signal(2 , handler);\n    while(!flag);\n\n    printf(\"process exit normally!\\n\");\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913222411-zpeyckm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-zpeyckm",
				"updated": "20220913222804"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是运行结果如下，当按下"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "ctrl+c"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 时，程序还在不断运行，无法结束。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220913093350"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220913093350-20220913222804-dk3z23q.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913222411-ov739t7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-ov739t7",
				"updated": "20220913222839"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "原因如下：\n编译器在进行优化时，将flag变量加载到了寄存器中，省得每次都需要去内存中读取，但这也导致了我们之后在handler函数中对flag进行修改时，已经无效，因为flag现在寄存器中。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220913094236"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220913094236-20220913222839-c26ykbx.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220913222411-jny783r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-jny783r",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解决办法："
				}
			]
		},
		{
			"ID": "20220913222411-011aw9b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913222411-011aw9b",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003csignal.h\u003e\n\n\nvolatile int flag = 0;//在flag处使用volatile关键字，表示不然编译器对此变量进行优化\n\nvoid handler(int signo)\n{\n    flag = 1;\n    printf(\"change flag 0 to 1\\n\");\n}\n\n\nint main()\n{\n\n    signal(2 , handler);\n    while(!flag);\n\n    printf(\"process exit normally!\\n\");\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913222411-sbfz9gv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-sbfz9gv",
				"updated": "20220913222846"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220913094651"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220913094651-20220913222846-czb3d0m.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n问题解决"
				}
			]
		},
		{
			"ID": "20220913222411-5bv88ms",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220913222411-5bv88ms",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SIGCHLD"
				}
			]
		},
		{
			"ID": "20220913222411-hxesjws",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-hxesjws",
				"updated": "20220913223222"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "进程一章讲过用"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722143034-e2ikwyd"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefText",
							"Data": "wait()"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722143034-ckd3vu9"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefText",
							"Data": "waitpid()"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "清理僵尸进程,父进程可以阻塞等待子进程结束,也可以非阻塞地查询是否有子进程结束等待清理(也就是轮询的方式)。\n采用第一种方式,父进程阻塞了就不 能处理自己的工作了;采用第二种方式,父进程在处理自己的工作的同时还要记得时不时地轮询一 下,程序实现复杂。\n其实,"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "子进程在终止时会给父进程发"
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeText",
									"Data": "17号SIGCHLD信号"
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": ",该信号的默认处理动作是忽略,父进程可以自定义SIGCHLD信号的处理函数"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ,这样父进程只需专心处理自己的工作,不必关心子进程了,子进程 终止时会通知父进程,父进程在信号处理函数中调用wait清理子进程即可。"
				}
			]
		},
		{
			"ID": "20220913222411-e91gib0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913222411-e91gib0",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003csignal.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cstdlib.h\u003e\n\nvoid GetChild(int signo)\n{\n    //waitpid();\n    printf(\"get a signal : %d, pid: %d\\n\", signo, getpid());\n}\n\nint main()\n{\n    signal(SIGCHLD, GetChild);\n  \n   // signal(SIGCHLD, SIG_IGN); //显示设置忽略17号信号，当进程退出后，自动释放僵尸进程 ,只在Linux下有效\n   \n    pid_t id = fork();\n    if(id == 0){\n        //child\n        int cnt = 5;\n        while(cnt){\n            printf(\"我是子进程: %d\\n\", getpid());\n            sleep(1);\n            cnt--;\n        }\n        exit(0);\n    }\n\n    while(1);\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913222411-cyhvrde",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-cyhvrde",
				"updated": "20220913223303"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220913124652"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220913124652-20220913223303-lq4p351.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220913223307-k0nauu4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913223307-k0nauu4"
			}
		},
		{
			"ID": "20220913222411-iwlx50k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-iwlx50k",
				"updated": "20220913223337"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其实我们也能在自定义信号处理函数中进行"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722143034-e2ikwyd"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefText",
							"Data": "wait()"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722143034-ckd3vu9"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefText",
							"Data": "waitpid()"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "来回收子进程"
				}
			]
		},
		{
			"ID": "20220913222411-emfu1bd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913222411-emfu1bd",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void GetChild(int signo)\n{\n    while( (id = waitpid(-1, NULL, WNOHANG)) \u003e 0){ //因为子进程可能不止一个，所以进行多进程等待\n        printf(\"wait child success: %d\\n\", id); \n    }\n    printf(\"child is quit! %d\\n\", getpid());\n}\n\nint main()\n{\n    signal(SIGCHLD, GetChild);\n  \n   // signal(SIGCHLD, SIG_IGN); //显示设置忽略17号信号，当进程退出后，自动释放僵尸进程 ,只在Linux下有效\n   \n    pid_t id = fork();\n    if(id == 0){\n        //child\n        int cnt = 5;\n        while(cnt){\n            printf(\"我是子进程: %d\\n\", getpid());\n            sleep(1);\n            cnt--;\n        }\n        exit(0);\n    }\n\n    while(1);\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913222411-hjlz0b1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-hjlz0b1",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果我们不关心子进程退出的状态和退出码。我们可以直接选择 忽略此信号 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "signal(SIGCHLD , SIG_IGN)"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "；"
				}
			]
		},
		{
			"ID": "20220913222411-81b2qu3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220913222411-81b2qu3",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()\n{  \n   signal(SIGCHLD, SIG_IGN); //显示设置忽略17号信号，当进程退出后，自动释放僵尸进程 ,只在Linux下有效\n   \n    pid_t id = fork();\n    if(id == 0){\n        //child\n        int cnt = 5;\n        while(cnt){\n            printf(\"我是子进程: %d\\n\", getpid());\n            sleep(1);\n            cnt--;\n        }\n        exit(0);\n    }\n\n    while(1);\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220913222411-aixq1n6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220913222411-aixq1n6",
				"updated": "20220913222411"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "![[Pasted image 20220913125636.png]]"
				}
			]
		}
	]
}