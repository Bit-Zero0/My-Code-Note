{
	"ID": "20221128083839-8qd1p9v",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221128083839-8qd1p9v",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20221128083853-pcjyvr9\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20221128083853-0ybazmi\u0026quot;,\u0026quot;scrollTop\u0026quot;:0}",
		"title": "数据类型与变量",
		"updated": "20230423223428"
	},
	"Children": [
		{
			"ID": "20230423223428-2yol8tx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223428-2yol8tx"
			}
		},
		{
			"ID": "20230423223307-8o4js0l",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223307-8o4js0l",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字面常量"
				}
			]
		},
		{
			"ID": "20230423223307-mhpdw02",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-mhpdw02",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上节课HelloWorld程序中， "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "System.Out.println(\u0026quot;Hello World\u0026quot;);"
				},
				{
					"Type": "NodeText",
					"Data": "​  语句，不论程序何时运行，输出的都是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Hello World"
				},
				{
					"Type": "NodeText",
					"Data": "​，其实\""
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Hello World"
				},
				{
					"Type": "NodeText",
					"Data": "​\"就是字面常量。"
				}
			]
		},
		{
			"ID": "20230423223307-sl8y5l0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-sl8y5l0",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "常量即程序运行期间，固定不变的量称为常量"
				},
				{
					"Type": "NodeText",
					"Data": "，比如：一个礼拜七天，一年12个月等。"
				}
			]
		},
		{
			"ID": "20230423223307-vq58nkm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-vq58nkm",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Demo{\n   public static void main(String[] args){\n        System.Out.println(\"hello world!\");\n        System.Out.println(100);\n        System.Out.println(3.14);\n        System.Out.println('A');\n        System.Out.println(true);\n        System.Out.println(false); \n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-rv507om",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-rv507om",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "100"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "3.14"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "'A'"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "true/false"
				},
				{
					"Type": "NodeText",
					"Data": "​都是常量，将其称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "字面常量"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423223307-fz260ne",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-fz260ne",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字面常量的分类："
				}
			]
		},
		{
			"ID": "20230423223307-lq7ok83",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-lq7ok83",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-6uz87gr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-6uz87gr",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-s74tz37",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-s74tz37",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符串常量：由\"\"括起来的，比如“12345”、“hello”、“你好”。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-2gq4fvy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-2gq4fvy",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-hsvikbn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-hsvikbn",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "整形常量：程序中直接写的数字(注意没有小数点)，比如：100、1000"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-ugybpim",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223307-ugybpim",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-2z8o7zy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-2z8o7zy",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "浮点数常量：程序中直接写的小数，比如：3.14、0.49"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-x1nr70j",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223307-x1nr70j",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-cac9h6c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-cac9h6c",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符常量：由  单引号  括起来的当个字符，比如：‘A’、‘1’"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-9vb2cbt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423223307-9vb2cbt",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-92r8q4d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-92r8q4d",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "布尔常量：只有两种true和false"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-94psjy6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230423223307-94psjy6",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-jzue2vj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-jzue2vj",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "空常量：null(后面了讲)\n注意：字符串、整形、浮点型、字符型以及布尔型，在Java中都称为数据类型。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-4o5zww0",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223307-4o5zww0",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数据类型"
				}
			]
		},
		{
			"ID": "20230423223307-wfy1yhq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-wfy1yhq",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Java中数据类型主要分为两类：基本数据类型和引用数据类型。\n基本数据类型有四类八种："
				}
			]
		},
		{
			"ID": "20230423223307-vpnr97c",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-vpnr97c",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-r0t9zl1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-r0t9zl1",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-cw3xahe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-cw3xahe",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "四类：整型、浮点型、字符型以及布尔型"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-ol9sk03",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-ol9sk03",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-yti9x6d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-yti9x6d",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "八种：\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221126122309.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126122309.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-m1mbm3h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-m1mbm3h",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				}
			]
		},
		{
			"ID": "20230423223307-m7gt93o",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423223307-m7gt93o",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-bdikt61",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223307-bdikt61",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-5ot8eue",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-5ot8eue",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不论是在16位系统还是32位系统，int都占用4个字节，long都占8个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-ubkywm5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223307-ubkywm5",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-bn40r4l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-bn40r4l",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "整形和浮点型都是带有符号的"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-4hgen97",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223307-4hgen97",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-99n5t3n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-99n5t3n",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "整型默认为int型，浮点型默认为double"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-vx4pm4y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223307-vx4pm4y",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-u5gbrsk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-u5gbrsk",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符串属于引用类型，该中类型后序介绍。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-rbhgd0c",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230423223307-rbhgd0c",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230423223307-zst8gl5",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423223307-zst8gl5",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark",
							"TextMarkTextContent": "什么是字节?"
						}
					]
				},
				{
					"ID": "20230423223307-ylfy92y",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230423223307-ylfy92y",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-u2jzspr",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223307-u2jzspr",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"ID": "20230423223307-o7ln4x1",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223307-o7ln4x1",
										"updated": "20230423223307"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "字节是计算机中表示空间大小的基本单位."
										}
									]
								}
							]
						},
						{
							"ID": "20230423223307-z01ewne",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223307-z01ewne",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"ID": "20230423223307-xw1ifbf",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223307-xw1ifbf",
										"updated": "20230423223307"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "计算机使用二进制表示数据. 我们认为 8 个二进制位(bit) 为一个字节(Byte)."
										}
									]
								}
							]
						},
						{
							"ID": "20230423223307-mdrukx1",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223307-mdrukx1",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"ID": "20230423223307-13hoabm",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223307-13hoabm",
										"updated": "20230423223307"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "我们平时的计算机为 8GB 内存, 意思是 8G 个字节."
										}
									]
								}
							]
						},
						{
							"ID": "20230423223307-sqdl0mv",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223307-sqdl0mv",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"ID": "20230423223307-eos0y10",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223307-eos0y10",
										"updated": "20230423223307"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "其中 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "1KB = 1024 Byte"
										},
										{
											"Type": "NodeText",
											"Data": ", "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "1MB = 1024 KB"
										},
										{
											"Type": "NodeText",
											"Data": ", "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "1GB = 1024 MB"
										},
										{
											"Type": "NodeText",
											"Data": "."
										}
									]
								}
							]
						},
						{
							"ID": "20230423223307-87vg646",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223307-87vg646",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"ID": "20230423223307-511r1dp",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223307-511r1dp",
										"updated": "20230423223307"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "所以 8GB 相当于 80 多亿个字节."
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-4snaqnt",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223307-4snaqnt",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变量"
				}
			]
		},
		{
			"ID": "20230423223307-vo3a8qa",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223307-vo3a8qa",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变量概念"
				}
			]
		},
		{
			"ID": "20230423223307-0g4xn77",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-0g4xn77",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在程序中，除了有始终不变的常量外，有些内容可能会经常改变，比如：人的年龄、身高、成绩分数、数学函数的计算结果等，对于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "这些经常改变的内容，在Java程序中，称为变量。而数据类型就是用来定义不同种类变量的"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423223307-7lwc33u",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223307-7lwc33u",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "语法格式"
				}
			]
		},
		{
			"ID": "20230423223307-z8cfmjp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-z8cfmjp",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定义变量的语法格式为："
				}
			]
		},
		{
			"ID": "20230423223307-gx35sdo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-gx35sdo",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10;   // 定义整形变量a，a是变量名也称为标识符，该变量中放置的值为10 \ndouble d = 3.14;\nchar c = 'A';\nboolean b = true;\n\nSystem.Out.println(a);\nSystem.Out.println(d);\nSystem.Out.println(c);\nSystem.Out.println(b);\n\na = 100;  // a是变量，a中的值是可以修改的，注意：= 在java中表示赋值，即将100交给a，a中保存的值就是100 \nSystem.Out.println(a);\n\n// 注意：在一行可以定义多个相同类型的变量 \nint a1 = 10, a2 = 20, a3 = 30;\nSystem.Out.println(a1);\nSystem.Out.println(a2);\nSystem.Out.println(a3);\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-2bbb48s",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223307-2bbb48s",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "整型变量"
				}
			]
		},
		{
			"ID": "20230423223307-37u85hr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-37u85hr",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int 整型变量"
				}
			]
		},
		{
			"ID": "20230423223307-lgf4oet",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-lgf4oet",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 方式一：在定义时给出初始值 \nint a = 10;\nSystem.Out.println(a);\n\n// 方式二：在定义时没有给初始值，但使用前必须设置初值 \nint b;\nb = 10;\nSystem.Out.println(b);\n\n// 使用方式二定义后，在使用前如果没有赋值，则编译期间会报错 \nint c;\nSystem.Out.println(c);\nc = 100;\n\n// int型变量所能表示的范围：\nSystem.Out.println(Integer.MIN_VALUE);\nSystem.Out.println(Integer.MAX_VALUE);\n\n// 注意：在定义int性变量时，所赋值不能超过int的范围\nint d = 12345678901234;  // 编译时报错，初值超过了int的范围\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-7ki5e3j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-7ki5e3j",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223307-4gp5f44",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-4gp5f44",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-6u8qc26",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-6u8qc26",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-izrc2yt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-izrc2yt",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int不论在何种系统下都是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "4个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-60xbudv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-60xbudv",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-2kvmd92",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-2kvmd92",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "推荐使用方式一定义，如果没有合适的初始值，可以设置为0"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-7efolpl",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223307-7efolpl",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-wmjzp8b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-wmjzp8b",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在给变量设置初始值时，值不能超过int的表示范围，否则会导致溢出"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-tk0bn1f",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223307-tk0bn1f",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-2wnogte",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-2wnogte",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "变量在使用之前必须要赋初值，否则编译报错"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-d1ilvl8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423223307-d1ilvl8",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-ocyc5n7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-ocyc5n7",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int的包装类型为 Integer(可以理解为int的加强版)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-zjzryhv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-zjzryhv",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "long 长整型变量"
				}
			]
		},
		{
			"ID": "20230423223307-gl3mi5q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-gl3mi5q",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10;\nlong b = 10;   // long定义的长整型变量\n\nlong c = 10L; // 为了区分int和long类型，一般建议：long类型变量的初始值之后加L或者l\nlong d = 10l; // 一般更加以加大写L，因为小写l与1不好区分\n\n// long型变量所能表示的范围：这个数据范围远超过    int 的表示范围. 足够绝大部分的工程场景使用. \nSystem.Out.println(Long.MIN_VALUE);\nSystem.Out.println(Long.MAX_VALUE);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-u83i2he",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-u83i2he",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223307-hvwmyra",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-hvwmyra",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-64d1w4k",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-64d1w4k",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-8qqjit4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-8qqjit4",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "长整型变量的初始值后加L或者l，推荐加L"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-66qp7iy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-66qp7iy",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-i99g9hg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-i99g9hg",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "长整型不论在那个系统下都占"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "8个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-pa02o3x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223307-pa02o3x",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-m61zvr4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-m61zvr4",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "长整型的表示范围为："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "inline-math",
									"TextMarkInlineMathContent": "-2^{31}"
								},
								{
									"Type": "NodeText",
									"Data": " ~ "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "inline-math",
									"TextMarkInlineMathContent": "2^{31}-1"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-8z4ojcj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223307-8z4ojcj",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-l7p8od8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-l7p8od8",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "long的包装类型为Long(可以理解为long的加强版)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-1k5k7ip",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-1k5k7ip",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "short 短整型变量"
				}
			]
		},
		{
			"ID": "20230423223307-jx0zbih",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-jx0zbih",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "short a = 10;\nSystem.Out.println(a);\n\n// short型变量所能表示的范围：\nSystem.Out.println(Short.MIN_VALUE); \nSystem.Out.println(Short.MAX_VALUE);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-dzumcie",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-dzumcie",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223307-g2iqo86",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-g2iqo86",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-82p3roj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-82p3roj",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-qxle19v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-qxle19v",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short在任何系统下都占"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "2个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-e3ty5fx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-e3ty5fx",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-9yjrwy1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-9yjrwy1",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short的表示范围为：-32768 ~ 32767"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-4o0l0cm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223307-4o0l0cm",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-1h7ukj4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-1h7ukj4",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用时注意不要超过范围(一般使用比较少)"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-1detddi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223307-1detddi",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-wa1z12t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-wa1z12t",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short的包装类型为Short"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-efxo9og",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-efxo9og",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字节型变量"
				}
			]
		},
		{
			"ID": "20230423223307-2knq0eu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-2knq0eu",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "byte b = 10;\nSystem.Out.println(b);\n\n// byte型变量所能表示的范围：\nSystem.Out.println(Byte.MIN_VALUE); \nSystem.Out.println(Byte.MAX_VALUE);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-23m4x97",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-23m4x97",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223307-d1xuocm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-d1xuocm",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-caowyan",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-caowyan",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-cu1vpc3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-cu1vpc3",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "byte在任何系统下都占"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "1个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-w5d82lk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-w5d82lk",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-0kz49j9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-0kz49j9",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "byte的范围是：-128 ~ 127"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-6qn5vr2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223307-6qn5vr2",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-zx1j2mq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-zx1j2mq",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字节的包装类型为Byte"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-8juifts",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-8juifts",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "思考：byte、short、int、long都可以定义整形变量，为什么要给出4中不同类型呢？"
				}
			]
		},
		{
			"ID": "20230423223307-v689y0l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-v689y0l",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这就好比买衣服时的尺码,不同的人适合不同的尺码。"
				}
			]
		},
		{
			"ID": "20230423223307-ohgilw5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223307-ohgilw5",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "浮点型变量"
				}
			]
		},
		{
			"ID": "20230423223307-y7h6kzc",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-y7h6kzc",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "double双精度浮点型"
				}
			]
		},
		{
			"ID": "20230423223307-fue24z2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-fue24z2",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "double d = 3.14; \nSystem.Out.println(d);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-d5rbzt7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-d5rbzt7",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "神奇的代码一："
				}
			]
		},
		{
			"ID": "20230423223307-1v50ugn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-1v50ugn",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 1; \nint b = 2;\nSystem.out.println(a / b);   // 输出 0.5 吗? 不会 结果为0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-1qe83d3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-1qe83d3",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在 Java 中, int 除以 int 的值仍然是 int(会直接舍弃小数部分)"
				},
				{
					"Type": "NodeText",
					"Data": "。如果想得到 0.5, 需要使用 double 类型计算."
				}
			]
		},
		{
			"ID": "20230423223307-haeit1n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-haeit1n",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "double a = 1.0; \ndouble b = 2.0;\nSystem.out.println(a / b);   // 输出0.5\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-0undiky",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-0undiky",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "神奇的代码二："
				}
			]
		},
		{
			"ID": "20230423223307-8zjpv5d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-8zjpv5d",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "double num = 1.1;\nSystem.out.println(num * num);  // 输出1.21吗？ \n\n// 执行结果\n1.2100000000000002\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-f1nisfa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-f1nisfa",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223307-jk0eraf",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-jk0eraf",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-6zaf66j",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-6zaf66j",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-yjzlx1h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-yjzlx1h",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "double在任何系统下都占"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "8个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-agkkthp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-agkkthp",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-yicbq07",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-yicbq07",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "浮点数与整数在内存中的存储方式不同，不能单纯使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "inline-math",
									"TextMarkInlineMathContent": "2^n"
								},
								{
									"Type": "NodeText",
									"Data": " 的形式来计算"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-urfqhel",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223307-urfqhel",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-od9vd1m",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-od9vd1m",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "double的包装类型为Double"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-r2o6t2v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223307-r2o6t2v",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-utyip92",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-utyip92",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "double 类型的内存布局遵守 IEEE 754 标准(和C语言一样), 尝试使用有限的内存空间表示可能无限的小数, 势必\n会存在一定的精度误差，因此浮点数是个近似值，并不是精确值。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-b46caoi",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-b46caoi",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "float 单精度浮点型"
				}
			]
		},
		{
			"ID": "20230423223307-scya93u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-scya93u",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "float num = 1.0f;    // 写作    1.0F 也可以 \nSystem.out.println(num);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-duqxr8b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-duqxr8b",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ﬂoat 类型在 Java 中占四个字节, 同样遵守 IEEE 754 标准. 由于表示的数据精度范围较小, 一般在工程上用到浮点数都优先考虑 double, 不太推荐使用 ﬂoat. ﬂoat的包装类型为Float。"
				}
			]
		},
		{
			"ID": "20230423223307-3gndaeu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223307-3gndaeu",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符型变量"
				}
			]
		},
		{
			"ID": "20230423223307-a5gattd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-a5gattd",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "char c1 = 'A';    // 大写字母 \nchar c2 = '1';    // 数字字符\n\nSystem.out.println(c1);\nSystem.out.println(c2);\n\n// 注意：java中的字符可以存放整形 \nchar c3 = '帅';\nSystem.out.println(c3);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-zlsd4ah",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-zlsd4ah",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项:"
				}
			]
		},
		{
			"ID": "20230423223307-v6u2l1r",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-v6u2l1r",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-jbxkgiy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-jbxkgiy",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-29fl1bf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-29fl1bf",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java 中使用  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": " 单引号    + 单个字母"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的形式表示字符字面值."
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-zsubzt0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-zsubzt0",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-yrdof1i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-yrdof1i",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "计算机中的字符本质上是一个整数. 在 C 语言中使用 ASCII 表示字符, 而 Java 中使用 Unicode 表示字符. 因此一个字符占用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "两个字节"
								},
								{
									"Type": "NodeText",
									"Data": ", 表示的字符种类更多, 包括中文."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-gfiivhm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-gfiivhm",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "char ch = '呵';\nSystem.out.println(ch);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-xgfl8ib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-xgfl8ib",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行 javac 的时候可能出现以下错误:"
				}
			]
		},
		{
			"ID": "20230423223307-qhe0bjp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-qhe0bjp",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Test.java:3: 错误: 未结束的字符文字 \n       char ch = '鍛?';\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-44ltmkm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-44ltmkm",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时我们在执行 javac 时加上 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-encoding UTF-8"
				},
				{
					"Type": "NodeText",
					"Data": "​ 选项即可"
				}
			]
		},
		{
			"ID": "20230423223307-5ov11lj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-5ov11lj",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "javac -encoding UTF-8 Test.java\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-qsgd4lf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-qsgd4lf",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于字符编码方式的讨论, 参见\nhttps://zhuanlan.zhihu.com/p/35172335"
				}
			]
		},
		{
			"ID": "20230423223307-o2ewdsz",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-o2ewdsz",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-3lialv7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223307-3lialv7",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-rjb2j71",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-rjb2j71",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "char的包装类型为Character"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-ukye4m5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223307-ukye4m5",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "布尔型变量"
				}
			]
		},
		{
			"ID": "20230423223307-k1do3o0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-k1do3o0",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "布尔类型常用来表示真假，在现实生活中也是经常出现的，比如：听说xxx同学买彩票中了一个亿...，听到后估计大\n部分人第一反应就是：我x，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "真的假的"
				},
				{
					"Type": "NodeText",
					"Data": "？"
				}
			]
		},
		{
			"ID": "20230423223307-bt6wutx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-bt6wutx",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "boolean b = true; \nSystem.out.println(b);\n\nb = false;\nSystem.out.println(b);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-ubxz0z8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-ubxz0z8",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223307-c81dfmm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-c81dfmm",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-i80funb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-i80funb",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-e1r06at",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-e1r06at",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "boolean 类型的变量只有两种取值, true 表示真, false 表示假."
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-6rqwvxs",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-6rqwvxs",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-jss01qj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-jss01qj",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java 的 boolean 类型和 int 不能相互转换, "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "不存在 1 表示 true, 0 表示 false 这样的用法"
								},
								{
									"Type": "NodeText",
									"Data": "."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-nw2aglh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-nw2aglh",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "boolean value = true;\nSystem.out.println(value + 1); \n// 代码编译会出现如下错误\nTest.java:4: 错误: 二元运算符    '+' 的操作数类型错误 \n       System.out.println(value + 1);\n                                ^ \n 第一个类型:  boolean\n 第二个类型: int \n 1 个错误\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-kwweouq",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-kwweouq",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-pmr1xf0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223307-pmr1xf0",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-6o85c25",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-6o85c25",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java虚拟机规范中，并没有明确规定boolean占几个字节，也没有专门用来处理boolean的字节码指令，在 Oracle公司的虚拟机实现中，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "boolean占1个字节"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-qcst3jj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223307-qcst3jj",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-ltxdk11",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-ltxdk11",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "boolean的包装类型为Boolean。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-8q5i60h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223307-8q5i60h",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类型转换"
				}
			]
		},
		{
			"ID": "20230423223307-jgiguou",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-jgiguou",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 作为一个强类型编程语言, 当不同类型之间的变量相互赋值的时候, 会有教严格的校验."
				}
			]
		},
		{
			"ID": "20230423223307-psl19cm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-psl19cm",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10;\nlong b = 100L;\n\nb = a;   // 可以通过编译 \na = b;   // 编译失败\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-tu3rilt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-tu3rilt",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Java中，当参与运算数据类型不一致时，就会进行类型转换。Java中类型转换主要分为两类：自动类型转换(隐式)\n和  强制类型转换(显式)。"
				}
			]
		},
		{
			"ID": "20230423223307-igh5vck",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-igh5vck",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动类型转换(隐式)"
				}
			]
		},
		{
			"ID": "20230423223307-a4hgptm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-a4hgptm",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动类型转换即："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "代码不需要经过任何处理，在代码编译时，编译器会自动进行处理。特点：数据范围小的转为数据范围大的时会自动进行"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423223307-5298c0e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-5298c0e",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "System.Out.println(1024);   // 整型默认情况下是int \nSystem.Out.println(3.14);   // 浮点型默认情况下是double\n\nint a = 100; \nlong b = 10L;\nb = a;   // a和b都是整形，a的范围小，b的范围大，当将a赋值给b时，编译器会自动将a提升为long类型，然后赋值 \na = b;   // 编译报错，long的范围比int范围大，会有数据丢失，不安全\n\nfloat f = 3.14F; \ndouble d = 5.12;\nd = f; // 编译器会将f转换为double，然后进行赋值\nf = d; // double表示数据范围大，直接将float交给double会有数据丢失，不安全 \n\nbyte b1 = 100;  // 编译通过，100没有超过byte的范围，编译器隐式将100转换为byte\nbyte b2 = 257;  // 编译失败，257超过了byte的数据范围，有数据丢失\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-hobbdnk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-hobbdnk",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "强制类型转换(显式)"
				}
			]
		},
		{
			"ID": "20230423223307-stbf599",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-stbf599",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "强制类型转换：当进行操作时，代码需要经过一定的格式处理，不能自动完成。特点：数据范围大的到数据范围小的。"
				}
			]
		},
		{
			"ID": "20230423223307-6u3twvz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-6u3twvz",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10; \nlong b = 100L;\nb = a;        // int--\u003elong，数据范围由小到大，隐式转换\na = (int)b;   // long--\u003eint, 数据范围由大到小，需要强转，否则编译失败 \n\nfloat f = 3.14F;\ndouble d = 5.12;\nd = f;        // float--\u003edouble，数据范围由小到大，隐式转换\nf = (float)d; // double--\u003efloat, 数据范围由大到小，需要强转，否则编译失败 \n\na = d;   // 报错，类型不兼容\na = (int)d;   // double没有int表示的数据范围大，需要强转，小数点之后全部丢弃 \n\nbyte b1 = 100;        // 100默认为int，没有超过byte范围，隐式转换\nbyte b2 = (byte)257;  // 257默认为int，超过byte范围，需要显示转换，否则报错 \n\nboolean flag = true;\na = flag;   // 编译失败：类型不兼容 \nflag = a;   // 编译失败：类型不兼容\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-u7tqnko",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-u7tqnko",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223307-hy1xal8",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-hy1xal8",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-h47cuas",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-h47cuas",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-h733ydh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-h733ydh",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不同数字类型的变量之间赋值, 表示范围更小的类型能隐式转换成范围较大的类型"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-p5qosof",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-p5qosof",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-9pcs2h1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-9pcs2h1",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果需要把范围大的类型赋值给范围小的, 需要强制类型转换, 但是可能精度丢失"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-h32ke2e",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223307-h32ke2e",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-1jv2t64",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-1jv2t64",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将一个字面值常量进行赋值的时候, Java 会自动针对数字范围进行检查"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-r9ysnd9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223307-r9ysnd9",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-cyzqmvq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-cyzqmvq",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "强制类型转换不一定能成功，不相干的类型不能互相转换"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-pqnb6i4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223307-pqnb6i4",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类型提升"
				}
			]
		},
		{
			"ID": "20230423223307-9lh25gt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-9lh25gt",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不同类型的数据之间相互运算时，数据类型小的会被提升到数据类型大的。"
				}
			]
		},
		{
			"ID": "20230423223307-rbreyh4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-rbreyh4",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. int与long之间：int会被提升为long"
				}
			]
		},
		{
			"ID": "20230423223307-n92wh79",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-n92wh79",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10; \nlong b = 20;\nint c = a + b;    // 编译出错: a + b==》int + long--\u003e long + long 赋值给int时会丢失数据 \nlong d = a + b;   // 编译成功：a + b==\u003eint + long---\u003elong + long 赋值给long  \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-q86uril",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223307-q86uril",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. byte与byte的运算"
				}
			]
		},
		{
			"ID": "20230423223307-6pntc6x",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-6pntc6x",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "byte a = 10;\nbyte b = 20;\nbyte c = a + b; \nSystem.out.println(c);\n// 编译报错\nTest.java:5: 错误: 不兼容的类型: 从int转换到byte可能会有损失 \n               byte c = a + b;\n\t\t\t\t          ^\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-tujxrim",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-tujxrim",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结论: byte 和 byte 都是相同类型, 但是出现编译报错. 原因是, 虽然 a 和 b 都是 byte, 但是计算 a + b 会先将 a 和 b 都提升成 int, 再进行计算, 得到的结果也是 int, 这是赋给 c, 就会出现上述错误.\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "由于计算机的 CPU 通常是按照 4 个字节为单位从内存中读写数据. 为了硬件上实现方便, 诸如 byte 和 short 这种低于 4 个字节的类型, 会先提升成 int, 再参与计算."
				}
			]
		},
		{
			"ID": "20230423223307-1dutx92",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-1dutx92",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正确的写法:"
				}
			]
		},
		{
			"ID": "20230423223307-4ba9odw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-4ba9odw",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "byte a = 10;\nbyte b = 20;\nbyte c = (byte)(a + b); \nSystem.out.println(c);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-hx1uycs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-hx1uycs",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【类型提升小结:】"
				}
			]
		},
		{
			"ID": "20230423223307-3g8fs0a",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-3g8fs0a",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-a27b6fk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-a27b6fk",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-m9obzh4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-m9obzh4",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不同类型的数据混合运算, 范围小的会提升成范围大的."
								}
							]
						}
					]
				},
				{
					"ID": "20230423223307-qbray28",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-qbray28",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-lafnspb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-lafnspb",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于 short, byte 这种比 4 个字节小的类型, 会先提升成 4 个字节的 int , 再运算."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-kdvcou8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223307-kdvcou8",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符串类型"
				}
			]
		},
		{
			"ID": "20230423223307-0a0v6a0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-0a0v6a0",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Java中使用String类定义字符串类型，比如"
				}
			]
		},
		{
			"ID": "20230423223307-mwpe2yd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-mwpe2yd",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) { \n   String s1 = \"hello\";\n   String s2 = \" world\";\n   System.out.println(s1);\n   System.out.println(s2);\n   System.out.println(s1+s2);   // s1+s2表示：将s1和s2进行拼接 \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-2pnh7t9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-2pnh7t9",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在有些情况下，需要将字符串和整形数字之间进行转换："
				}
			]
		},
		{
			"ID": "20230423223307-rl1p0cu",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-rl1p0cu",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-u7wq9wi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223307-u7wq9wi",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-aik90bo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-aik90bo",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int 转成 String"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-rbh4mt8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-rbh4mt8",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int num = 10; \n\n// 方法1\nString str1 = num + \"\";  \n\n// 方法2\nString str2 = String.valueOf(num);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-et2i8mz",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223307-et2i8mz",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"ID": "20230423223307-3fpfjx3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223307-3fpfjx3",
						"updated": "20230423223307"
					},
					"Children": [
						{
							"ID": "20230423223307-jjc5q6d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223307-jjc5q6d",
								"updated": "20230423223307"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "String 转成 int"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223307-oebvcjm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223307-oebvcjm",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String str = \"100\";\nint num = Integer.parseInt(str);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223307-fb1kfrs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223307-fb1kfrs",
				"updated": "20230423223307"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本节对只是对字符串进行简单的介绍，大家能够正常使用即可，后序会详细给大家介绍。"
				}
			]
		},
		{
			"ID": "20230423222915-xws7hul",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423222915-xws7hul",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的基本概念"
				}
			]
		},
		{
			"ID": "20230423222915-y9gmgjs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423222915-y9gmgjs",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的创建及初始化"
				}
			]
		},
		{
			"ID": "20230423222915-0h4nf1q",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423222915-0h4nf1q",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的创建"
				}
			]
		},
		{
			"ID": "20230423222915-7hyrbpc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423222915-7hyrbpc",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "T[] 数组名    = new T[N];\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423222915-i77c7fd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-i77c7fd",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "T"
				},
				{
					"Type": "NodeText",
					"Data": "​：表示数组中存放元素的类型\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "T[]"
				},
				{
					"Type": "NodeText",
					"Data": "​：表示数组的类型\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "N"
				},
				{
					"Type": "NodeText",
					"Data": "​：表示数组的长度"
				}
			]
		},
		{
			"ID": "20230423222915-ytm610r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423222915-ytm610r",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array1 = new int[10];       // 创建一个可以容纳10个int类型元素的数组 \ndouble[] array2 = new double[5];  // 创建一个可以容纳5个double类型元素的数组 \nString[] array3 = new double[3];  // 创建一个可以容纳3个字符串元素的数组\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423222926-2f40zev",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222926-2f40zev"
			}
		},
		{
			"ID": "20230423222915-26yh25a",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423222915-26yh25a",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查找数组中指定元素(顺序查找)"
				}
			]
		},
		{
			"ID": "20230423222915-27p8bkd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-27p8bkd",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个数组, 再给定一个元素, 找出该元素在数组中的位置.\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "代码示例"
				}
			]
		},
		{
			"ID": "20230423222915-3qqvgso",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423222915-3qqvgso",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n        int[] arr = {1,2,3,10,5,6};  \n        System.out.println(find(arr, 10));  \n} \n\npublic static int find(int[] arr, int data) {  \n\tfor (int i = 0; i \u003c arr.length; i++) {  \n\t\tif (arr[i] == data) {  \n\t\t\treturn i;  \n\t\t}  \n\t}  \n\treturn -1; // 表示没有找到  \n}\n\n// 执行结果\n3\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423222915-zpt3vcz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423222915-zpt3vcz",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查找数组中指定元素(二分查找)"
				}
			]
		},
		{
			"ID": "20230423222915-l5nrnbr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-l5nrnbr",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "针对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "有序数组"
				},
				{
					"Type": "NodeText",
					"Data": ", 可以使用更高效的二分查找."
				}
			]
		},
		{
			"ID": "20230423222915-m6vn9os",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230423222915-m6vn9os",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230423222915-sa0i83n",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423222915-sa0i83n",
						"updated": "20230423222915"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "啥叫有序数组?\n有序分为 \"升序\" 和 \"降序\"\n如 1 2 3 4 , 依次递增即为升序.\n如 4 3 2 1 , 依次递减即为降序."
						}
					]
				}
			]
		},
		{
			"ID": "20230423222915-8jkcaq5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-8jkcaq5",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以升序数组为例, 二分查找的思路是先取中间位置的元素, 然后使用待查找元素与数组中间元素进行比较："
				}
			]
		},
		{
			"ID": "20230423222915-27jhhbw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423222915-27jhhbw",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"ID": "20230423222915-gj9gbbc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423222915-gj9gbbc",
						"updated": "20230423222915"
					},
					"Children": [
						{
							"ID": "20230423222915-g15pa3k",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423222915-g15pa3k",
								"updated": "20230423222915"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果相等，即找到了返回该元素在数组中的下标"
								}
							]
						}
					]
				},
				{
					"ID": "20230423222915-golq0ia",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423222915-golq0ia",
						"updated": "20230423222915"
					},
					"Children": [
						{
							"ID": "20230423222915-340y8t6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423222915-340y8t6",
								"updated": "20230423222915"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果小于，以类似方式到数组左半侧查找"
								}
							]
						}
					]
				},
				{
					"ID": "20230423222915-e14ness",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423222915-e14ness",
						"updated": "20230423222915"
					},
					"Children": [
						{
							"ID": "20230423222915-51atw4z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423222915-51atw4z",
								"updated": "20230423222915"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果大于，以类似方式到数组右半侧查找"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423222915-cxue201",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-cxue201",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里我们如果找到就返回数组下标， 没找到就返回-1。"
				}
			]
		},
		{
			"ID": "20230423222915-4eamwn8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423222915-4eamwn8",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class array {  \n    public static void main(String[] args) {  \n        int[] arr = {1,2,3,4,5,6,7,8,9,10};  \n        System.out.println(binarySearch(arr , 6));  \n    }  \n  \n    public static int binarySearch(int[] arr , int target){  \n        int left = 0;  \n        int right = arr.length-1;  \n        while(left \u003c= right){  \n            int mid = (left + right) / 2;  \n            if(arr[mid] \u003e target){  \n                right = mid-1;  \n            }else if (arr[mid] \u003c target){  \n                left = mid+1;  \n            }else{  \n                return mid;  \n            }  \n        }  \n        return -1;  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423222915-isqcvkf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-isqcvkf",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到, 针对一个长度为 10000 个元素的数组查找, 二分查找只需要循环 14 次就能完成查找. 随着数组元素个数越多, 二分的优势就越大."
				}
			]
		},
		{
			"ID": "20230423222915-ct7cbcc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423222915-ct7cbcc",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组排序(冒泡排序)"
				}
			]
		},
		{
			"ID": "20230423223208-lyoh0kc",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223208-lyoh0kc",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字面常量"
				}
			]
		},
		{
			"ID": "20230423223208-bgljw35",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-bgljw35",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上节课HelloWorld程序中， "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "System.Out.println(\u0026quot;Hello World\u0026quot;);"
				},
				{
					"Type": "NodeText",
					"Data": "​  语句，不论程序何时运行，输出的都是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Hello World"
				},
				{
					"Type": "NodeText",
					"Data": "​，其实\""
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Hello World"
				},
				{
					"Type": "NodeText",
					"Data": "​\"就是字面常量。"
				}
			]
		},
		{
			"ID": "20230423223208-76qvcca",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-76qvcca",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "常量即程序运行期间，固定不变的量称为常量"
				},
				{
					"Type": "NodeText",
					"Data": "，比如：一个礼拜七天，一年12个月等。"
				}
			]
		},
		{
			"ID": "20230423223208-by77wqm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-by77wqm",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Demo{\n   public static void main(String[] args){\n        System.Out.println(\"hello world!\");\n        System.Out.println(100);\n        System.Out.println(3.14);\n        System.Out.println('A');\n        System.Out.println(true);\n        System.Out.println(false); \n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-zz98cgt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-zz98cgt",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "100"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "3.14"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "'A'"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "true/false"
				},
				{
					"Type": "NodeText",
					"Data": "​都是常量，将其称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "字面常量"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423223208-k2pufy8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-k2pufy8",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字面常量的分类："
				}
			]
		},
		{
			"ID": "20230423223208-9nszzie",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-9nszzie",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-ixyl93s",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-ixyl93s",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-le1p5sx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-le1p5sx",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符串常量：由\"\"括起来的，比如“12345”、“hello”、“你好”。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-a34qjvm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-a34qjvm",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-i41xaj5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-i41xaj5",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "整形常量：程序中直接写的数字(注意没有小数点)，比如：100、1000"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-gsvk7bb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223208-gsvk7bb",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-i659af7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-i659af7",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "浮点数常量：程序中直接写的小数，比如：3.14、0.49"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-gc8yk88",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223208-gc8yk88",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-c441p2g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-c441p2g",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符常量：由  单引号  括起来的当个字符，比如：‘A’、‘1’"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-rov1jso",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423223208-rov1jso",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-mjlwsgk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-mjlwsgk",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "布尔常量：只有两种true和false"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-myho8s3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230423223208-myho8s3",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-0mh7tbi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-0mh7tbi",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "空常量：null(后面了讲)\n注意：字符串、整形、浮点型、字符型以及布尔型，在Java中都称为数据类型。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-p2fidui",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223208-p2fidui",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数据类型"
				}
			]
		},
		{
			"ID": "20230423223208-0mw7qxf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-0mw7qxf",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Java中数据类型主要分为两类：基本数据类型和引用数据类型。\n基本数据类型有四类八种："
				}
			]
		},
		{
			"ID": "20230423223208-5hj73iw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-5hj73iw",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-d3towtg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-d3towtg",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-tjaeyss",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-tjaeyss",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "四类：整型、浮点型、字符型以及布尔型"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-euwumn0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-euwumn0",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-rekcypd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-rekcypd",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "八种：\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221126122309.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126122309.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-unvqpse",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-unvqpse",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				}
			]
		},
		{
			"ID": "20230423223208-kdsrkr6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423223208-kdsrkr6",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-o6re2mw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223208-o6re2mw",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-voiaxjj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-voiaxjj",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不论是在16位系统还是32位系统，int都占用4个字节，long都占8个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-nrniyq7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223208-nrniyq7",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-jgz1xbd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-jgz1xbd",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "整形和浮点型都是带有符号的"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-s4b56ku",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223208-s4b56ku",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-mu474m8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-mu474m8",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "整型默认为int型，浮点型默认为double"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-9opht3y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223208-9opht3y",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-z4b7n4w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-z4b7n4w",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符串属于引用类型，该中类型后序介绍。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-b4t5cr1",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230423223208-b4t5cr1",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230423223208-w6l5h72",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423223208-w6l5h72",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark",
							"TextMarkTextContent": "什么是字节?"
						}
					]
				},
				{
					"ID": "20230423223208-ayembe9",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230423223208-ayembe9",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-2iqhzr7",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223208-2iqhzr7",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"ID": "20230423223208-5vgtxzd",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223208-5vgtxzd",
										"updated": "20230423223208"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "字节是计算机中表示空间大小的基本单位."
										}
									]
								}
							]
						},
						{
							"ID": "20230423223208-2kixuj0",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223208-2kixuj0",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"ID": "20230423223208-5cgrqs9",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223208-5cgrqs9",
										"updated": "20230423223208"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "计算机使用二进制表示数据. 我们认为 8 个二进制位(bit) 为一个字节(Byte)."
										}
									]
								}
							]
						},
						{
							"ID": "20230423223208-pf26e1c",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223208-pf26e1c",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"ID": "20230423223208-fcen22p",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223208-fcen22p",
										"updated": "20230423223208"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "我们平时的计算机为 8GB 内存, 意思是 8G 个字节."
										}
									]
								}
							]
						},
						{
							"ID": "20230423223208-dy4hepj",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223208-dy4hepj",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"ID": "20230423223208-wqw7r22",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223208-wqw7r22",
										"updated": "20230423223208"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "其中 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "1KB = 1024 Byte"
										},
										{
											"Type": "NodeText",
											"Data": ", "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "1MB = 1024 KB"
										},
										{
											"Type": "NodeText",
											"Data": ", "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "1GB = 1024 MB"
										},
										{
											"Type": "NodeText",
											"Data": "."
										}
									]
								}
							]
						},
						{
							"ID": "20230423223208-zp4qb2v",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230423223208-zp4qb2v",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"ID": "20230423223208-7rpsvs2",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230423223208-7rpsvs2",
										"updated": "20230423223208"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "所以 8GB 相当于 80 多亿个字节."
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-kocrmar",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223208-kocrmar",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变量"
				}
			]
		},
		{
			"ID": "20230423223208-h789ng7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223208-h789ng7",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变量概念"
				}
			]
		},
		{
			"ID": "20230423223208-nh3l70c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-nh3l70c",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在程序中，除了有始终不变的常量外，有些内容可能会经常改变，比如：人的年龄、身高、成绩分数、数学函数的计算结果等，对于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "这些经常改变的内容，在Java程序中，称为变量。而数据类型就是用来定义不同种类变量的"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423223208-sqzqvnk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223208-sqzqvnk",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "语法格式"
				}
			]
		},
		{
			"ID": "20230423223208-ryps1sk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-ryps1sk",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定义变量的语法格式为："
				}
			]
		},
		{
			"ID": "20230423223208-1bp7p3p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-1bp7p3p",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10;   // 定义整形变量a，a是变量名也称为标识符，该变量中放置的值为10 \ndouble d = 3.14;\nchar c = 'A';\nboolean b = true;\n\nSystem.Out.println(a);\nSystem.Out.println(d);\nSystem.Out.println(c);\nSystem.Out.println(b);\n\na = 100;  // a是变量，a中的值是可以修改的，注意：= 在java中表示赋值，即将100交给a，a中保存的值就是100 \nSystem.Out.println(a);\n\n// 注意：在一行可以定义多个相同类型的变量 \nint a1 = 10, a2 = 20, a3 = 30;\nSystem.Out.println(a1);\nSystem.Out.println(a2);\nSystem.Out.println(a3);\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-p4a83lm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223208-p4a83lm",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "整型变量"
				}
			]
		},
		{
			"ID": "20230423223208-tcm0tn5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-tcm0tn5",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int 整型变量"
				}
			]
		},
		{
			"ID": "20230423223208-ba8i2n5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-ba8i2n5",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 方式一：在定义时给出初始值 \nint a = 10;\nSystem.Out.println(a);\n\n// 方式二：在定义时没有给初始值，但使用前必须设置初值 \nint b;\nb = 10;\nSystem.Out.println(b);\n\n// 使用方式二定义后，在使用前如果没有赋值，则编译期间会报错 \nint c;\nSystem.Out.println(c);\nc = 100;\n\n// int型变量所能表示的范围：\nSystem.Out.println(Integer.MIN_VALUE);\nSystem.Out.println(Integer.MAX_VALUE);\n\n// 注意：在定义int性变量时，所赋值不能超过int的范围\nint d = 12345678901234;  // 编译时报错，初值超过了int的范围\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-a7392qm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-a7392qm",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223208-sizkzj4",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-sizkzj4",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-qpgokmk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-qpgokmk",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-t8y5qyo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-t8y5qyo",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int不论在何种系统下都是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "4个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-msrobl3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-msrobl3",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-1xl40d2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-1xl40d2",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "推荐使用方式一定义，如果没有合适的初始值，可以设置为0"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-0g6siac",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223208-0g6siac",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-ous93a3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-ous93a3",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在给变量设置初始值时，值不能超过int的表示范围，否则会导致溢出"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-apgutuc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223208-apgutuc",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-hmrmi1n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-hmrmi1n",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "变量在使用之前必须要赋初值，否则编译报错"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-z7rz74a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423223208-z7rz74a",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-r72n0fq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-r72n0fq",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int的包装类型为 Integer(可以理解为int的加强版)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-rjpgdjv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-rjpgdjv",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "long 长整型变量"
				}
			]
		},
		{
			"ID": "20230423223208-nbohe7b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-nbohe7b",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10;\nlong b = 10;   // long定义的长整型变量\n\nlong c = 10L; // 为了区分int和long类型，一般建议：long类型变量的初始值之后加L或者l\nlong d = 10l; // 一般更加以加大写L，因为小写l与1不好区分\n\n// long型变量所能表示的范围：这个数据范围远超过    int 的表示范围. 足够绝大部分的工程场景使用. \nSystem.Out.println(Long.MIN_VALUE);\nSystem.Out.println(Long.MAX_VALUE);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-xf2pucf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-xf2pucf",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223208-n0rkknh",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-n0rkknh",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-87w7olv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-87w7olv",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-7wxu70p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-7wxu70p",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "长整型变量的初始值后加L或者l，推荐加L"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-obohzaw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-obohzaw",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-x4479yb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-x4479yb",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "长整型不论在那个系统下都占"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "8个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-ttbwhqn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223208-ttbwhqn",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-bi3rmn9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-bi3rmn9",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "长整型的表示范围为："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "inline-math",
									"TextMarkInlineMathContent": "-2^{31}"
								},
								{
									"Type": "NodeText",
									"Data": " ~ "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "inline-math",
									"TextMarkInlineMathContent": "2^{31}-1"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-jwcc47v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223208-jwcc47v",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-roo9zr6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-roo9zr6",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "long的包装类型为Long(可以理解为long的加强版)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-dszn04v",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-dszn04v",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "short 短整型变量"
				}
			]
		},
		{
			"ID": "20230423223208-9al7sbx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-9al7sbx",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "short a = 10;\nSystem.Out.println(a);\n\n// short型变量所能表示的范围：\nSystem.Out.println(Short.MIN_VALUE); \nSystem.Out.println(Short.MAX_VALUE);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-lfgoe18",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-lfgoe18",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223208-xrs7j9i",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-xrs7j9i",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-k88e4kv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-k88e4kv",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-x0ubjra",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-x0ubjra",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short在任何系统下都占"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "2个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-9qf09pr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-9qf09pr",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-813311u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-813311u",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short的表示范围为：-32768 ~ 32767"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-ovna4ar",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223208-ovna4ar",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-tk68kwv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-tk68kwv",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用时注意不要超过范围(一般使用比较少)"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-mseoi8y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223208-mseoi8y",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-fy130q1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-fy130q1",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short的包装类型为Short"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-s3gft92",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-s3gft92",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字节型变量"
				}
			]
		},
		{
			"ID": "20230423223208-la1ruve",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-la1ruve",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "byte b = 10;\nSystem.Out.println(b);\n\n// byte型变量所能表示的范围：\nSystem.Out.println(Byte.MIN_VALUE); \nSystem.Out.println(Byte.MAX_VALUE);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-h8wk1fw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-h8wk1fw",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223208-1wfcpj0",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-1wfcpj0",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-ta57o4m",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-ta57o4m",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-11qckji",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-11qckji",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "byte在任何系统下都占"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "1个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-v95mwyc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-v95mwyc",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-wqe7ydc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-wqe7ydc",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "byte的范围是：-128 ~ 127"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-qflnp0d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223208-qflnp0d",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-w3pgak8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-w3pgak8",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字节的包装类型为Byte"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-x9gqoxl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-x9gqoxl",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "思考：byte、short、int、long都可以定义整形变量，为什么要给出4中不同类型呢？"
				}
			]
		},
		{
			"ID": "20230423223208-8rcfyti",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-8rcfyti",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这就好比买衣服时的尺码,不同的人适合不同的尺码。"
				}
			]
		},
		{
			"ID": "20230423223208-jkjnjwk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223208-jkjnjwk",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "浮点型变量"
				}
			]
		},
		{
			"ID": "20230423223208-4h814a4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-4h814a4",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "double双精度浮点型"
				}
			]
		},
		{
			"ID": "20230423223208-fnhzjix",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-fnhzjix",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "double d = 3.14; \nSystem.Out.println(d);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-1i5wye1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-1i5wye1",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "神奇的代码一："
				}
			]
		},
		{
			"ID": "20230423223208-4dhivz4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-4dhivz4",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 1; \nint b = 2;\nSystem.out.println(a / b);   // 输出 0.5 吗? 不会 结果为0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-vlk1jhm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-vlk1jhm",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在 Java 中, int 除以 int 的值仍然是 int(会直接舍弃小数部分)"
				},
				{
					"Type": "NodeText",
					"Data": "。如果想得到 0.5, 需要使用 double 类型计算."
				}
			]
		},
		{
			"ID": "20230423223208-pxngzy7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-pxngzy7",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "double a = 1.0; \ndouble b = 2.0;\nSystem.out.println(a / b);   // 输出0.5\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-tpav5dq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-tpav5dq",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "神奇的代码二："
				}
			]
		},
		{
			"ID": "20230423223208-y4vitog",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-y4vitog",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "double num = 1.1;\nSystem.out.println(num * num);  // 输出1.21吗？ \n\n// 执行结果\n1.2100000000000002\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-nqcuyno",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-nqcuyno",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223208-xsurt8g",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-xsurt8g",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-9d5u8vt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-9d5u8vt",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-rchkb3g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-rchkb3g",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "double在任何系统下都占"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "8个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-0lvjlzr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-0lvjlzr",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-61nekuq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-61nekuq",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "浮点数与整数在内存中的存储方式不同，不能单纯使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "inline-math",
									"TextMarkInlineMathContent": "2^n"
								},
								{
									"Type": "NodeText",
									"Data": " 的形式来计算"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-anaur91",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223208-anaur91",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-17hlpqf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-17hlpqf",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "double的包装类型为Double"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-l3jl9ip",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223208-l3jl9ip",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-m7frv12",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-m7frv12",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "double 类型的内存布局遵守 IEEE 754 标准(和C语言一样), 尝试使用有限的内存空间表示可能无限的小数, 势必\n会存在一定的精度误差，因此浮点数是个近似值，并不是精确值。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-zlbqql8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-zlbqql8",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "float 单精度浮点型"
				}
			]
		},
		{
			"ID": "20230423223208-e1lrudj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-e1lrudj",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "float num = 1.0f;    // 写作    1.0F 也可以 \nSystem.out.println(num);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-kyugxt7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-kyugxt7",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ﬂoat 类型在 Java 中占四个字节, 同样遵守 IEEE 754 标准. 由于表示的数据精度范围较小, 一般在工程上用到浮点数都优先考虑 double, 不太推荐使用 ﬂoat. ﬂoat的包装类型为Float。"
				}
			]
		},
		{
			"ID": "20230423223208-7vz07qi",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223208-7vz07qi",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符型变量"
				}
			]
		},
		{
			"ID": "20230423223208-spqbnxo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-spqbnxo",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "char c1 = 'A';    // 大写字母 \nchar c2 = '1';    // 数字字符\n\nSystem.out.println(c1);\nSystem.out.println(c2);\n\n// 注意：java中的字符可以存放整形 \nchar c3 = '帅';\nSystem.out.println(c3);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-ao806ze",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-ao806ze",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项:"
				}
			]
		},
		{
			"ID": "20230423223208-jk08200",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-jk08200",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-mznex8v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-mznex8v",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-kwfcbt8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-kwfcbt8",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java 中使用  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": " 单引号    + 单个字母"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的形式表示字符字面值."
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-g4ktyg4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-g4ktyg4",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-kpmdqes",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-kpmdqes",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "计算机中的字符本质上是一个整数. 在 C 语言中使用 ASCII 表示字符, 而 Java 中使用 Unicode 表示字符. 因此一个字符占用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "两个字节"
								},
								{
									"Type": "NodeText",
									"Data": ", 表示的字符种类更多, 包括中文."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-vncwkux",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-vncwkux",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "char ch = '呵';\nSystem.out.println(ch);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-ouauaga",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-ouauaga",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行 javac 的时候可能出现以下错误:"
				}
			]
		},
		{
			"ID": "20230423223208-5yud77i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-5yud77i",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Test.java:3: 错误: 未结束的字符文字 \n       char ch = '鍛?';\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-d9nnar6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-d9nnar6",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时我们在执行 javac 时加上 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-encoding UTF-8"
				},
				{
					"Type": "NodeText",
					"Data": "​ 选项即可"
				}
			]
		},
		{
			"ID": "20230423223208-fy2wpri",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-fy2wpri",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "javac -encoding UTF-8 Test.java\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-5wbr3aq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-5wbr3aq",
				"updated": "20230423223227"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于字符编码方式的讨论, 参见\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://zhuanlan.zhihu.com/p/35172335",
					"TextMarkTextContent": "https://zhuanlan.zhihu.com/p/35172335"
				}
			]
		},
		{
			"ID": "20230423223208-9o4ysqn",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-9o4ysqn",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-6lqwpv6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223208-6lqwpv6",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-ws67dv8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-ws67dv8",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "char的包装类型为Character"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-25s35pg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223208-25s35pg",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "布尔型变量"
				}
			]
		},
		{
			"ID": "20230423223208-zu6a24v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-zu6a24v",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "布尔类型常用来表示真假，在现实生活中也是经常出现的，比如：听说xxx同学买彩票中了一个亿...，听到后估计大\n部分人第一反应就是：我x，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "真的假的"
				},
				{
					"Type": "NodeText",
					"Data": "？"
				}
			]
		},
		{
			"ID": "20230423223208-p1e1uto",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-p1e1uto",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "boolean b = true; \nSystem.out.println(b);\n\nb = false;\nSystem.out.println(b);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-mh1oi6c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-mh1oi6c",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223208-qh0t9ai",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-qh0t9ai",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-q25124i",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-q25124i",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-zna1qfv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-zna1qfv",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "boolean 类型的变量只有两种取值, true 表示真, false 表示假."
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-wdii1gr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-wdii1gr",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-smewqgu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-smewqgu",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java 的 boolean 类型和 int 不能相互转换, "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "不存在 1 表示 true, 0 表示 false 这样的用法"
								},
								{
									"Type": "NodeText",
									"Data": "."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-vg60cwo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-vg60cwo",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "boolean value = true;\nSystem.out.println(value + 1); \n// 代码编译会出现如下错误\nTest.java:4: 错误: 二元运算符    '+' 的操作数类型错误 \n       System.out.println(value + 1);\n                                ^ \n 第一个类型:  boolean\n 第二个类型: int \n 1 个错误\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-8aql45p",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-8aql45p",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-0muhpj3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223208-0muhpj3",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-m6552ef",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-m6552ef",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Java虚拟机规范中，并没有明确规定boolean占几个字节，也没有专门用来处理boolean的字节码指令，在 Oracle公司的虚拟机实现中，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "boolean占1个字节"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-5mp21k1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223208-5mp21k1",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-o01fdjk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-o01fdjk",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "boolean的包装类型为Boolean。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-9qarqlk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223208-9qarqlk",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类型转换"
				}
			]
		},
		{
			"ID": "20230423223208-ij2tcu4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-ij2tcu4",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 作为一个强类型编程语言, 当不同类型之间的变量相互赋值的时候, 会有教严格的校验."
				}
			]
		},
		{
			"ID": "20230423223208-5v8y792",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-5v8y792",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10;\nlong b = 100L;\n\nb = a;   // 可以通过编译 \na = b;   // 编译失败\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-cn3bnlo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-cn3bnlo",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Java中，当参与运算数据类型不一致时，就会进行类型转换。Java中类型转换主要分为两类：自动类型转换(隐式)\n和  强制类型转换(显式)。"
				}
			]
		},
		{
			"ID": "20230423223208-c4p5q23",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-c4p5q23",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动类型转换(隐式)"
				}
			]
		},
		{
			"ID": "20230423223208-hhqlhm4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-hhqlhm4",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自动类型转换即："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "代码不需要经过任何处理，在代码编译时，编译器会自动进行处理。特点：数据范围小的转为数据范围大的时会自动进行"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423223208-3pg4kql",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-3pg4kql",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "System.Out.println(1024);   // 整型默认情况下是int \nSystem.Out.println(3.14);   // 浮点型默认情况下是double\n\nint a = 100; \nlong b = 10L;\nb = a;   // a和b都是整形，a的范围小，b的范围大，当将a赋值给b时，编译器会自动将a提升为long类型，然后赋值 \na = b;   // 编译报错，long的范围比int范围大，会有数据丢失，不安全\n\nfloat f = 3.14F; \ndouble d = 5.12;\nd = f; // 编译器会将f转换为double，然后进行赋值\nf = d; // double表示数据范围大，直接将float交给double会有数据丢失，不安全 \n\nbyte b1 = 100;  // 编译通过，100没有超过byte的范围，编译器隐式将100转换为byte\nbyte b2 = 257;  // 编译失败，257超过了byte的数据范围，有数据丢失\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-na93max",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-na93max",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "强制类型转换(显式)"
				}
			]
		},
		{
			"ID": "20230423223208-mei70p0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-mei70p0",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "强制类型转换：当进行操作时，代码需要经过一定的格式处理，不能自动完成。特点：数据范围大的到数据范围小的。"
				}
			]
		},
		{
			"ID": "20230423223208-2maciph",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-2maciph",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10; \nlong b = 100L;\nb = a;        // int--\u003elong，数据范围由小到大，隐式转换\na = (int)b;   // long--\u003eint, 数据范围由大到小，需要强转，否则编译失败 \n\nfloat f = 3.14F;\ndouble d = 5.12;\nd = f;        // float--\u003edouble，数据范围由小到大，隐式转换\nf = (float)d; // double--\u003efloat, 数据范围由大到小，需要强转，否则编译失败 \n\na = d;   // 报错，类型不兼容\na = (int)d;   // double没有int表示的数据范围大，需要强转，小数点之后全部丢弃 \n\nbyte b1 = 100;        // 100默认为int，没有超过byte范围，隐式转换\nbyte b2 = (byte)257;  // 257默认为int，超过byte范围，需要显示转换，否则报错 \n\nboolean flag = true;\na = flag;   // 编译失败：类型不兼容 \nflag = a;   // 编译失败：类型不兼容\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-zxf46ji",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-zxf46ji",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20230423223208-xu4km16",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-xu4km16",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-obwirbk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-obwirbk",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-70doncs",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-70doncs",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不同数字类型的变量之间赋值, 表示范围更小的类型能隐式转换成范围较大的类型"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-3b8x97q",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-3b8x97q",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-qoj57c5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-qoj57c5",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果需要把范围大的类型赋值给范围小的, 需要强制类型转换, 但是可能精度丢失"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-5cdrhfx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223208-5cdrhfx",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-bqf51im",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-bqf51im",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将一个字面值常量进行赋值的时候, Java 会自动针对数字范围进行检查"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-xezvps3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223208-xezvps3",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-40hfgcp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-40hfgcp",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "强制类型转换不一定能成功，不相干的类型不能互相转换"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-8n2g077",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223208-8n2g077",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类型提升"
				}
			]
		},
		{
			"ID": "20230423223208-0x9zwhd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-0x9zwhd",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "不同类型的数据之间相互运算时，数据类型小的会被提升到数据类型大的。"
				}
			]
		},
		{
			"ID": "20230423223208-s95xrbh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-s95xrbh",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. int与long之间：int会被提升为long"
				}
			]
		},
		{
			"ID": "20230423223208-0w5mb89",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-0w5mb89",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10; \nlong b = 20;\nint c = a + b;    // 编译出错: a + b==》int + long--\u003e long + long 赋值给int时会丢失数据 \nlong d = a + b;   // 编译成功：a + b==\u003eint + long---\u003elong + long 赋值给long  \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-qaxtmh3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223208-qaxtmh3",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. byte与byte的运算"
				}
			]
		},
		{
			"ID": "20230423223208-xpuwwu1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-xpuwwu1",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "byte a = 10;\nbyte b = 20;\nbyte c = a + b; \nSystem.out.println(c);\n// 编译报错\nTest.java:5: 错误: 不兼容的类型: 从int转换到byte可能会有损失 \n               byte c = a + b;\n\t\t\t\t          ^\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-mo56f45",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-mo56f45",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结论: byte 和 byte 都是相同类型, 但是出现编译报错. 原因是, 虽然 a 和 b 都是 byte, 但是计算 a + b 会先将 a 和 b 都提升成 int, 再进行计算, 得到的结果也是 int, 这是赋给 c, 就会出现上述错误.\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "由于计算机的 CPU 通常是按照 4 个字节为单位从内存中读写数据. 为了硬件上实现方便, 诸如 byte 和 short 这种低于 4 个字节的类型, 会先提升成 int, 再参与计算."
				}
			]
		},
		{
			"ID": "20230423223208-090u6v0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-090u6v0",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正确的写法:"
				}
			]
		},
		{
			"ID": "20230423223208-qw20r97",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-qw20r97",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "byte a = 10;\nbyte b = 20;\nbyte c = (byte)(a + b); \nSystem.out.println(c);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-ee3l3s5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-ee3l3s5",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【类型提升小结:】"
				}
			]
		},
		{
			"ID": "20230423223208-n3afou5",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-n3afou5",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-z6or8zi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-z6or8zi",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-1lwhyuo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-1lwhyuo",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不同类型的数据混合运算, 范围小的会提升成范围大的."
								}
							]
						}
					]
				},
				{
					"ID": "20230423223208-ytqp2g2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-ytqp2g2",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-u3a59gl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-u3a59gl",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于 short, byte 这种比 4 个字节小的类型, 会先提升成 4 个字节的 int , 再运算."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-6oah08d",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223208-6oah08d",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字符串类型"
				}
			]
		},
		{
			"ID": "20230423223208-7f41ihv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-7f41ihv",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Java中使用String类定义字符串类型，比如"
				}
			]
		},
		{
			"ID": "20230423223208-njr6i44",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-njr6i44",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) { \n   String s1 = \"hello\";\n   String s2 = \" world\";\n   System.out.println(s1);\n   System.out.println(s2);\n   System.out.println(s1+s2);   // s1+s2表示：将s1和s2进行拼接 \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-0as0t99",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-0as0t99",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在有些情况下，需要将字符串和整形数字之间进行转换："
				}
			]
		},
		{
			"ID": "20230423223208-vllnc1k",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-vllnc1k",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-p8crjl2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223208-p8crjl2",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-jwltxeo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-jwltxeo",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int 转成 String"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-1mq0l74",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-1mq0l74",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int num = 10; \n\n// 方法1\nString str1 = num + \"\";  \n\n// 方法2\nString str2 = String.valueOf(num);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-07anoso",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223208-07anoso",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"ID": "20230423223208-2my8qlb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223208-2my8qlb",
						"updated": "20230423223208"
					},
					"Children": [
						{
							"ID": "20230423223208-oxcqpl2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223208-oxcqpl2",
								"updated": "20230423223208"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "String 转成 int"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223208-ajh4kqb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223208-ajh4kqb",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String str = \"100\";\nint num = Integer.parseInt(str);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223208-69k1zo1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223208-69k1zo1",
				"updated": "20230423223208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本节对只是对字符串进行简单的介绍，大家能够正常使用即可，后序会详细给大家介绍。"
				}
			]
		},
		{
			"ID": "20230423222915-ogibgyu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-ogibgyu",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个数组, 让数组升序 (降序) 排序."
				}
			]
		},
		{
			"ID": "20230423222915-3oviks6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-3oviks6",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "算法思路"
				},
				{
					"Type": "NodeText",
					"Data": "\n假设排升序："
				}
			]
		},
		{
			"ID": "20230423222915-dcn1suu",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423222915-dcn1suu",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"ID": "20230423222915-ndl3f82",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423222915-ndl3f82",
						"updated": "20230423222915"
					},
					"Children": [
						{
							"ID": "20230423222915-o0twccr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423222915-o0twccr",
								"updated": "20230423222915"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将数组中相邻元素从前往后依次进行比较，如果前一个元素比后一个元素大，则交换，一趟下来后最大元素就在数组的末尾"
								}
							]
						}
					]
				},
				{
					"ID": "20230423222915-gz24dda",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423222915-gz24dda",
						"updated": "20230423222915"
					},
					"Children": [
						{
							"ID": "20230423222915-h5s7mef",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423222915-h5s7mef",
								"updated": "20230423222915"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "依次从上上述过程，直到数组中所有的元素都排列好\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221204152016.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204152016.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423222915-xcg13zr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423222915-xcg13zr",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class array{  \n    public static void main(String[] args) {  \n        int[] arr = {9, 5, 2, 7 , 6,10 ,5};  \n        System.out.println(Arrays.toString(arr));  \n        bubbleSort(arr);  \n        System.out.println(Arrays.toString(arr));  \n    }  \n  \n    public static void bubbleSort(int[] arr){  \n        for( int i = 0;  i \u003c arr.length ; i++){  \n            for(int j = 1 ; j \u003c arr.length - i ; j++ ){  \n                if(arr[j] \u003c arr[j-1]){  \n                    int tmp = arr[j];  \n                    arr[j] = arr[j-1];  \n                    arr[j-1] = tmp;  \n                }  \n            }  \n        }  \n    }  \n}\n\n//执行结果\n[9, 5, 2, 7, 6, 10, 5]\n[2, 5, 5, 6, 7, 9, 10]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423222915-xw46ejf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-xw46ejf",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "冒泡排序性能较低. Java 中内置了更高效的排序算法"
				}
			]
		},
		{
			"ID": "20230423222915-8344al5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423222915-8344al5",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n    int[] arr = {9, 5, 2, 7};  \n    Arrays.sort(arr);  \n    System.out.println(Arrays.toString(arr));  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423222915-zktk3fh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-zktk3fh",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Arrays.sort"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的具体实现算法, 我们在后面的排序算法课上再详细介绍. 到时候我们会介绍很多种常见排序算法."
				}
			]
		},
		{
			"ID": "20230423222915-lmxgity",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423222915-lmxgity",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组逆序"
				}
			]
		},
		{
			"ID": "20230423222915-2yp72ny",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-2yp72ny",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个数组, 将里面的元素逆序排列."
				}
			]
		},
		{
			"ID": "20230423222915-lg96tbx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-lg96tbx",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "思路"
				}
			]
		},
		{
			"ID": "20230423222915-ylmk2rw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423222915-ylmk2rw",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"ID": "20230423222915-bmruwwl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423222915-bmruwwl",
						"updated": "20230423222915"
					},
					"Children": [
						{
							"ID": "20230423222915-gydjfsv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423222915-gydjfsv",
								"updated": "20230423222915"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设定两个下标, 分别指向第一个元素和最后一个元素. 交换两个位置的元素."
								}
							]
						}
					]
				},
				{
					"ID": "20230423222915-e8okdut",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423222915-e8okdut",
						"updated": "20230423222915"
					},
					"Children": [
						{
							"ID": "20230423222915-k7u3fh3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423222915-k7u3fh3",
								"updated": "20230423222915"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "然后让前一个下标自增, 后一个下标自减, 循环继续即可."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423222915-ifpe9zc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-ifpe9zc",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例"
				}
			]
		},
		{
			"ID": "20230423222915-lvdi3da",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423222915-lvdi3da",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class array{  \n    public static void main(String[] args) {  \n        int[] arr = {1, 2, 3, 4 ,5,6,7};  \n        System.out.println(Arrays.toString(arr));  \n        reverse(arr);  \n        System.out.println(Arrays.toString(arr));  \n    }  \n  \n    public static void reverse(int[] arr){  \n        int left = 0 ;  \n        int right = arr.length-1;  \n        while(left \u003c right){ //left ==right 时说明已经到中间位置了，无需交换了  \n            int temp = arr[left];  \n            arr[left] = arr[right];  \n            arr[right] = temp;  \n            left++;  \n            right--;  \n        }  \n    }  \n}\n\n//运行结果\n[1, 2, 3, 4, 5, 6, 7]\n[7, 6, 5, 4, 3, 2, 1]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423222915-mak9x7l",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423222915-mak9x7l",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组"
				}
			]
		},
		{
			"ID": "20230423222915-qmoxwlm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-qmoxwlm",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组本质上也就是一维数组, 只不过每个元素又是一个一维数组."
				}
			]
		},
		{
			"ID": "20230423222915-t2i2jgz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-t2i2jgz",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本语法"
				}
			]
		},
		{
			"ID": "20230423222915-c6u0evo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423222915-c6u0evo",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "数据类型[][] 数组名称 = new 数据类型 [行数][列数] { 初始化数据 };\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423222915-et6eynj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-et6eynj",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码实例："
				}
			]
		},
		{
			"ID": "20230423222915-5bo93m7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423222915-5bo93m7",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " int[][] arr = {  \n\t\t{1, 2, 3, 4},  \n\t\t{5, 6, 7, 8},  \n\t\t{9, 10, 11, 12}  \n};  \nfor (int row = 0; row \u003c arr.length; row++) {  \n\tfor (int col = 0; col \u003c arr[row].length; col++) {  \n\t\tSystem.out.printf(\"%d\\t\", arr[row][col]);  \n\t}  \n\tSystem.out.println(\"\");  \n}\n\n// 执行结果\n1   2   3   4\n5   6   7   8\n9   10  11  12\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423222915-l6kvoil",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423222915-l6kvoil",
				"updated": "20230423222915"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组的用法和一维数组并没有明显差别, 因此我们不再赘述.\n同理, 还存在 \"三维数组\", \"四维数组\" 等更复杂的数组, 只不过出现频率都很低."
				}
			]
		},
		{
			"ID": "20221128083853-pcjyvr9",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221128083853-pcjyvr9",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字面常量"
				}
			]
		},
		{
			"ID": "20221128083853-47r43cw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083853-47r43cw",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上节课HelloWorld程序中， "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "System.Out.println(\u0026quot;Hello World\u0026quot;);"
				},
				{
					"Type": "NodeText",
					"Data": "  语句，不论程序何时运行，输出的都是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Hello World"
				},
				{
					"Type": "NodeText",
					"Data": "，其实\""
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Hello World"
				},
				{
					"Type": "NodeText",
					"Data": "\"就是字面常量。"
				}
			]
		},
		{
			"ID": "20221128083853-8qsrb9z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083853-8qsrb9z",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "常量即程序运行期间，固定不变的量称为常量"
				},
				{
					"Type": "NodeText",
					"Data": "，比如：一个礼拜七天，一年12个月等。"
				}
			]
		},
		{
			"ID": "20221128083853-pbf9y5t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221128083853-pbf9y5t",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Demo{\n   public static void main(String[] args){\n        System.Out.println(\"hello world!\");\n        System.Out.println(100);\n        System.Out.println(3.14);\n        System.Out.println('A');\n        System.Out.println(true);\n        System.Out.println(false); \n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221128083853-4no97zo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083853-4no97zo",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其中："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "100"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "3.14"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "'A'"
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "true/false"
				},
				{
					"Type": "NodeText",
					"Data": "都是常量，将其称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "字面常量"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20221128083907-yucyhxg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083907-yucyhxg"
			}
		},
		{
			"ID": "20221128083853-xdilw8c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083853-xdilw8c",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "字面常量的分类："
				}
			]
		},
		{
			"ID": "20221128083853-1rh58rn",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221128083853-1rh58rn",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"ID": "20221128083853-mi5qu50",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221128083853-mi5qu50",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-4gmdquj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-4gmdquj",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符串常量：由\"\"括起来的，比如“12345”、“hello”、“你好”。"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-ah6k8xr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221128083853-ah6k8xr",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-bobam1e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-bobam1e",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "整形常量：程序中直接写的数字(注意没有小数点)，比如：100、1000"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-ixu1i0o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20221128083853-ixu1i0o",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-wxb8d1q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-wxb8d1q",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "浮点数常量：程序中直接写的小数，比如：3.14、0.49"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-zqf1g9w",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20221128083853-zqf1g9w",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-w784lf5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-w784lf5",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符常量：由  单引号  括起来的当个字符，比如：‘A’、‘1’"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-t0d77t5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20221128083853-t0d77t5",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-8wsw9ij",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-8wsw9ij",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "布尔常量：只有两种true和false"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-c9ef15y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20221128083853-c9ef15y",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-5z2ltbg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-5z2ltbg",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "空常量：null(后面了讲)\n注意：字符串、整形、浮点型、字符型以及布尔型，在Java中都称为数据类型。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221128083917-t2omwks",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083917-t2omwks"
			}
		},
		{
			"ID": "20221128083853-7dp171w",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221128083853-7dp171w",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数据类型"
				}
			]
		},
		{
			"ID": "20221128083853-iou2y5n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083853-iou2y5n",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Java中数据类型主要分为两类：基本数据类型和引用数据类型。\n基本数据类型有四类八种："
				}
			]
		},
		{
			"ID": "20221128083853-vab7lxj",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221128083853-vab7lxj",
				"updated": "20230423223104"
			},
			"Children": [
				{
					"ID": "20221128083853-4nkwqd0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221128083853-4nkwqd0",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-q4eezng",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-q4eezng",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "四类：整型、浮点型、字符型以及布尔型"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-tv50h5s",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221128083853-tv50h5s",
						"updated": "20230423223104"
					},
					"Children": [
						{
							"ID": "20221128083853-j4jyd9n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-j4jyd9n",
								"updated": "20230423223104"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "八种：\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221126122309"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/Pasted image 20221126122309-20221128083925-tlevvjb.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n注意："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221128083853-1n5aaqx",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221128083853-1n5aaqx",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"ID": "20221128083853-tqyfrey",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221128083853-tqyfrey",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-jp2ncym",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-jp2ncym",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不论是在16位系统还是32位系统，int都占用4个字节，long都占8个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-sd7xhaj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221128083853-sd7xhaj",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-belz3lz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-belz3lz",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "整形和浮点型都是带有符号的"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-mc7e5a7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221128083853-mc7e5a7",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-csea581",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-csea581",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "整型默认为int型，浮点型默认为double"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-ty5skkj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221128083853-ty5skkj",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-a27p7vo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-a27p7vo",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "字符串属于引用类型，该中类型后序介绍。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221128083853-ax28y81",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221128083853-ax28y81",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221128083853-yqxpbge",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221128083853-yqxpbge",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark",
							"TextMarkTextContent": "什么是字节?"
						}
					]
				},
				{
					"ID": "20221128083853-cwxbfcd",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221128083853-cwxbfcd",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-5q31ng1",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221128083853-5q31ng1",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"ID": "20221128083853-j9jpabi",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221128083853-j9jpabi",
										"updated": "20221128083853"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "字节是计算机中表示空间大小的基本单位."
										}
									]
								}
							]
						},
						{
							"ID": "20221128083853-0ar6awx",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221128083853-0ar6awx",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"ID": "20221128083853-lkguyb9",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221128083853-lkguyb9",
										"updated": "20221128083853"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "计算机使用二进制表示数据. 我们认为 8 个二进制位(bit) 为一个字节(Byte)."
										}
									]
								}
							]
						},
						{
							"ID": "20221128083853-98xuzmu",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221128083853-98xuzmu",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"ID": "20221128083853-vu1sv3f",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221128083853-vu1sv3f",
										"updated": "20221128083853"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "我们平时的计算机为 8GB 内存, 意思是 8G 个字节."
										}
									]
								}
							]
						},
						{
							"ID": "20221128083853-o226ol9",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221128083853-o226ol9",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"ID": "20221128083853-zbrwkw2",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221128083853-zbrwkw2",
										"updated": "20221128083853"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "其中 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "1KB = 1024 Byte"
										},
										{
											"Type": "NodeText",
											"Data": ", "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "1MB = 1024 KB"
										},
										{
											"Type": "NodeText",
											"Data": ", "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "1GB = 1024 MB"
										},
										{
											"Type": "NodeText",
											"Data": "."
										}
									]
								}
							]
						},
						{
							"ID": "20221128083853-ahbb7o4",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221128083853-ahbb7o4",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"ID": "20221128083853-vbe5nzg",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221128083853-vbe5nzg",
										"updated": "20221128083853"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "所以 8GB 相当于 80 多亿个字节."
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221128083853-edcqj9a",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221128083853-edcqj9a",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变量"
				}
			]
		},
		{
			"ID": "20221128083853-g1ywaoi",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221128083853-g1ywaoi",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变量概念"
				}
			]
		},
		{
			"ID": "20221128083853-fv71asa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083853-fv71asa",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在程序中，除了有始终不变的常量外，有些内容可能会经常改变，比如：人的年龄、身高、成绩分数、数学函数的计算结果等，对于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "这些经常改变的内容，在Java程序中，称为变量。而数据类型就是用来定义不同种类变量的"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20221128083853-a8l2u1o",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221128083853-a8l2u1o",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "语法格式"
				}
			]
		},
		{
			"ID": "20221128083853-0ybazmi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083853-0ybazmi",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定义变量的语法格式为："
				}
			]
		},
		{
			"ID": "20221128083853-whyd0ih",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221128083853-whyd0ih",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10;   // 定义整形变量a，a是变量名也称为标识符，该变量中放置的值为10 \ndouble d = 3.14;\nchar c = 'A';\nboolean b = true;\n\nSystem.Out.println(a);\nSystem.Out.println(d);\nSystem.Out.println(c);\nSystem.Out.println(b);\n\na = 100;  // a是变量，a中的值是可以修改的，注意：= 在java中表示赋值，即将100交给a，a中保存的值就是100 \nSystem.Out.println(a);\n\n// 注意：在一行可以定义多个相同类型的变量 \nint a1 = 10, a2 = 20, a3 = 30;\nSystem.Out.println(a1);\nSystem.Out.println(a2);\nSystem.Out.println(a3);\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221128083938-dxnl03t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083938-dxnl03t"
			}
		},
		{
			"ID": "20221128083853-9v0lf4m",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221128083853-9v0lf4m",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "整型变量"
				}
			]
		},
		{
			"ID": "20221128083853-syco5rf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221128083853-syco5rf",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "int 整型变量"
				}
			]
		},
		{
			"ID": "20221128083853-l5gp7wb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221128083853-l5gp7wb",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 方式一：在定义时给出初始值 \nint a = 10;\nSystem.Out.println(a);\n\n// 方式二：在定义时没有给初始值，但使用前必须设置初值 \nint b;\nb = 10;\nSystem.Out.println(b);\n\n// 使用方式二定义后，在使用前如果没有赋值，则编译期间会报错 \nint c;\nSystem.Out.println(c);\nc = 100;\n\n// int型变量所能表示的范围：\nSystem.Out.println(Integer.MIN_VALUE);\nSystem.Out.println(Integer.MAX_VALUE);\n\n// 注意：在定义int性变量时，所赋值不能超过int的范围\nint d = 12345678901234;  // 编译时报错，初值超过了int的范围\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221128083853-0o8hkvc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083853-0o8hkvc",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项："
				}
			]
		},
		{
			"ID": "20221128083853-sbpn61m",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221128083853-sbpn61m",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"ID": "20221128083853-o1znuhd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221128083853-o1znuhd",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-k131w8n",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-k131w8n",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int不论在何种系统下都是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "4个字节"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-rdvoa8n",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221128083853-rdvoa8n",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-l4p2f3v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-l4p2f3v",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "推荐使用方式一定义，如果没有合适的初始值，可以设置为0"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-y9vf02g",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20221128083853-y9vf02g",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-pzrex4h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-pzrex4h",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在给变量设置初始值时，值不能超过int的表示范围，否则会导致溢出"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-lnxgmg9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20221128083853-lnxgmg9",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-a2qas8p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-a2qas8p",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "变量在使用之前必须要赋初值，否则编译报错"
								}
							]
						}
					]
				},
				{
					"ID": "20221128083853-8jp9ig7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20221128083853-8jp9ig7",
						"updated": "20221128083853"
					},
					"Children": [
						{
							"ID": "20221128083853-1b5ymkt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221128083853-1b5ymkt",
								"updated": "20221128083853"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int的包装类型为 Integer(可以理解为int的加强版)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221128083945-61qswar",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221128083945-61qswar"
			}
		},
		{
			"ID": "20221128083853-cvsb9yf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221128083853-cvsb9yf",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "long 长整型变量"
				}
			]
		},
		{
			"ID": "20221128083853-6wks9kj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221128083853-6wks9kj",
				"updated": "20221128083853"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int a = 10;\nlong b = 10;   // long定义的长整型变量\n\nlong c = 10L; // 为了区分int和long类型，一般建议：long类型变量的初始值之后加L或者l\nlong d = 10l; // 一般更加以加大写L，因为小写l与1不好区分\n\n// long型变量所能表示的范围：这个数据范围远超过    int 的表示范围. 足够绝大部分的工程场景使用. \nSystem.Out.println(Long.MIN_VALUE);\nSystem.Out.println(Long.MAX_VALUE);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}