{
	"ID": "20230423223454-xpbtu7j",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230423223454-xpbtu7j",
		"title": "数组",
		"updated": "20230423223505"
	},
	"Children": [
		{
			"ID": "20230423223505-tctlh9j",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223505-tctlh9j",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的基本概念"
				}
			]
		},
		{
			"ID": "20230423223505-xm00l5j",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-xm00l5j",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的创建及初始化"
				}
			]
		},
		{
			"ID": "20230423223505-bwvd20y",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223505-bwvd20y",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的创建"
				}
			]
		},
		{
			"ID": "20230423223505-jwoefoy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-jwoefoy",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "T[] 数组名    = new T[N];\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-rcx9g4p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-rcx9g4p",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "T"
				},
				{
					"Type": "NodeText",
					"Data": "​：表示数组中存放元素的类型\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "T[]"
				},
				{
					"Type": "NodeText",
					"Data": "​：表示数组的类型\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "N"
				},
				{
					"Type": "NodeText",
					"Data": "​：表示数组的长度"
				}
			]
		},
		{
			"ID": "20230423223505-revzydo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-revzydo",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array1 = new int[10];       // 创建一个可以容纳10个int类型元素的数组 \ndouble[] array2 = new double[5];  // 创建一个可以容纳5个double类型元素的数组 \nString[] array3 = new double[3];  // 创建一个可以容纳3个字符串元素的数组\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-dej2ffa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223505-dej2ffa",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的初始化"
				}
			]
		},
		{
			"ID": "20230423223505-abe6sca",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-abe6sca",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的初始化主要分为动态初始化以及静态初始化。"
				}
			]
		},
		{
			"ID": "20230423223505-m4p6msm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223505-m4p6msm",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-rllukt7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223505-rllukt7",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-8mxa9i4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-8mxa9i4",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "动态初始化：在创建数组时，直接指定数组中元素的个数"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-yqoxkkv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-yqoxkkv",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array = new int[10];\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-e82pci1",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223505-e82pci1",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-laobwlh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223505-laobwlh",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-qxinkj4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-qxinkj4",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态初始化：在创建数组时不直接指定数据元素个数，而直接将具体的数据内容进行指定\n语法格式："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "T[] 数组名称    = {data1, data2, data3, ..., datan};"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-zuxb38t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-zuxb38t",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array1 = new int[]{0,1,2,3,4,5,6,7,8,9};\ndouble[] array2 = new double[]{1.0, 2.0, 3.0, 4.0, 5.0}; \nString[] array3 = new String[]{\"hell\", \"Java\", \"!!!\"};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-xm3h3d2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-xm3h3d2",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "【注意事项】"
				}
			]
		},
		{
			"ID": "20230423223505-d1epykg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423223505-d1epykg",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-ez2gfyb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-ez2gfyb",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-y6klt8b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-y6klt8b",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态初始化虽然没有指定数组的长度，编译器在编译时会根据"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "{}"
								},
								{
									"Type": "NodeText",
									"Data": "​中元素个数来确定数组的长度。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-jvof1q9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-jvof1q9",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-waw0jhu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-waw0jhu",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态初始化时, "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "{}"
								},
								{
									"Type": "NodeText",
									"Data": "​中数据类型必须与"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "[]"
								},
								{
									"Type": "NodeText",
									"Data": "​前数据类型一致。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-lnrsgso",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-lnrsgso",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-buomitf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-buomitf",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态初始化可以简写，省去后面的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "new T[]"
								},
								{
									"Type": "NodeText",
									"Data": "​。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-eyy9osn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-eyy9osn",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 注意：虽然省去了new T[], 但是编译器编译代码时还是会还原 \nint[] array1 = {0,1,2,3,4,5,6,7,8,9};\ndouble[] array2 = {1.0, 2.0, 3.0, 4.0, 5.0}; \nString[] array3 = {\"hell\", \"Java\", \"!!!\"};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-wx1nrfz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423223505-wx1nrfz",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-8y0usuo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-8y0usuo",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-vw4ooba",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-vw4ooba",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数组也可以按照如下C语言个数创建，不推荐"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-wvnp3dm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-wvnp3dm",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/*\n该种定义方式不太友好，容易造成数组的类型就是int的误解\n[]如果在类型之后，就表示数组类型，因此int[]结合在一块写意思更清晰 \n*/\nint arr[] = {1, 2, 3};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-22b4ozv",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423223505-22b4ozv",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-mn8et1k",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-mn8et1k",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-wc4qv3b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-wc4qv3b",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果不确定数组当中内容时，使用动态初始化，否则建议使用静态态初始化。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-bqty7tq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-bqty7tq",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-azfswy0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-azfswy0",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态和动态初始化也可以分为两步，但是省略格式不可以。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-iilaoho",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-iilaoho",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array1;\narray1 = new int[10]; \n\nint[] array2;\narray2 = new int[]{10, 20, 30}; \n\n// 注意省略格式不可以拆分, 否则编译失败\n// int[] array3;\n// array3 = {1, 2, 3};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-29kzaza",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423223505-29kzaza",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-43ip90v",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-43ip90v",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-zgs1cng",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-zgs1cng",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果没有对数组进行初始化，数组中元素有其默认值"
								}
							]
						},
						{
							"ID": "20230423223505-ggfi5zb",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230423223505-ggfi5zb",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"ID": "20230423223505-r1ldu15",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230423223505-r1ldu15",
										"updated": "20230423223505"
									},
									"Children": [
										{
											"ID": "20230423223505-j6wkz1z",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230423223505-j6wkz1z",
												"updated": "20230423223505"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果数组中存储元素类型为基类类型，默认值为基类类型对应的默认值，比如："
												}
											]
										}
									]
								},
								{
									"ID": "20230423223505-xr2iogu",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230423223505-xr2iogu",
										"updated": "20230423223505"
									},
									"Children": [
										{
											"ID": "20230423223505-obo6aev",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230423223505-obo6aev",
												"updated": "20230423223505"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeImage",
													"Data": "span",
													"Children": [
														{
															"Type": "NodeBang"
														},
														{
															"Type": "NodeOpenBracket"
														},
														{
															"Type": "NodeLinkText",
															"Data": "Pasted image 20221203224705.png"
														},
														{
															"Type": "NodeCloseBracket"
														},
														{
															"Type": "NodeOpenParen"
														},
														{
															"Type": "NodeLinkDest",
															"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221203224705.png"
														},
														{
															"Type": "NodeCloseParen"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								},
								{
									"ID": "20230423223505-6ps892b",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230423223505-6ps892b",
										"updated": "20230423223505"
									},
									"Children": [
										{
											"ID": "20230423223505-s5rdcp3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230423223505-s5rdcp3",
												"updated": "20230423223505"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果数组中存储元素类型为引用类型，默认值为"
												},
												{
													"Type": "NodeTextMark",
													"TextMarkType": "code",
													"TextMarkTextContent": "null"
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-gljtsgd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-gljtsgd",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组是使用"
				}
			]
		},
		{
			"ID": "20230423223505-szaow0c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223505-szaow0c",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组中元素访问"
				}
			]
		},
		{
			"ID": "20230423223505-7xe9xwu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-7xe9xwu",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "数组在内存中是一段连续的空间，空间的编号都是从"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "0"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "开始的，依次递增，该编号称为数组的下标，数组可以通过下标访问其任意位置的元素"
				},
				{
					"Type": "NodeText",
					"Data": "。比如："
				}
			]
		},
		{
			"ID": "20230423223505-zb9m1n3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-zb9m1n3",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[]array = new int[]{10, 20, 30, 40, 50};\nSystem.out.println(array[0]);\nSystem.out.println(array[1]);\nSystem.out.println(array[2]);\nSystem.out.println(array[3]);\nSystem.out.println(array[4]);\n\n// 也可以通过[]对数组中的元素进行修改 \narray[0] = 100;\nSystem.out.println(array[0]);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-we0wrhd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-we0wrhd",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【注意事项】"
				}
			]
		},
		{
			"ID": "20230423223505-f82g5a2",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223505-f82g5a2",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-4zoroe7",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223505-4zoroe7",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-ueq4qlp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-ueq4qlp",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数组是一段连续的内存空间，因此支持随机访问，即通过下标访问快速访问数组中任意位置的元素"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-uqa32y2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223505-uqa32y2",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-c5uvz1c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-c5uvz1c",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "下标从0开始，介于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "[0, N)"
								},
								{
									"Type": "NodeText",
									"Data": "​之间不包含N，N为元素个数，不能越界，否则会报出下标越界异常。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-os3v7ct",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-os3v7ct",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array = {1, 2, 3};\nSystem.out.println(array[3]);  // 数组中只有3个元素，下标一次为：0  1  2，array[3]下标越界 \n\n// 执行结果\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 100 \n       at Test.main(Test.java:4)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-d6ht3k3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-d6ht3k3",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抛出了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "java.lang.ArrayIndexOutOfBoundsException"
				},
				{
					"Type": "NodeText",
					"Data": "​ 异常. 使用数组一定要下标谨防越界."
				}
			]
		},
		{
			"ID": "20230423223505-vr6tpxa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423223505-vr6tpxa",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "遍历数组"
				}
			]
		},
		{
			"ID": "20230423223505-kuhycc5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-kuhycc5",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在数组中可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "数组对象.length"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来获取数组的长度"
				}
			]
		},
		{
			"ID": "20230423223505-42bp57q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-42bp57q",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[]array = new int[]{10, 20, 30, 40, 50}; \nfor(int i = 0; i \u003c array.length; i++){\n   System.out.println(array[i]); \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-ak8ct78",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-ak8ct78",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "for-each"
				},
				{
					"Type": "NodeText",
					"Data": " 遍历数组"
				}
			]
		},
		{
			"ID": "20230423223505-jl2cf30",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-jl2cf30",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array = {1, 2, 3}; \nfor (int x : array) {\n   System.out.println(x); \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-z2jgmqp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-z2jgmqp",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "for-each"
				},
				{
					"Type": "NodeText",
					"Data": " 是 for 循环的另外一种使用方式. 能够更方便的完成对数组的遍历. 可以避免循环条件和更新语句写错."
				}
			]
		},
		{
			"ID": "20230423223505-qcfml71",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223505-qcfml71",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组是引用类型"
				}
			]
		},
		{
			"ID": "20230423223505-r7iu01z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-r7iu01z",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "初始JVM的内存分布"
				}
			]
		},
		{
			"ID": "20230423223505-glb05t6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-glb05t6",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内存是一段连续的存储空间，主要用来存储程序运行时数据的。比如："
				}
			]
		},
		{
			"ID": "20230423223505-waaizhh",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223505-waaizhh",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-wudfubb",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223505-wudfubb",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-ry2171x",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-ry2171x",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序运行时代码需要加载到内存"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-3prz6x1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223505-3prz6x1",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-fly37q2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-fly37q2",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序运行产生的中间数据要存放在内存"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-psiy6m9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423223505-psiy6m9",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-472hvqn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-472hvqn",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序中的常量也要保存"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-vr178s2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423223505-vr178s2",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-8v6kwta",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-8v6kwta",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有些数据可能需要长时间存储，而有些数据当方法运行结束后就要被销毁"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-5bry5dl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-5bry5dl",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "JVM"
				},
				{
					"Type": "NodeText",
					"Data": "也对所使用的内存按照功能的不同进行了划分:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221203230022.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221203230022.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423223505-n4kdq29",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423223505-n4kdq29",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-2mawhsx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-2mawhsx",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-a38367t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-a38367t",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "程序计数器 (PC Register)"
								},
								{
									"Type": "NodeText",
									"Data": ": 只是一个很小的空间, "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "保存下一条执行的指令的地址"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-xmyia06",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-xmyia06",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-dfrm2qe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-dfrm2qe",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "虚拟机栈( JVM Stack)"
								},
								{
									"Type": "NodeText",
									"Data": ": 与方法调用相关的一些信息，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "每个方法在执行时，都会先创建一个栈帧"
								},
								{
									"Type": "NodeText",
									"Data": "，栈帧中包含有： "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "局部变量表、操作数栈、动态链接、返回地址"
								},
								{
									"Type": "NodeText",
									"Data": "以及其他的一些信息，保存的都是与方法执行时相关的一些信 息。比如：局部变量。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "当方法运行结束后，栈帧就被销毁了，即栈帧中保存的数据也被销毁了"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-5zatoni",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-5zatoni",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-nvmaiq0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-nvmaiq0",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "本地方法栈(Native Method Stack)"
								},
								{
									"Type": "NodeText",
									"Data": ": 本地方法栈与虚拟机栈的作用类似. 只不过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "保存的内容是Native方法的局部变量"
								},
								{
									"Type": "NodeText",
									"Data": ". 在有些版本的 JVM 实现中(例如HotSpot), 本地方法栈和虚拟机栈是一起的"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-k0o6qwf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-k0o6qwf",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-1nabegb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-1nabegb",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "堆(Heap)"
								},
								{
									"Type": "NodeText",
									"Data": ": JVM所管理的最大内存区域. 使用  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "new 创建的对象都是在堆上保存"
								},
								{
									"Type": "NodeText",
									"Data": " (例如前面的   new int[]{1, 2, 3} )，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "堆是随着程序开始运行时而创建，随着程序的退出而销毁，堆中的数据只要还有在使用，就不会被销毁"
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-8n20pk9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-8n20pk9",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-g01pc13",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-g01pc13",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "方法区(Method Area)"
								},
								{
									"Type": "NodeText",
									"Data": ": 用于"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据"
								},
								{
									"Type": "NodeText",
									"Data": ". 方法编译出的的字节码就是保存在这个区域"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-22zzrlh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-22zzrlh",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在我们只简单关心堆  和  虚拟机栈这两块空间，后序JVM中还会更详细介绍。"
				}
			]
		},
		{
			"ID": "20230423223505-r7gw8d4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-r7gw8d4",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本类型变量与引用类型变量的区别"
				}
			]
		},
		{
			"ID": "20230423223505-l707c94",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-l707c94",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本数据类型创建的变量，称为基本变量，该变量空间中直接存放的是其所对应的值；"
				}
			]
		},
		{
			"ID": "20230423223505-ow8syxm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-ow8syxm",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而引用数据类型创建的变量，一般称为对象的引用，其空间中存储的是对象所在空间的地址。"
				}
			]
		},
		{
			"ID": "20230423223505-udan3kr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-udan3kr",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void func() {\n   int a = 10;\n   int b = 20;\n   int[] arr = new int[]{1,2,3}; \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-kfo8so0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-kfo8so0",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上述代码中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "b"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "arr"
				},
				{
					"Type": "NodeText",
					"Data": "​，都是函数内部的变量，因此其空间都在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "main方法对应的栈帧中分配"
				},
				{
					"Type": "NodeText",
					"Data": "。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a"
				},
				{
					"Type": "NodeText",
					"Data": "​、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "b"
				},
				{
					"Type": "NodeText",
					"Data": "​是内置类型的变量，因此其空间中保存的就是给该变量初始化的值。\narray是数组类型的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "引用变量"
				},
				{
					"Type": "NodeText",
					"Data": "，其内部保存的内容可以简单理解成是数组在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "堆空间"
				},
				{
					"Type": "NodeText",
					"Data": "中的首地址。"
				}
			]
		},
		{
			"ID": "20230423223505-8xons8a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-8xons8a",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221203230729.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221203230729.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423223505-pbo13l1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-pbo13l1",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从上图可以看到，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "引用变量并不直接存储对象本身，可以简单理解成存储的是对象在堆中空间的起始地址。通过该地址，引用变量便可以去操作对象"
				},
				{
					"Type": "NodeText",
					"Data": "。有点类似C语言中的指针，但是Java中引用要比指针的操作更简单。"
				}
			]
		},
		{
			"ID": "20230423223505-5avms2b",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-5avms2b",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "再谈引用变量"
				}
			]
		},
		{
			"ID": "20230423223505-zw9658o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-zw9658o",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void func() { \n   int[] array1 = new int[3];\n   array1[0] = 10;\n   array1[1] = 20;\n   array1[2] = 30;\n   \n   int[] array2 = new int[]{1,2,3,4,5};\n   array2[0] = 100;\n   array2[1] = 200;\n   \n   array1 = array2;\n   array1[2] = 300;\n   array1[3] = 400;\n   array2[4] = 500;\n   for (int i = 0; i \u003c array2.length; i++) { \n      System.out.println(array2[i]);\n\t} \n}\n\n//运行结果\n//100\n//200\n//300\n//400\n//500\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-nz170km",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-nz170km",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221203230909.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221203230909.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423223505-oj9dxj9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-oj9dxj9",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221203230916.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221203230916.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423223505-dyvazsk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-dyvazsk",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "认识 null"
				}
			]
		},
		{
			"ID": "20230423223505-ukjiq9f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-ukjiq9f",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "null 在 Java 中表示 \"空引用\" , 也就是一个不指向对象的引用."
				}
			]
		},
		{
			"ID": "20230423223505-2l5upxe",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-2l5upxe",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] arr = null;\nSystem.out.println(arr[0]); \n\n// 执行结果\nException in thread \"main\" java.lang.NullPointerExceptionat Test.main(Test.java:6)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-qbznoj6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-qbznoj6",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "null"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的作用类似于 C 语言中的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NULL"
				},
				{
					"Type": "NodeText",
					"Data": "​ (空指针), 都是表示一个无效的内存位置. 因此不能对这个内存进行任何读写操作. 一旦尝试读写, 就会抛出 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "NullPointerException"
				},
				{
					"Type": "NodeText",
					"Data": "​异常."
				}
			]
		},
		{
			"ID": "20230423223505-yly0xio",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230423223505-yly0xio",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230423223505-cziyjcw",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423223505-cziyjcw",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意: Java 中并没有约定 null 和 0 号地址的内存有任何关联."
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-2j1zux0",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223505-2j1zux0",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的应用场景"
				}
			]
		},
		{
			"ID": "20230423223505-4xyigyf",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-4xyigyf",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "保存数据"
				}
			]
		},
		{
			"ID": "20230423223505-e1mzv9a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-e1mzv9a",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) { \n   int[] array = {1, 2, 3};\n   for(int i = 0; i \u003c array.length; ++i){ \n       System.out.println(array[i] + \" \"); \n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-v6jgkly",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-v6jgkly",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作为函数的参数"
				}
			]
		},
		{
			"ID": "20230423223505-ha8ibmi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-ha8ibmi",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1. 参数传基本数据类型"
				}
			]
		},
		{
			"ID": "20230423223505-iu6fvdi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-iu6fvdi",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) { \n   int num = 0;\n   func(num);\n   System.out.println(\"num = \" + num); \n}\n\npublic static void func(int x) { \n   x = 10;\n   System.out.println(\"x = \" + x); \n}\n\n// 执行结果 \nx = 10 \nnum = 0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-wj6xv94",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-wj6xv94",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发现在func方法中修改形参 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "x"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的值, 不影响实参的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "num"
				},
				{
					"Type": "NodeText",
					"Data": "​ 值."
				}
			]
		},
		{
			"ID": "20230423223505-tqakpa2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-tqakpa2",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2. 参数传数组类型(引用数据类型)"
				}
			]
		},
		{
			"ID": "20230423223505-upguuq9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-upguuq9",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) { \n   int[] arr = {1, 2, 3};\n   func(arr);\n   System.out.println(\"arr[0] = \" + arr[0]); \n}\n\npublic static void func(int[] a) { \n   a[0] = 10;\n   System.out.println(\"a[0] = \" + a[0]); \n}\n\n// 执行结果 \na[0] = 10 \narr[0] = 10\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-jqhtfy1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-jqhtfy1",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发现在func方法内部修改数组的内容, 方法外部的数组内容也发生改变.\n因为数组是引用类型，按照引用类型来进行传递，是可以修改其中存放的内容的。"
				}
			]
		},
		{
			"ID": "20230423223505-s4ql14i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-s4ql14i",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "总结"
				},
				{
					"Type": "NodeText",
					"Data": ": 所谓的 \"引用\" 本质上只是存了一个地址. Java 将数组设定成引用类型, 这样的话后续进行数组参数传参, 其实只是将数组的地址传入到函数形参中. 这样可以避免对整个数组的拷贝(数组可能比较长, 那么拷贝开销就会很大)."
				}
			]
		},
		{
			"ID": "20230423223505-pej8n7k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-pej8n7k",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作为函数的返回值"
				}
			]
		},
		{
			"ID": "20230423223505-pjk0vjx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-pjk0vjx",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如：获取斐波那契数列的前N项比如："
				}
			]
		},
		{
			"ID": "20230423223505-38zj97n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-38zj97n",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class array {  \n    public static int[] fib(int n){  \n        if(n \u003c= 0 ){  \n            return null;  \n        }  \n        int[] array = new int[n];  \n        array[0] = array[1] = 1;  \n        for(int i = 2; i \u003c n ;++i){  \n            array[i] = array[i-1]+array[i-2];  \n        }  \n  \n        return array;  \n    }  \n  \n    public static void main(String[] args) {  \n        int[] array = fib(10);  \n  \n        for (int i = 0; i \u003c array.length; i++) {  \n            System.out.println(array[i]);  \n        }  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-scrn011",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223505-scrn011",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组练习"
				}
			]
		},
		{
			"ID": "20230423223505-18u4b6n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-18u4b6n",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组转字符串"
				}
			]
		},
		{
			"ID": "20230423223505-jibseog",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-jibseog",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import java.util.Arrays \nint[] arr = {1,2,3,4,5,6};\nString newArr = Arrays.toString(arr); \nSystem.out.println(newArr);\n\n// 执行结果\n[1, 2, 3, 4, 5, 6]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-l92wxfy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-l92wxfy",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用这个方法后续打印数组就更方便一些.\nJava 中提供了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "java.util.Arrays"
				},
				{
					"Type": "NodeText",
					"Data": "​ 包, 其中包含了一些操作数组的常用方法."
				}
			]
		},
		{
			"ID": "20230423223505-adfp1dt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-adfp1dt",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组拷贝"
				}
			]
		},
		{
			"ID": "20230423223505-au4fmjj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-au4fmjj",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例"
				}
			]
		},
		{
			"ID": "20230423223505-0vpgipf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-0vpgipf",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n    // newArr和arr引用的是同一个数组  \n    // 因此newArr修改空间中内容之后，arr也可以看到修改的结果  \n    int[] arr = {1,2,3,4,5,6};  \n    int[] newArr = arr;  \n    newArr[0] = 10;  \n    System.out.println(\"newArr = \"+ Arrays.toString(arr));  \n  \n    System.out.println();  \n  \n    // 使用Arrays中copyOf方法完成数组的拷贝：  \n    // copyOf方法在进行数组拷贝时，创建了一个新的数组  \n    // arr和newArr引用的不是同一个数组  \n    arr[0] = 1;  \n    newArr = Arrays.copyOf(arr , arr.length);  \n    System.out.println(\"arr = \"+ Arrays.toString(arr));  \n    System.out.println(\"newArr = \"+ Arrays.toString(newArr));  \n  \n    // 因为arr修改其引用数组中内容时，对newArr没有任何影响  \n    arr[0] = 100;  \n    System.out.println(\"arr = \"+ Arrays.toString(arr));  \n    System.out.println(\"newArr = \"+ Arrays.toString(newArr));  \n  \n    System.out.println();  \n  \n    // 拷贝某个范围.  \n    int[] newArr2 = Arrays.copyOfRange(arr , 2, 4);  \n    System.out.println(\"newArr2 = \"+ Arrays.toString(newArr2));  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-ttyxsoy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-ttyxsoy",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221204141913.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204141913.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423223505-ex549f4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-ex549f4",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221204141926.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204141926.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423223505-0kp6ye8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-0kp6ye8",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：数组当中存储的是基本类型数据时，不论怎么拷贝基本都不会出现什么问题，但如果存储的是引用数据类型，拷贝时需要考虑深浅拷贝的问题，关于深浅拷贝在后续详细给大家介绍。"
				}
			]
		},
		{
			"ID": "20230423223505-dbmbcka",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-dbmbcka",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "实现自己版本的拷贝数组"
				}
			]
		},
		{
			"ID": "20230423223505-2qr995t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-2qr995t",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static int[] copyOf(int[] arr) {  \n    int[] ret = new int[arr.length];  \n    for (int i = 0; i \u003c arr.length; i++) {  \n        ret[i] = arr[i];  \n    }  \n  \n    return ret;  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-v9jq8b1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-v9jq8b1",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "求数组中元素的平均值"
				}
			]
		},
		{
			"ID": "20230423223505-ldirk1j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-ldirk1j",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个整型数组, 求平均值"
				}
			]
		},
		{
			"ID": "20230423223505-7li6484",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-7li6484",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "代码示例"
				}
			]
		},
		{
			"ID": "20230423223505-z6gfti1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-z6gfti1",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n    int[] arr = {1,2,3,4,5,6};  \n    System.out.println(avg(arr));  \n}  \n\npublic static double avg(int[] arr) {  \n    int sum = 0;  \n    for (int x : arr) {  \n        sum += x;  \n    }  \n    return (double)sum / (double)arr.length;  \n}\n\n// 执行结果\n3.5\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-kvvuwhw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-kvvuwhw",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查找数组中指定元素(顺序查找)"
				}
			]
		},
		{
			"ID": "20230423223505-f0ffftl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-f0ffftl",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个数组, 再给定一个元素, 找出该元素在数组中的位置.\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "代码示例"
				}
			]
		},
		{
			"ID": "20230423223505-eoq2epg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-eoq2epg",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n        int[] arr = {1,2,3,10,5,6};  \n        System.out.println(find(arr, 10));  \n} \n\npublic static int find(int[] arr, int data) {  \n\tfor (int i = 0; i \u003c arr.length; i++) {  \n\t\tif (arr[i] == data) {  \n\t\t\treturn i;  \n\t\t}  \n\t}  \n\treturn -1; // 表示没有找到  \n}\n\n// 执行结果\n3\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-wpynleq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-wpynleq",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查找数组中指定元素(二分查找)"
				}
			]
		},
		{
			"ID": "20230423223505-ztv8szr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-ztv8szr",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "针对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "有序数组"
				},
				{
					"Type": "NodeText",
					"Data": ", 可以使用更高效的二分查找."
				}
			]
		},
		{
			"ID": "20230423223505-pwvmvcw",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230423223505-pwvmvcw",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230423223505-kngrqih",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423223505-kngrqih",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "啥叫有序数组?\n有序分为 \"升序\" 和 \"降序\"\n如 1 2 3 4 , 依次递增即为升序.\n如 4 3 2 1 , 依次递减即为降序."
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-fp0g750",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-fp0g750",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以升序数组为例, 二分查找的思路是先取中间位置的元素, 然后使用待查找元素与数组中间元素进行比较："
				}
			]
		},
		{
			"ID": "20230423223505-2yg53bl",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423223505-2yg53bl",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-6zozzlz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-6zozzlz",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-jxopcan",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-jxopcan",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果相等，即找到了返回该元素在数组中的下标"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-s4jmpz0",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-s4jmpz0",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-pcm5gnw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-pcm5gnw",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果小于，以类似方式到数组左半侧查找"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-go92aza",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-go92aza",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-teed5bu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-teed5bu",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果大于，以类似方式到数组右半侧查找"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-191o46c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-191o46c",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里我们如果找到就返回数组下标， 没找到就返回-1。"
				}
			]
		},
		{
			"ID": "20230423223505-agki3mn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-agki3mn",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class array {  \n    public static void main(String[] args) {  \n        int[] arr = {1,2,3,4,5,6,7,8,9,10};  \n        System.out.println(binarySearch(arr , 6));  \n    }  \n  \n    public static int binarySearch(int[] arr , int target){  \n        int left = 0;  \n        int right = arr.length-1;  \n        while(left \u003c= right){  \n            int mid = (left + right) / 2;  \n            if(arr[mid] \u003e target){  \n                right = mid-1;  \n            }else if (arr[mid] \u003c target){  \n                left = mid+1;  \n            }else{  \n                return mid;  \n            }  \n        }  \n        return -1;  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-z42qbwt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-z42qbwt",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到, 针对一个长度为 10000 个元素的数组查找, 二分查找只需要循环 14 次就能完成查找. 随着数组元素个数越多, 二分的优势就越大."
				}
			]
		},
		{
			"ID": "20230423223505-w5wpdnn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-w5wpdnn",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组排序(冒泡排序)"
				}
			]
		},
		{
			"ID": "20230423223505-2bnnoey",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-2bnnoey",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个数组, 让数组升序 (降序) 排序."
				}
			]
		},
		{
			"ID": "20230423223505-i9pkns6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-i9pkns6",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "算法思路"
				},
				{
					"Type": "NodeText",
					"Data": "\n假设排升序："
				}
			]
		},
		{
			"ID": "20230423223505-vadgvom",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423223505-vadgvom",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-mnhmpze",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423223505-mnhmpze",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-0s8owfq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-0s8owfq",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将数组中相邻元素从前往后依次进行比较，如果前一个元素比后一个元素大，则交换，一趟下来后最大元素就在数组的末尾"
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-aktcbee",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423223505-aktcbee",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-7av54nu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-7av54nu",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "依次从上上述过程，直到数组中所有的元素都排列好\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221204152016.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204152016.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-o2kyt88",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-o2kyt88",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class array{  \n    public static void main(String[] args) {  \n        int[] arr = {9, 5, 2, 7 , 6,10 ,5};  \n        System.out.println(Arrays.toString(arr));  \n        bubbleSort(arr);  \n        System.out.println(Arrays.toString(arr));  \n    }  \n  \n    public static void bubbleSort(int[] arr){  \n        for( int i = 0;  i \u003c arr.length ; i++){  \n            for(int j = 1 ; j \u003c arr.length - i ; j++ ){  \n                if(arr[j] \u003c arr[j-1]){  \n                    int tmp = arr[j];  \n                    arr[j] = arr[j-1];  \n                    arr[j-1] = tmp;  \n                }  \n            }  \n        }  \n    }  \n}\n\n//执行结果\n[9, 5, 2, 7, 6, 10, 5]\n[2, 5, 5, 6, 7, 9, 10]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-va5cfxw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-va5cfxw",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "冒泡排序性能较低. Java 中内置了更高效的排序算法"
				}
			]
		},
		{
			"ID": "20230423223505-ii3jvxk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-ii3jvxk",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n    int[] arr = {9, 5, 2, 7};  \n    Arrays.sort(arr);  \n    System.out.println(Arrays.toString(arr));  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-n052j4k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-n052j4k",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Arrays.sort"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的具体实现算法, 我们在后面的排序算法课上再详细介绍. 到时候我们会介绍很多种常见排序算法."
				}
			]
		},
		{
			"ID": "20230423223505-732j4ur",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423223505-732j4ur",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组逆序"
				}
			]
		},
		{
			"ID": "20230423223505-mfxvuiz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-mfxvuiz",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个数组, 将里面的元素逆序排列."
				}
			]
		},
		{
			"ID": "20230423223505-bm5wpbx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-bm5wpbx",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "思路"
				}
			]
		},
		{
			"ID": "20230423223505-2216qou",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423223505-2216qou",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"ID": "20230423223505-vk3t43k",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-vk3t43k",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-po3dr0s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-po3dr0s",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设定两个下标, 分别指向第一个元素和最后一个元素. 交换两个位置的元素."
								}
							]
						}
					]
				},
				{
					"ID": "20230423223505-btewlyl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423223505-btewlyl",
						"updated": "20230423223505"
					},
					"Children": [
						{
							"ID": "20230423223505-lhjtmmz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423223505-lhjtmmz",
								"updated": "20230423223505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "然后让前一个下标自增, 后一个下标自减, 循环继续即可."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423223505-qos39a6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-qos39a6",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例"
				}
			]
		},
		{
			"ID": "20230423223505-iol99rj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-iol99rj",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class array{  \n    public static void main(String[] args) {  \n        int[] arr = {1, 2, 3, 4 ,5,6,7};  \n        System.out.println(Arrays.toString(arr));  \n        reverse(arr);  \n        System.out.println(Arrays.toString(arr));  \n    }  \n  \n    public static void reverse(int[] arr){  \n        int left = 0 ;  \n        int right = arr.length-1;  \n        while(left \u003c right){ //left ==right 时说明已经到中间位置了，无需交换了  \n            int temp = arr[left];  \n            arr[left] = arr[right];  \n            arr[right] = temp;  \n            left++;  \n            right--;  \n        }  \n    }  \n}\n\n//运行结果\n[1, 2, 3, 4, 5, 6, 7]\n[7, 6, 5, 4, 3, 2, 1]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-3vjjb0j",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423223505-3vjjb0j",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组"
				}
			]
		},
		{
			"ID": "20230423223505-00onspf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-00onspf",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组本质上也就是一维数组, 只不过每个元素又是一个一维数组."
				}
			]
		},
		{
			"ID": "20230423223505-cmb6co3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-cmb6co3",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本语法"
				}
			]
		},
		{
			"ID": "20230423223505-eu67r8w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-eu67r8w",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "数据类型[][] 数组名称 = new 数据类型 [行数][列数] { 初始化数据 };\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-7nntlua",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-7nntlua",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码实例："
				}
			]
		},
		{
			"ID": "20230423223505-r2y72ba",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423223505-r2y72ba",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " int[][] arr = {  \n\t\t{1, 2, 3, 4},  \n\t\t{5, 6, 7, 8},  \n\t\t{9, 10, 11, 12}  \n};  \nfor (int row = 0; row \u003c arr.length; row++) {  \n\tfor (int col = 0; col \u003c arr[row].length; col++) {  \n\t\tSystem.out.printf(\"%d\\t\", arr[row][col]);  \n\t}  \n\tSystem.out.println(\"\");  \n}\n\n// 执行结果\n1   2   3   4\n5   6   7   8\n9   10  11  12\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423223505-aksmjft",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223505-aksmjft",
				"updated": "20230423223505"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组的用法和一维数组并没有明显差别, 因此我们不再赘述.\n同理, 还存在 \"三维数组\", \"四维数组\" 等更复杂的数组, 只不过出现频率都很低."
				}
			]
		},
		{
			"ID": "20230423223454-qksbaw1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423223454-qksbaw1",
				"updated": "20230423223454"
			}
		}
	]
}