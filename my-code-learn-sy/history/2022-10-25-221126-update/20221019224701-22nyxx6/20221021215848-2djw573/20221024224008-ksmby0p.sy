{
	"ID": "20221024224008-ksmby0p",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221024224008-ksmby0p",
		"title": "初步实现UDP代码(不完善)",
		"updated": "20221025221101"
	},
	"Children": [
		{
			"ID": "20221021222747-7buxa1y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021222747-7buxa1y",
				"updated": "20221024224048"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "udp_server.cpp"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20221021222759-5t28n4r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221021222759-5t28n4r",
				"updated": "20221025221013"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003ccerrno\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003cnetinet/in.h\u003e//IPv4与IPv6的地址定义在其中\n#include \u003carpa/inet.h\u003e\n\nconst uint16_t port = 6666;\n\nint main()\n{\n    //1. 创建套接字，打开网络文件\n    int sock = socket(AF_INET , SOCK_DGRAM ,0 );//使用SOCK_DGRAM是因为我们写的是原始套接字，UDP。\n    if (sock \u003c 0)\n    {\n        std::cerr \u003c\u003c \"socket create error\" \u003c\u003c errno \u003c\u003c std::endl;\n        return 1;\n    }\n\n    //2. 给该服务器绑定端口和ip(特殊处理)\n    struct sockaddr_in local;\n    local.sin_family = AF_INET;\n    local.sin_port = htons(port);//此处的端口号，是我们计算机上的变量，是主机序列\n    // a. 需要将人识别的点分十进制，字符串风格IP地址，转化成为4字节整数IP\n    // b. 也要考虑大小端\n    //in_addr_t inet_addr(const char *cp); 能完成上面ab两个工作.需要头文件\u003cnetinet/in,h\u003e,\u003carpa/inet.h\u003e,\u003csys/socket.h\u003e\n\n    // 坑:\n    // 云服务器，不允许用户直接bind公网IP，另外, 实际正常编写的时候，我们也不会指明IP\n     //local.sin_addr.s_addr = inet_addr(\"42.192.83.143\"); //点分十进制，字符串风格[0-255].[0-255].[0-255].[0-255]\n\n    // INADDR_ANY: 如果你bind的是确定的IP(主机)， 意味着只有发到该IP主机上面的数据\n    // 才会交给你的网络进程, 但是，一般服务器可能有多张网卡，配置多个IP，我们需要的不是\n    // 某个IP上面的数据，我们需要的是，所有发送到该主机，发送到该端口的数据！\n    local.sin_addr.s_addr = INADDR_ANY;\n\n    if (bind(sock , (struct sockaddr*)\u0026local , sizeof(local)) \u003c 0)\n    {\n        std::cerr \u003c\u003c \"bind error \" \u003c\u003c errno \u003c\u003c std::endl;\n        return 2;\n    }\n\n\t//3.提供服务\n    bool quit = false;\n    #define NUM 1024\n    char buffer[NUM];\n    while (!quit) //我们需要创建的是长链接服务，必须一种接收数据\n    {\n        struct sockaddr_in peer;\n        socklen_t len = sizeof(peer);\n        recvfrom(sock , buffer , sizeof(buffer)-1 ,0 ,(struct sockaddr*)\u0026peer , \u0026len);\n\n        std::cout \u003c\u003c \"client#\" \u003c\u003c buffer \u003c\u003c std::endl;\n\n        std::string echo_hello = \"hello\";\n        sendto(sock , echo_hello.c_str() , echo_hello.size() , 0 ,(struct sockaddr*)\u0026peer , len );\n    }\n\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221025221034-q6vckrw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221025221034-q6vckrw"
			}
		},
		{
			"ID": "20221021222729-n7k3yul",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021222729-n7k3yul",
				"updated": "20221024224051"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "udp_client.cpp"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20221021215856-umjonat",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221021215856-umjonat",
				"updated": "20221025221101"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003ccerrno\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003carpa/inet.h\u003e\n\nvoid Usage(std::string proc)\n{\n    std::cout \u003c\u003c \"Usage: \\n\\t\" \u003c\u003c proc \u003c\u003c \" server_ip server_port\" \u003c\u003c std::endl;\n}\n\nint main(int argc , char* argv[])\n{\n    if (argc != 3)\n    {\n        Usage(argv[0]);\n        return 0;\n    }\n\n    // 1. 创建套接字，打开网络文件\n    int sock = socket(AF_INET , SOCK_DGRAM ,0);\n    if(sock \u003c 0)\n    {\n        std::cerr \u003c\u003c \"socket error \" \u003c\u003c errno \u003c\u003c std::endl;\n        return 1;\n    }\n\n\t// 你要给谁发？？\n    struct sockaddr_in server;\n    server.sin_family = AF_INET;\n    server.sin_port = htons(atoi(argv[2]));\n    server.sin_addr.s_addr = inet_addr(argv[1]);\n\n\t// 2.使用服务\n    while(1)\n    {\n        std::string message;\n        std::cout\u003c\u003c \"请输入#\";\n        std::cin\u003e\u003e message;\n\n        sendto(sock , message.c_str() , message.size() , 0, (struct sockaddr*)\u0026server , sizeof(server));\n\n\t\t//此处tmp就是一个\"占位符\"\n        struct sockaddr_in tmp;\n        socklen_t len = sizeof(tmp);\n        char buffer[1024];\n\n        recvfrom(sock , buffer , sizeof(buffer) , 0 ,(struct sockaddr*)\u0026tmp , \u0026len);\n        std::cout \u003c\u003c \"server echo# \"\u003c\u003c buffer \u003c\u003c std::endl;\n    }\n\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221024224038-scy9jb2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224038-scy9jb2",
				"updated": "20221024224103"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/image-20221023204025-2ux1chv.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221024224038-ywub34l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224038-ywub34l"
			}
		},
		{
			"ID": "20221024224038-ivfd1k3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224038-ivfd1k3"
			}
		}
	]
}