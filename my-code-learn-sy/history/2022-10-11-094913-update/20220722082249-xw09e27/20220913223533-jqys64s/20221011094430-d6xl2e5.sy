{
	"ID": "20221011094430-d6xl2e5",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221011094430-d6xl2e5",
		"title": "单生产者多消费者数据处理模型代码与运行结果",
		"updated": "20221011094520"
	},
	"Children": [
		{
			"ID": "20221011094504-9r5jyc9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094504-9r5jyc9",
				"updated": "20221011094504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Task.hpp"
				}
			]
		},
		{
			"ID": "20221011094504-4cc4coy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011094504-4cc4coy",
				"updated": "20221011094504"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#pragma once\n#include \u003ciostream\u003e\n#include \u003cpthread.h\u003e\n\nnamespace fmy_task\n{\n    class Task\n    {\n    private:\n        int _x ;\n        int _y;\n        char _op;\n\n    public:\n        Task(){}\n        Task(int x , int y , int op)\n            :_x(x)\n            ,_y(y)\n            ,_op(op)\n        {}\n\n        int Run()\n        {\n            int res = 0;\n            switch (_op)\n            {\n            case '+':\n                res = _x + _y;\n                break;\n            case '-':\n                res = _x - _y;\n                break;\n            case '*':\n                res = _x * _y;\n                break;\n            case '/':\n                res = _x / _y;\n                break;\n            case '%':\n                res = _x % _y;\n                break;\n            default:\n                std::cout \u003c\u003c \"bug??\" \u003c\u003c std::endl;\n                break;\n            }\n            std::cout \u003c\u003c \"当前任务正在被: \" \u003c\u003c pthread_self() \u003c\u003c \" 处理: \" \\\n            \u003c\u003c _x \u003c\u003c _op \u003c\u003c _y \u003c\u003c \"=\" \u003c\u003c res \u003c\u003c std::endl;\n            return res;\n        }\n\n        int operator()()\n        {\n            return Run();\n        }\n    };\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011094504-punsos1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094504-punsos1",
				"updated": "20221011094504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CPtest.cpp"
				}
			]
		},
		{
			"ID": "20221011094504-zgvsoxh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011094504-zgvsoxh",
				"updated": "20221011094504"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#pragma once\n\n#include \u003ciostream\u003e\n#include \u003cpthread.h\u003e\n#include \u003cunistd.h\u003e\n\n#include \"BlockQueue.hpp\"\n#include \"Task.hpp\"\n\nusing namespace fmy;\nusing namespace fmy_task;\n\nvoid *consumer(void *args)\n{\n    BlockQueue\u003cTask\u003e *bq = (BlockQueue\u003cTask\u003e*)args;\n    while(true){\n        Task t;\n        bq-\u003ePop(\u0026t);\n        t();\n        sleep(1);\n    }\n}\n\nvoid *producter(void *args)\n{\n    BlockQueue\u003cTask\u003e* bq = (BlockQueue\u003cTask\u003e*)args;\n    std::string ops = \"+-*/%\";\n    while(true){\n\n        int x = rand()%20+1;\n        int y = rand()%20+1;\n        char op = ops[rand()%5];\n\n        Task t(x , y ,op);\n        std::cout \u003c\u003c \"生产者派发了一个任务: \" \u003c\u003c x \u003c\u003c op \u003c\u003c y \u003c\u003c \"=?\" \u003c\u003c std::endl;\n        bq-\u003ePush(t);\n        //sleep(1);\n    }\n}\n\nint main()\n{\n    srand((long long)time(nullptr));\n    BlockQueue\u003cTask\u003e *bq = new BlockQueue\u003cTask\u003e();\n\n    pthread_t c,p;\n    pthread_t c1,c2,c3,c4;\n    pthread_create(\u0026c, nullptr, consumer, (void*)bq);\n    pthread_create(\u0026c1, nullptr, consumer, (void*)bq);\n    pthread_create(\u0026c2, nullptr, consumer, (void*)bq);\n    pthread_create(\u0026c3, nullptr, consumer, (void*)bq);\n    pthread_create(\u0026c4, nullptr, consumer, (void*)bq);\n    pthread_create(\u0026p, nullptr, producter, (void*)bq);\n\n    pthread_join(c, nullptr);\n    pthread_join(c1, nullptr);\n    pthread_join(c2, nullptr);\n    pthread_join(c3, nullptr);\n    pthread_join(c4, nullptr);\n    pthread_join(p, nullptr);\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011094504-oqflevh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094504-oqflevh",
				"updated": "20221011094504"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "BlockQueue.hpp"
				}
			]
		},
		{
			"ID": "20221011094504-fs7et0r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011094504-fs7et0r",
				"updated": "20221011094504"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#pragma once\n#include \u003ciostream\u003e\n#include \u003cqueue\u003e\n#include \u003cpthread.h\u003e\n\nnamespace fmy\n{\n\n    const int default_cap = 5;\n\n    template\u003cclass T\u003e\n    class BlockQueue\n    {\n    private:\n        std::queue\u003cT\u003e _bq;\n        int _cap;\n\n        pthread_cond_t _is_full;\n        pthread_cond_t _is_empty;\n\n        pthread_mutex_t mtx;\n\n        bool Is_Full()\n        {\n            return _bq.size() == _cap;\n        }\n\n        bool Is_Empty()\n        {\n            return _bq.size() == 0;\n        }\n\n        void LockQueue()\n        {\n            pthread_mutex_lock(\u0026mtx);\n        }\n\n        void UnlockQueue()\n        {\n            pthread_mutex_unlock(\u0026mtx);\n        }\n\n        void WaitConsumer()\n        {\n            pthread_cond_wait(\u0026_is_full , \u0026mtx);\n        }\n\n        void WaitProducter()\n        {\n            pthread_cond_wait(\u0026_is_empty , \u0026mtx);\n        }\n\n        void WakeConsumer()\n        {\n            pthread_cond_signal(\u0026_is_full);\n        }\n\n        void WakeProducter()\n        {\n            pthread_cond_signal(\u0026_is_empty);\n        }\n\n\n\n    public:\n        BlockQueue(int cap = default_cap)\n            :_cap(cap)\n        {\n            pthread_mutex_init(\u0026mtx ,nullptr);\n            pthread_cond_init(\u0026_is_full , nullptr);\n            pthread_cond_init(\u0026_is_empty , nullptr);\n        }\n\n        ~BlockQueue()\n        {\n            pthread_mutex_destroy(\u0026mtx);\n            pthread_cond_destroy(\u0026_is_full);\n            pthread_cond_destroy(\u0026_is_empty);\n        }\n\n        void Push(const T\u0026 in)\n        {\n            LockQueue();\n            while(Is_Full())\n            {\n                WaitProducter();\n            }\n\n            _bq.push(in);\n\n            // if(_bq.size() \u003e _cap/2) WakeConsumer();\n\n            UnlockQueue();\n            WakeConsumer();\n        }\n\n        void Pop(T* out)\n        {\n            LockQueue();\n            while(Is_Empty())\n            {\n                WaitConsumer();\n            }\n\n            *out = _bq.front();\n            _bq.pop();\n\n            // if(_bq.size() \u003e _cap/2) WakeProducter();\n\n            UnlockQueue();\n            WakeProducter();\n        }\n\n    };\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011094504-t0fs3eg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094504-t0fs3eg",
				"updated": "20221011094520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行结果：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221004124647"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221004124647-20221011094520-qiu61rm.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		}
	]
}