{
	"ID": "20220913223533-jqys64s",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220913223533-jqys64s",
		"title": "Linux多线程",
		"updated": "20230317120058"
	},
	"Children": [
		{
			"ID": "20230317110149-t1pqktu",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230317110149-t1pqktu",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么是线程"
				}
			]
		},
		{
			"ID": "20230317110149-ios93hc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-ios93hc",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程:是在进程内部运行的一个执行分支(执行流)，属于进程的一部分，粒度要比进程更加细和轻量化。一般叫做："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "TCB"
				}
			]
		},
		{
			"ID": "20230317110149-6e9pp5r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-6e9pp5r",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315201714.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-ujfar0a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-ujfar0a",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-cmwpy7q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-cmwpy7q",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-85olfqq",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230317110149-85olfqq",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程的优缺点"
				}
			]
		},
		{
			"ID": "20230317110149-r00q0jp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230317110149-r00q0jp",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程的优点"
				}
			]
		},
		{
			"ID": "20230317110149-vyykki1",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230317110149-vyykki1",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"ID": "20230317110149-t28qv27",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230317110149-t28qv27",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-sdqxo4v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-sdqxo4v",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建一个新线程的代价要比创建一个新进程小得多"
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-3mftdwt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230317110149-3mftdwt",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-elu3an1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-elu3an1",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "与进程之间的切换相比，线程之间的切换需要操作系统做的工作要少很多"
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-6qrqoa3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230317110149-6qrqoa3",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-3hk1whl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-3hk1whl",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "线程占用的资源要比进程少很多"
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-kibpvr3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230317110149-kibpvr3",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-rqdstum",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-rqdstum",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "能充分利用多处理器的可并行数量"
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-nykvgoq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230317110149-nykvgoq",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-qecshti",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-qecshti",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在等待慢速I/O操作结束的同时，程序可执行其他的计算任务"
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-rqkv1rz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230317110149-rqkv1rz",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-xn7kz7a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-xn7kz7a",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "计算密集型应用，为了能在多处理器系统上运行，将计算分解到多个线程中实现"
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-dwlcjj6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230317110149-dwlcjj6",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-5xiwt4e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-5xiwt4e",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "I/O密集型应用，为了提高性能，将I/O操作重叠。线程可以同时等待不同的I/O操作。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230317110149-2pflioh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230317110149-2pflioh",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程的缺点"
				}
			]
		},
		{
			"ID": "20230317110149-jzskg1z",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230317110149-jzskg1z",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"ID": "20230317110149-4wxpfey",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230317110149-4wxpfey",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-qwb5hkl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-qwb5hkl",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "性能损失"
								}
							]
						},
						{
							"ID": "20230317110149-p1uugf0",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230317110149-p1uugf0",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"ID": "20230317110149-a80fk2r",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230317110149-a80fk2r",
										"updated": "20230317110149"
									},
									"Children": [
										{
											"ID": "20230317110149-x5w0fsk",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230317110149-x5w0fsk",
												"updated": "20230317110149"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "一个很少被外部事件阻塞的计算密集型线程往往无法与共它线程共享同一个处理器。如果计算密集型线程的数量比可用的处理器多，那么可能会有较大的性能损失，这里的性能损失指的是增加了额外的同步和调度开销，而可用的资源不变。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-5znmi1q",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230317110149-5znmi1q",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-ebx194e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-ebx194e",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "健壮性降低"
								}
							]
						},
						{
							"ID": "20230317110149-4mz9vyq",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230317110149-4mz9vyq",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"ID": "20230317110149-f48tpp6",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230317110149-f48tpp6",
										"updated": "20230317110149"
									},
									"Children": [
										{
											"ID": "20230317110149-b48iocn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230317110149-b48iocn",
												"updated": "20230317110149"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "编写多线程需要更全面更深入的考虑，在一个多线程程序里，因时间分配上的细微偏差或者因共享了不该共享的变量而造成不良影响的可能性是很大的，换句话说线程之间是缺乏保护的。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-wu8c992",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230317110149-wu8c992",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-6hifrlg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-6hifrlg",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "缺乏访问控制"
								}
							]
						},
						{
							"ID": "20230317110149-dczjyzu",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230317110149-dczjyzu",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"ID": "20230317110149-9gsur1p",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230317110149-9gsur1p",
										"updated": "20230317110149"
									},
									"Children": [
										{
											"ID": "20230317110149-yf4wnjp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230317110149-yf4wnjp",
												"updated": "20230317110149"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "进程是访问控制的基本粒度，在一个线程中调用某些OS函数会对整个进程造成影响。"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-1nwilop",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230317110149-1nwilop",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-cm491a9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-cm491a9",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "编程难度提高"
								}
							]
						},
						{
							"ID": "20230317110149-vgku7zx",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230317110149-vgku7zx",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"ID": "20230317110149-6s8rfw4",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230317110149-6s8rfw4",
										"updated": "20230317110149"
									},
									"Children": [
										{
											"ID": "20230317110149-n6lchdc",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230317110149-n6lchdc",
												"updated": "20230317110149"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "编写与调试一个多线程程序比单线程程序困难得多"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230317110149-4v7acq6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-4v7acq6",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-u58ogt8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230317110149-u58ogt8",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Linux的进程的概念"
				}
			]
		},
		{
			"ID": "20230317110149-2yduda3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-2yduda3",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "Linux中没有专门为线程设计TCB，而是用进程的PCB来模拟线程"
				},
				{
					"Type": "NodeText",
					"Data": "\n优点：不用维护复杂的进程和线程的关系，不用单独为线程设计任何算法,直接使用进程的一套相关的方法。0S只需要聚焦在线程间的资源分配上就可以了!\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315201735.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n进程是承担分配系统资源的基本实体! !\n线程是CPU调度的基本单位，承担进程资源的一部分的基本实体！\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "进程划分资源给线程"
				}
			]
		},
		{
			"ID": "20230317110149-y0oiwiq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-y0oiwiq",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315201746.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-e366rgo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-e366rgo",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-khbydxx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230317110149-khbydxx",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前学的进程 vs 今天的进程"
				}
			]
		},
		{
			"ID": "20230317110149-lni2tki",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-lni2tki",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "之前学的进程,内部只有一个执行流的进程"
				}
			]
		},
		{
			"ID": "20230317110149-m9hcfb8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-m9hcfb8",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "今天的进程,内部可以具有多个执行流"
				}
			]
		},
		{
			"ID": "20230317110149-ji47u7s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-ji47u7s",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-wu2mi5h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230317110149-wu2mi5h",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Linux线程与接口关系的认识"
				}
			]
		},
		{
			"ID": "20230317110149-4shva31",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-4shva31",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Linux PCB\u003c=传统意义上的进程PCB Linux进程，轻量级进程"
				}
			]
		},
		{
			"ID": "20230317110149-3s9y833",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230317110149-3s9y833",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"ID": "20230317110149-gqoxh67",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230317110149-gqoxh67",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-e4ltw4o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-e4ltw4o",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "OS创建\"线程\""
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-9pzjcdi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230317110149-9pzjcdi",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-r9nkyq3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-r9nkyq3",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "CPU调度"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230317110149-cl3h39h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-cl3h39h",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-z6vkkq4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-z6vkkq4",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Linux因为是用进程模拟的，所以Linux下不会给我们提供直接操作线程的接口，而是给我们提供，在同一个地址空间内创建PCB的方法，分配资源给指定的PCB的接口\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202027.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n系统级别的工程师，在用户层对Linux轻量级进程接口进行封装,给我们打包成库，让用直接使用库接口，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "原生线程库"
				},
				{
					"Type": "NodeText",
					"Data": "(用户层)"
				}
			]
		},
		{
			"ID": "20230317110149-v2zs62q",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230317110149-v2zs62q",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Linux进程VS线程"
				}
			]
		},
		{
			"ID": "20230317110149-pgz5tdx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230317110149-pgz5tdx",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "进程和线程"
				}
			]
		},
		{
			"ID": "20230317110149-pfqntfx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-pfqntfx",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "进程是资源分配的基本单位线程是调度的基本单位线程共享进程数据，但也拥有自己的一部分数据"
				}
			]
		},
		{
			"ID": "20230317110149-ml9k1s0",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230317110149-ml9k1s0",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230317110149-h9v5f5h",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230317110149-h9v5f5h",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "线程ID\n一组寄存器\n栈\nerrno\n信号屏蔽字\n调度优先级"
						}
					]
				}
			]
		},
		{
			"ID": "20230317110149-7bwgb1a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-7bwgb1a",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "进程的多个线程共享  同一地址空间,因此Text Segment、Data Segment都是共享的,如果定义一个函数,在各线程中都可以调用,如果定义一个全局变量,在各线程中都可以访问到,除此之外,各线程还"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "共享以下进程资源和环境"
				},
				{
					"Type": "NodeText",
					"Data": ":"
				}
			]
		},
		{
			"ID": "20230317110149-e9hrsbb",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230317110149-e9hrsbb",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230317110149-zov9pz5",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230317110149-zov9pz5",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "文件描述符表\n每种信号的处理方式(SIG_ IGN、SIG_ DFL或者自定义的信号处理函数)\n当前工作目录\n用户id和组id"
						}
					]
				}
			]
		},
		{
			"ID": "20230317110149-hvfjupw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-hvfjupw",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202051.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-628cf1f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-628cf1f",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-hb4odoh",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230317110149-hb4odoh",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_create() 函数"
				}
			]
		},
		{
			"ID": "20230317110149-raakbak",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-raakbak",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：创建一个线程\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202109.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-hq4jmtd",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230317110149-hq4jmtd",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230317110149-wjx4hi0",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230317110149-wjx4hi0",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "函数参数："
						}
					]
				},
				{
					"ID": "20230317110149-v74h0yi",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230317110149-v74h0yi",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark strong",
							"TextMarkTextContent": "thread"
						},
						{
							"Type": "NodeText",
							"Data": ":返回线程ID\n"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark strong",
							"TextMarkTextContent": "attr"
						},
						{
							"Type": "NodeText",
							"Data": ":设置线程的属性，attr为NULL表示使用默认属性\n"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark strong",
							"TextMarkTextContent": "start_routine"
						},
						{
							"Type": "NodeText",
							"Data": ":是个函数地址，线程启动后要执行的函数\n"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark strong",
							"TextMarkTextContent": "arg"
						},
						{
							"Type": "NodeText",
							"Data": ":传给线程启动函数的参数\n"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark strong",
							"TextMarkTextContent": "返回值"
						},
						{
							"Type": "NodeText",
							"Data": "：成功返回0；失败返回错误码"
						}
					]
				}
			]
		},
		{
			"ID": "20230317110149-z1s4x9q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230317110149-z1s4x9q",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cpthread.h\u003e//想要调用pthread.h中的函数必须在编译时，动态链接到pthread库\n#include \u003cunistd.h\u003e\n\nvoid *thread_run(void *args)\n{\n    const char *id = (const char*)args;\n    while(1)\n    {\n        printf(\"我是%s线程, %d\\n\", id, getpid());\n        sleep(1);\n    }\n}\n\nint main()\n{\n    pthread_t tid;\n    pthread_create(\u0026tid, NULL, thread_run, (void*)\"thread 1\");\n\n    while(1){\n        printf(\"我是main 线程, %d\\n\", getpid());\n        sleep(1);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230317110149-324cn3o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-324cn3o",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "gcc  xxx.c -lpthread"
				},
				{
					"Type": "NodeText",
					"Data": "​ 进行编译。"
				}
			]
		},
		{
			"ID": "20230317110149-ewitq0a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-ewitq0a",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-4r6v58v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-4r6v58v",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行结果，发现在进程中只有一个进程，因为thread是一个线程，pid是与进程共享的。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202139.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-003upzr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-003upzr",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用9号指令关闭进程，线程也相应关闭了。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202146.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-5z3wb6a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-5z3wb6a",
				"updated": "20230317111054"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20220913222001-gsvxdn3",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "ps -aL"
				},
				{
					"Type": "NodeText",
					"Data": "指令来查看轻量级进程，也就是线程，可以看到线程的pid和进程pid是相同的，我们可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "LWP"
				},
				{
					"Type": "NodeText",
					"Data": "来分辨线程，进程的PID和LWP是相同的，线程会比进程多1。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202150.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-wmp0xxe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-wmp0xxe",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-lk8q48q",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230317110149-lk8q48q",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_self()"
				}
			]
		},
		{
			"ID": "20230317110149-qzk2ivu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-qzk2ivu",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "作用"
				},
				{
					"Type": "NodeText",
					"Data": "：获得此线程的ID\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202223.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n建议在线程创建中的 thread_run() 函数中使用。"
				}
			]
		},
		{
			"ID": "20230317110149-8dk9g1y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-8dk9g1y",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-azx5bpj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230317110149-azx5bpj",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建多个进程 并 验证健壮性"
				}
			]
		},
		{
			"ID": "20230317110149-ig45va2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-ig45va2",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用for循环来创建 多个线程，但是线程有个缺点：健壮性弱\n只要有个线程因为因为错误崩了，相关的所有进程与线程都会崩溃。"
				}
			]
		},
		{
			"ID": "20230317110149-k3yer47",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-k3yer47",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "线程崩溃的影响一定是有限的-\u0026gt;在进程内部-\u0026gt;进程具有独立性!"
				}
			]
		},
		{
			"ID": "20230317110149-7af3gd1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230317110149-7af3gd1",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cpthread.h\u003e\n\n\nvoid* thread_run(void* args)\n{\n    int num = *(int*)args;\n    while(1)\n    {\n        printf(\"我是新进程[%d] , 我创建的线程ID是：%lu\\n\", num , pthread_self());\n        sleep(10);\n        if(num == 3)//野指针问题\n        {\n            printf(\"thread number : %d , quit \\n\" , num);\n            int* p = NULL;\n            *p = 10;\n        }\n    }\n}\n\n\nint main()\n{\n    pthread_t tid[5];\n\n    for(int i = 0; i \u003c 5 ; i++)\n    {\n        pthread_create(tid+i , NULL, thread_run ,(void*)\u0026i );\n        sleep(1);\n    }\n\n    while(1)\n    {\n        printf(\"##################begin###################\\n\");\n        for(int i = 0 ; i \u003c 5 ; i++ )\n        {\n            printf(\"我创建的线程[%d]是：%lu\\n\", i ,tid[i]);\n        }\n        printf(\"##################end####################\\n\");\n        sleep(1);\n    }\n\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230317110149-6xslb64",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-6xslb64",
				"updated": "20230317110158"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202300.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-qmn3e27",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-qmn3e27",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-up8lqo5",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230317110149-up8lqo5",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_join()"
				}
			]
		},
		{
			"ID": "20230317110149-8jknz3b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-8jknz3b",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般而言，线程也是需要等待的，如果不等待，可能会出现“"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20220722141506-dooxkzp",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "僵尸进程"
				},
				{
					"Type": "NodeText",
					"Data": "”的问题\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202317.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-f7ppe5r",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230317110149-f7ppe5r",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数参数："
				}
			]
		},
		{
			"ID": "20230317110149-brgoxy0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-brgoxy0",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "thread"
				},
				{
					"Type": "NodeText",
					"Data": ": 也就是我们得到的线程ID\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "retral"
				},
				{
					"Type": "NodeText",
					"Data": " ：是获取thread_run 函数的返回值。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "返回值"
				},
				{
					"Type": "NodeText",
					"Data": "：成功则返回0，失败返回 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "错误码"
				}
			]
		},
		{
			"ID": "20230317110149-u82lcxu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230317110149-u82lcxu",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_join()实例代码"
				}
			]
		},
		{
			"ID": "20230317110149-c34eq2z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230317110149-c34eq2z",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cpthread.h\u003e\n\n\nvoid* thread_run(void* args)\n{\n    int num = *(int*)args;\n    while(1)\n    {\n        printf(\"我是新进程[%d] , 我创建的线程ID是：%lu\\n\", num , pthread_self());\n        sleep(5);\n\t    break;\n    }\n\n    return (void*)100;\n}\n\n#define NUM 1\nint main()\n{\n    pthread_t tid[NUM];\n\n    for(int i = 0; i \u003c NUM ; i++)\n    {\n        pthread_create(tid+i , NULL, thread_run ,(void*)\u0026i );\n        sleep(1);\n    }\n\n    void* status = NULL;//因为pthread_join函数的第二个参数是 二级指针，所以需要使用一级指针来存储\n\n    pthread_join(tid[0] , \u0026status );//创建多个线程的话，所有线程都需要进行等待\n\n    printf(\"ret : %d\\n\" , (int)status);\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230317110149-a2hycjo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-a2hycjo",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等待成功\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202346.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-adi8cgd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-adi8cgd",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程只用关心代码跑完结果是对还是不对，不关心异常，因为异常是由进程负责的。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230315202353.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230317110149-dykpfz7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-dykpfz7",
				"updated": "20230317110149"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意：等待多个线程的时，需要一个一个的等，也需要用到循环"
				}
			]
		},
		{
			"ID": "20230317110149-tfj5m72",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-tfj5m72",
				"updated": "20230317110149"
			}
		},
		{
			"ID": "20230317110149-f1w2av1",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230317110149-f1w2av1",
				"updated": "20230317120058"
			}
		},
		{
			"ID": "20230317110149-53gjppx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110149-53gjppx",
				"updated": "20230317115818"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果需要只终止某个线程而不终止整个进程,可以有三种方法:"
				}
			]
		},
		{
			"ID": "20230317110149-8vmm48v",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230317110149-8vmm48v",
				"updated": "20230317115818"
			},
			"Children": [
				{
					"ID": "20230317110149-5mmur4d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230317110149-5mmur4d",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-5brg5ne",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-5brg5ne",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "函数中return"
								}
							]
						},
						{
							"ID": "20230317110149-7qujark",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230317110149-7qujark",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"ID": "20230317110149-nnndhe2",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230317110149-nnndhe2",
										"updated": "20230317110149"
									},
									"Children": [
										{
											"ID": "20230317110149-4sekkw1",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230317110149-4sekkw1",
												"updated": "20230317110149"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "main函数退出return的时候代表(主线程and进程退出)"
												}
											]
										}
									]
								},
								{
									"ID": "20230317110149-4rp82k4",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230317110149-4rp82k4",
										"updated": "20230317110149"
									},
									"Children": [
										{
											"ID": "20230317110149-smia25s",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230317110149-smia25s",
												"updated": "20230317110149"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "其他线程函数return，只代表当前线程退出"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-hqr5dts",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230317110149-hqr5dts",
						"updated": "20230317110926"
					},
					"Children": [
						{
							"ID": "20230317110149-m4nxylv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-m4nxylv",
								"updated": "20230317110926"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "新线程通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20221011090456-su92bos",
									"TextMarkBlockRefSubtype": "s",
									"TextMarkTextContent": "pthread_exit()"
								},
								{
									"Type": "NodeText",
									"Data": "终止自己( vs exit()是终止进程，不要在其他线程中调用，如果你就想终止一个线程的话! !)"
								}
							]
						}
					]
				},
				{
					"ID": "20230317110149-xx9ga97",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230317110149-xx9ga97",
						"updated": "20230317110149"
					},
					"Children": [
						{
							"ID": "20230317110149-suhbut7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230317110149-suhbut7",
								"updated": "20230317110149"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "block-ref",
									"TextMarkBlockRefID": "20221011090456-9qh59bm",
									"TextMarkBlockRefSubtype": "d",
									"TextMarkTextContent": "pthread_cancel()"
								},
								{
									"Type": "NodeText",
									"Data": "取消目标线程!"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230317110148-v1k751e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230317110148-v1k751e",
				"updated": "20230317115816"
			}
		},
		{
			"ID": "20221011090456-v6xr0ce",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-v6xr0ce",
				"updated": "20230317115815"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "作用"
				},
				{
					"Type": "NodeText",
					"Data": "：终止本线程\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220914192727"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220914192727-20221011091007-tewg6vu.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-3y153d0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-3y153d0",
				"updated": "20230317115814"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数参数"
				}
			]
		},
		{
			"ID": "20221011090456-eleaxw8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-eleaxw8",
				"updated": "20230317115813"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "retval"
				},
				{
					"Type": "NodeText",
					"Data": " : retval不要指向一个局部变量。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "返回值"
				},
				{
					"Type": "NodeText",
					"Data": "：无返回值，跟进程一样，线程结束的时候无法返回到它的调用者（自身）"
				}
			]
		},
		{
			"ID": "20221011090456-wpjpth1",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011090456-wpjpth1",
				"updated": "20230317115812"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011090456-7cehpgw",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011090456-7cehpgw",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "需要注意,pthread_exit或者return返回的指针所指向的内存单元必须是全局的或者是用malloc分配的,不能在线程函数的栈上分配,因为当其它线程得到这个返回指针时线程函数已经退出了。"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-su92bos",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-su92bos",
				"updated": "20230317115811"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_exit()实例"
				}
			]
		},
		{
			"ID": "20221011090456-rwajffn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-rwajffn",
				"updated": "20230317115811"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cpthread.h\u003e\n\n\nvoid* thread_run(void* args)\n{\n    int num = *(int*)args;\n    while(1)\n    {\n        printf(\"我是新进程[%d] , 我创建的线程ID是：%lu\\n\", num , pthread_self());\n        sleep(5);\n        pthread_exit((void*)765);\n       break;\n    }\n\n    return (void*)100;\n}\n\n#define NUM 1\nint main()\n{\n    pthread_t tid[NUM];\n    for(int i = 0; i \u003c NUM ; i++)\n    {\n        pthread_create(tid+i , NULL, thread_run ,(void*)\u0026i );\n        sleep(1);\n    }\n\n    void* status = NULL;\n\n    pthread_join(tid[0] , \u0026status );\n\n    printf(\"ret : %d\\n\" , (int)status);\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-bwnz7ok",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-bwnz7ok",
				"updated": "20230317115810"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220914195244"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220914195244-20221011091209-as8m64w.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011091220-j6b2d7e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011091220-j6b2d7e"
			}
		},
		{
			"ID": "20221011090456-9qh59bm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-9qh59bm",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_cancel()"
				}
			]
		},
		{
			"ID": "20221011090456-29isyt1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-29isyt1",
				"updated": "20221011091216"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：终止本进程或其他线程\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220914195010"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220914195010-20221011091216-dv69hme.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-x7suz8h",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-x7suz8h",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数参数"
				}
			]
		},
		{
			"ID": "20221011090456-nepnqnj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-nepnqnj",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "thread"
				},
				{
					"Type": "NodeText",
					"Data": ":线程ID\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "返回值"
				},
				{
					"Type": "NodeText",
					"Data": "：成功返回0；失败返回错误码"
				}
			]
		},
		{
			"ID": "20221011090456-415ihim",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-415ihim",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_cancel()实例"
				}
			]
		},
		{
			"ID": "20221011090456-rt411dh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-rt411dh",
				"updated": "20221011091227"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cpthread.h\u003e\n\npthread_t g_id;\n\nvoid* thread_run(void* args)\n{\n    int num = *(int*)args;\n    while(1)\n    {\n        printf(\"我是新进程[%d] , 我创建的线程ID是：%lu\\n\", num , pthread_self());\n        sleep(10);\n        break;\n    }\n}\n\n#define NUM 1\nint main()\n{\n    pthread_t tid[NUM];\n\n    g_id = pthread_self();\n\n    for(int i = 0; i \u003c NUM ; i++)\n    {\n        pthread_create(tid+i , NULL, thread_run ,(void*)\u0026i );\n        sleep(1);\n    }\n    printf(\"wait sub thread... \\n\");\n\n    sleep(1);\n\n    printf(\"cancel sub thread ...\\n\");\n    pthread_cancel(tid[0]);\n  \n    void* status = NULL;\n\n    sleep(3);\n\n    pthread_join(tid[0] , \u0026status );\n\n    printf(\"ret : %d\\n\" , (int)status); \n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-4vwjdfd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-4vwjdfd",
				"updated": "20221011091351"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220914202147"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220914202147-20221011091351-oeqnomc.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n成功退出指定线程后，线程函数带回的返回值是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "-1"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20221011090456-phaqv4y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-phaqv4y",
				"updated": "20230317110241"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程可以使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "pthread_cancel()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 可以关闭主线程，但是主线程会是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "僵尸进程"
				},
				{
					"Type": "NodeText",
					"Data": " ，因为线程还在进程中运行"
				}
			]
		},
		{
			"ID": "20221011090456-mvoiewj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-mvoiewj",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cpthread.h\u003e\n\npthread_t g_id;\n\nvoid* thread_run(void* args)\n{\n    int num = *(int*)args;\n    while(1)\n    {\n        printf(\"我是新进程[%d] , 我创建的线程ID是：%lu\\n\", num , pthread_self());\n        sleep(2);\n        pthread_cancel(g_id);\n    }\n}\n\n#define NUM 1\nint main()\n{\n    pthread_t tid[NUM];\n\n    g_id = pthread_self();\n\n    for(int i = 0; i \u003c NUM ; i++)\n    {\n        pthread_create(tid+i , NULL, thread_run ,(void*)\u0026i );\n        sleep(1);\n    }\n    printf(\"wait sub thread... \\n\");\n\n    sleep(30);\n\n    printf(\"cancel sub thread ...\\n\");\n\n    pthread_cancel(tid[0]);\n    void* status = NULL;\n\n    sleep(3);\n\n    pthread_join(tid[0] , \u0026status );\n\n    printf(\"ret : %d\\n\" , (int)status);\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-l9mb6jd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-l9mb6jd",
				"updated": "20221011091425"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220914201419"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220914201419-20221011091400-y0pzeae.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n defunct 就表示"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20220722141506-dooxkzp",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "Z(zombie)僵尸进程"
				},
				{
					"Type": "NodeText",
					"Data": "。\n 此时使用进程查询也能查询到进程处于 Z 状态\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220914201926"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220914201926-20221011091406-0dqc1pw.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011091437-rm967d4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011091437-rm967d4"
			}
		},
		{
			"ID": "20221011090456-6k680e5",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011090456-6k680e5",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程分离"
				}
			]
		},
		{
			"ID": "20221011090456-kqmivjt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-kqmivjt",
				"updated": "20230317110830"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认情况下，新创建的线程是join的，线程退出后，需要对其进行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230317110149-up8lqo5",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "pthread_join()"
				},
				{
					"Type": "NodeText",
					"Data": "操作，否则无法释放资源，从而造成系统泄漏。\n如果"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "不关心线程的返回值"
				},
				{
					"Type": "NodeText",
					"Data": "，join是一种负担，这个时候，我们可以告诉系统，当线程退出时，自动释放线程资源。"
				}
			]
		},
		{
			"ID": "20221011090456-b05pfze",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-b05pfze",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_datach()"
				}
			]
		},
		{
			"ID": "20221011090456-xli4xur",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-xli4xur",
				"updated": "20221011091555"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以是线程组内其他线程对目标线程进行分离，也可以是线程自己分离:\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "join和分离是冲突的，一个线程不能既是join又是分离的"
				},
				{
					"Type": "NodeText",
					"Data": "。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220914203333"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220914203333-20221011091544-h7wydmw.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-lyyw7gj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-lyyw7gj",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cpthread.h\u003e\n\npthread_t g_id;\n\nvoid* thread_run(void* args)\n{\n    pthread_detach(pthread_self());//进行线程分离  \n    int num = *(int*)args;\n    while(1)\n    {\n        printf(\"我是新进程[%d] , 我创建的线程ID是：%lu\\n\", num , pthread_self());\n        sleep(10);\n\n\n    }\n\n    return (void*)100;\n}\n\n#define NUM 1\nint main()\n{\n    pthread_t tid[NUM];\n\n    g_id = pthread_self();\n\n    for(int i = 0; i \u003c NUM ; i++)\n    {\n        pthread_create(tid+i , NULL, thread_run ,(void*)\u0026i );\n        sleep(1);\n    }\n    printf(\"wait sub thread... \\n\");\n\n    sleep(5);\n\n    printf(\"cancel sub thread ...\\n\");\n\n    pthread_cancel(tid[0]);\n    void* status = NULL;\n\n    sleep(3);\n\n    pthread_join(tid[0] , \u0026status );//最好不要join\n\n    printf(\"ret : %d\\n\" , (int)status);\n\n\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-a4qutmu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-a4qutmu",
				"updated": "20221011091648"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220914203641"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220914203641-20221011091648-6vyepot.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-r6av2zh",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011090456-r6av2zh",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们看到的线程ID"
				}
			]
		},
		{
			"ID": "20221011090456-0g9wp28",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-0g9wp28",
				"updated": "20221011091844"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220919173641"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220919173641-20221011091844-4tgrf1j.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n我们查看到的线程id是pthread库的线程id，不是Linux内核中的LWP，pthread库的线程id是一个内存地址!!!"
				}
			]
		},
		{
			"ID": "20221011090456-hgbupm8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-hgbupm8",
				"updated": "20230317110738"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230317110149-hb4odoh",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "pthread_create() 函数"
				},
				{
					"Type": "NodeText",
					"Data": "第一个参数指向一个虚拟内存单元，该内存单元的地址即为新创建线程的线程ID，\n属于NPTL线程库的范畴。线程库的后续操作，就是根据该线程ID来操作线程的。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220919173903"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220919173903-20221011091857-hgxgw6h.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n在物理内存中，一定会加载pthread"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20220904134255-qgf21f1",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "动态库的构成"
				},
				{
					"Type": "NodeText",
					"Data": "，然后通过页表映射到了虚拟地址中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "mmap区域"
				},
				{
					"Type": "NodeText",
					"Data": "，也就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "共享区"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20221011090456-jinbceb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-jinbceb",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个线程都有要运行的临时数据，所以每个线程都有自己的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "私有"
				},
				{
					"Type": "NodeText",
					"Data": "栈结构，在物理地址中，一定会使用像 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "tcb tcbs[1000]"
				},
				{
					"Type": "NodeText",
					"Data": " 的数组形式来存储线程的结构，映射到了虚拟地址后，由动态库对其进行维护，如图中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "pthread_t tid"
				},
				{
					"Type": "NodeText",
					"Data": " 来对相应线程进行管理。"
				}
			]
		},
		{
			"ID": "20221011090456-9yq6dj5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-9yq6dj5",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "用户级线程怎么对应内核级的轻量级进程呢？"
				}
			]
		},
		{
			"ID": "20221011090456-t1yqwtt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-t1yqwtt",
				"updated": "20230317110345"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其实就像 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20220722153059-8kbs55c",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "FIFE-\u0026gt;fd"
				},
				{
					"Type": "NodeText",
					"Data": "的关系一样，在用户级线程一定要包含LWP来找到内核中的对应的内核级线程。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220919180537"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220919180537-20221011092433-7wt0sgn.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20221011092438-e62r0so",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011092438-e62r0so"
			}
		},
		{
			"ID": "20221011090456-fh02i94",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011090456-fh02i94",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程互斥"
				}
			]
		},
		{
			"ID": "20221011090456-aut96oe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-aut96oe",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需具有的背景知识"
				}
			]
		},
		{
			"ID": "20221011090456-vrx9juy",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-vrx9juy",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-r4aidzv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-r4aidzv",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-tnt0k30",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-tnt0k30",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark",
									"TextMarkTextContent": "临界资源"
								},
								{
									"Type": "NodeText",
									"Data": "：多线程执行流共享的资源就叫做临界资源"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-yoyuk92",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-yoyuk92",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-i2k843g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-i2k843g",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark",
									"TextMarkTextContent": "临界区"
								},
								{
									"Type": "NodeText",
									"Data": "：每个线程内部，访问临界资源的代码，就叫做临界区"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-b9tmo80",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-b9tmo80",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-ori376v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-ori376v",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark",
									"TextMarkTextContent": "互斥"
								},
								{
									"Type": "NodeText",
									"Data": "：任何时刻，互斥保证有且只有一个执行流进入临界区，访问临界资源，通常对临界资源起保护作用"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-6w6zyc3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-6w6zyc3",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-7auhoyf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-7auhoyf",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark",
									"TextMarkTextContent": "原子性"
								},
								{
									"Type": "NodeText",
									"Data": "（后面讨论如何实现）：不会被任何调度机制打断的操作，该操作只有两态，要么完成，要么未完成"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-nfvoy6t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-nfvoy6t",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程互斥的必要性"
				}
			]
		},
		{
			"ID": "20221011090456-iyes7vq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-iyes7vq",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为多个线程是共享地址空间的，也就是很多资源都是共享的\n优点:通信方便\n缺点:缺乏访问控制\n因为一个线程的操作问题，给其他线程造成了不可控，或者引起崩溃，异常，逻辑不正确等问题，这种现象:"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "线程安全"
				},
				{
					"Type": "NodeText",
					"Data": "\n创建一个函数没有线程安全问题的话，不要使用全局，stl， malloc， new等会在全局内有效的数据，使用的话也需要"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "访问控制"
				}
			]
		},
		{
			"ID": "20221011090456-6grvvor",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-6grvvor",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那为什么我们之前使用的那些变量没有问题？ "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "因为全部都是局部变量!线程有自己的独立栈结构!"
				}
			]
		},
		{
			"ID": "20221011090456-hxf42zs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-hxf42zs",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "综上，所以我们需要线程的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "互斥"
				},
				{
					"Type": "NodeText",
					"Data": "与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "同步"
				}
			]
		},
		{
			"ID": "20221011090456-yea502h",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-yea502h",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cunistd.h\u003e\n#include \u003cpthread.h\u003e\n#include \u003ccstdio\u003e\n#include \u003cstring\u003e\n#include \u003cctime\u003e\n\n// 抢票逻辑，10000票，5线程同时再抢\n//tickets是不是就是所谓的临界资源！ tickets-- 是原子的吗？(是安全的吗？)\n//为了让多个线程进行切换，线程什么时候可能切换(1. 时间片到了 2. 检测的时间点：从内核态返回用户态的时候)\nint tickets = 1000;\n\nvoid* pthread_route(void *args)\n{\n    int id = *(int*)args;\n\n    delete (int*)args;\n    while(true)\n    {\n        if(tickets \u003e 0 )\n        {\n            usleep(1000);\n            std::cout \u003c\u003c \"我是[\" \u003c\u003c id \u003c\u003c \"]我要抢的票是：\"\u003c\u003c tickets \u003c\u003c std::endl;\n            tickets--;\n            printf(\"\");\n        }\n        else\n        {\n            break;\n        }\n    }\n}\n\nint main()\n{\n    pthread_t tid[5];\n    for(int i = 0 ; i \u003c 5 ; i++)\n    {\n        int *id = new int(i);\n        pthread_create(tid+i , nullptr , pthread_route , (void*)id );\n    }\n\n    for(int i = 0 ; i \u003c 5 ; i++)\n    {\n        pthread_join(tid[i] , nullptr);\n    }\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-t1kl28s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-t1kl28s",
				"updated": "20221011092512"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发现票被抢到了负数。原因就在于 tickets不是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "原子"
				},
				{
					"Type": "NodeText",
					"Data": "的。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220919221310"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220919221310-20221011092512-he4c9po.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011092517-97y2w9b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011092517-97y2w9b"
			}
		},
		{
			"ID": "20221011090456-xoip1hr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-xoip1hr",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "--"
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "++"
				},
				{
					"Type": "NodeText",
					"Data": "的原子性探讨"
				}
			]
		},
		{
			"ID": "20221011090456-kole52j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-kole52j",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为了让多个线程进行切换，线程什么时候可能切换"
				}
			]
		},
		{
			"ID": "20221011090456-pend2gm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221011090456-pend2gm",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-uy5i220",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221011090456-uy5i220",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-ed9d4fo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-ed9d4fo",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "时间片到了"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-ykx3j6m",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221011090456-ykx3j6m",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-2elbjy5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-2elbjy5",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "检测的时间点：从内核态返回用户态的时候"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-zi0pwfv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-zi0pwfv",
				"updated": "20221011092526"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "--"
				},
				{
					"Type": "NodeText",
					"Data": " 或 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "++"
				},
				{
					"Type": "NodeText",
					"Data": " 在汇编中是多行代码，并非是原子的\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220919222324"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220919222324-20221011092526-p7d1pje.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n所以当线程在CPU寄存器中进行运算时，随时都有可能被切走。"
				}
			]
		},
		{
			"ID": "20221011090456-5xn91yc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-5xn91yc",
				"updated": "20221011092536"
			},
			"Children": [
				{
					"ID": "20221011090456-ldgglck",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-ldgglck",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-qxt86qk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-qxt86qk",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "若此时A线程的tickets计算到了999，A线程就会将其保存到了A线程的上下文中。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-lbpmvhq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-lbpmvhq",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-4cenkhj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-4cenkhj",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "随后切换到B线程，B线程比较幸运，一直运算到将1000 减到了 10，但也还没运算结束，保存上下文数据到B线程中。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-ifqrxed",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-ifqrxed",
						"updated": "20221011092536"
					},
					"Children": [
						{
							"ID": "20221011090456-0nqwbo8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-0nqwbo8",
								"updated": "20221011092536"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "随后在切换到A线程，恢复A线程的上下文数据，A线程的tickets是999，故此tickets又恢复到了999，B线程之前的工作也就白做了。\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20220919221522"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/Pasted image 20220919221522-20221011092536-2jva409.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-cvillrb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-cvillrb",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "互斥量的接口"
				}
			]
		},
		{
			"ID": "20221011090456-sodw29i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-sodw29i",
				"updated": "20221011092712"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "NAME\n       pthread_mutex_destroy, pthread_mutex_init - destroy  and  initialize  amutex\n\nSYNOPSIS\n       #include \u003cpthread.h\u003e\n\nint pthread_mutex_destroy(pthread_mutex_t *mutex);//销毁锁\n   \nint pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr); //对锁进行初始化\n   \npthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;//创建锁变量\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-i03f7el",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-i03f7el",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "初始化互斥量"
				}
			]
		},
		{
			"ID": "20221011090456-1wjlaiy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-1wjlaiy",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "初始化互斥量有两种方法：\n方法1，静态分配:\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER"
				}
			]
		},
		{
			"ID": "20221011090456-92ge1kj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-92ge1kj",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方法2，动态分配:\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);"
				}
			]
		},
		{
			"ID": "20221011090456-5hm2hh9",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011090456-5hm2hh9",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011090456-54b0u84",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011090456-54b0u84",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "参数：\nmutex：要初始化的互斥量\nattr：NULL"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-w1srnm2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-w1srnm2",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "销毁互斥量"
				}
			]
		},
		{
			"ID": "20221011090456-19nq87b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-19nq87b",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int pthread_mutex_destroy(pthread_mutex_t *mutex)；"
				}
			]
		},
		{
			"ID": "20221011090456-tf4et52",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011090456-tf4et52",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011090456-are9aa3",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011090456-are9aa3",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "销毁互斥量需要注意："
						}
					]
				},
				{
					"ID": "20221011090456-rdknqmi",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221011090456-rdknqmi",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-5c30f6y",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-5c30f6y",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-8wlppgm",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-8wlppgm",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "使用 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "PTHREAD_ MUTEX_ INITIALIZER"
										},
										{
											"Type": "NodeText",
											"Data": " 初始化的互斥量不需要销毁"
										}
									]
								}
							]
						},
						{
							"ID": "20221011090456-r1u9w01",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-r1u9w01",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-dvuzpdb",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-dvuzpdb",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "不要销毁一个已经加锁的互斥量"
										}
									]
								}
							]
						},
						{
							"ID": "20221011090456-icv4d7w",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-icv4d7w",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-kjrbqe3",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-kjrbqe3",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "已经销毁的互斥量，要确保后面不会有线程再尝试加锁"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-lcjdnli",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-lcjdnli",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "互斥量加锁和解锁"
				}
			]
		},
		{
			"ID": "20221011090456-55hqde5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-55hqde5",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "NAME\n       pthread_mutex_lock, pthread_mutex_trylock, pthread_mutex_unlock -  lock\n       and unlock a mutex\n\nSYNOPSIS\n       #include \u003cpthread.h\u003e\n\n       int pthread_mutex_lock(pthread_mutex_t *mutex);\n       int pthread_mutex_trylock(pthread_mutex_t *mutex);\n       int pthread_mutex_unlock(pthread_mutex_t *mutex);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-rdx2mup",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-rdx2mup",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int pthread_mutex_lock(pthread_mutex_t *mutex);"
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int pthread_mutex_unlock(pthread_mutex_t *mutex); "
				},
				{
					"Type": "NodeText",
					"Data": "\n返回值:成功返回0,失败返回错误号"
				}
			]
		},
		{
			"ID": "20221011090456-0r46yvy",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011090456-0r46yvy",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011090456-j9bo1rf",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011090456-j9bo1rf",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "调用 pthread_ lock 时，可能会遇到以下情况:"
						}
					]
				},
				{
					"ID": "20221011090456-kwpq3iq",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221011090456-kwpq3iq",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-nay3gdm",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-nay3gdm",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-wj0cpgg",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-wj0cpgg",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "互斥量处于未锁状态，该函数会将互斥量锁定，同时返回成功"
										}
									]
								}
							]
						},
						{
							"ID": "20221011090456-p8121bh",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-p8121bh",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-x4jdgnw",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-x4jdgnw",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "发起函数调用时，其他线程已经锁定互斥量，或者存在其他线程同时申请互斥量，但没有竞争到互斥量，"
										}
									]
								}
							]
						},
						{
							"ID": "20221011090456-e91e9ky",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-e91e9ky",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-w59soq3",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-w59soq3",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "那么pthread_ lock调用会陷入阻塞(执行流被挂起)，等待互斥量解锁。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-zr9be5n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-zr9be5n",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "互斥量实现原理探究"
				}
			]
		},
		{
			"ID": "20221011090456-f0zstlw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-f0zstlw",
				"updated": "20221011092800"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "经过上面的例子，大家已经意识到单纯的 i++ 或者 ++i 都不是原子的，有可能会有数据一致性问题为了实现互斥锁操作,大多数体系结构都提供了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "swap"
				},
				{
					"Type": "NodeText",
					"Data": " 或"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "exchange"
				},
				{
					"Type": "NodeText",
					"Data": "指令,该指令的作用是把寄存器和内存单元的数据相交换,由于只有一条指令,保证了原子性,即使是多处理器平台,访问内存的  总线周期也有先后,  现在我们把lock和unlock的伪代码改一下\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220928173734"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220928173734-20221011092800-dz2kz86.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-1qs1qzv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-1qs1qzv",
				"updated": "20221011092807"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "swap 和 exchange 指令\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220928180854"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220928180854-20221011092807-tw7xn2i.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n如上图所示，其实就是将线程A或线程B一起去申请 锁(mutex) ,"
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "注意：当CPU执行线程的代码的时候，CPU内寄存器内的数据，是不是线程私有的!   "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "答案：是的，其实就是执行流的上下文"
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "%al"
				},
				{
					"Type": "NodeText",
					"Data": " 是一个CPU寄存器,"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "movb"
				},
				{
					"Type": "NodeText",
					"Data": "指令 其实就是在设置线程自己的上下文数据"
				}
			]
		},
		{
			"ID": "20221011090456-uje7t5f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-uje7t5f",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "xchgb"
				},
				{
					"Type": "NodeText",
					"Data": "指令使用一行汇编，原子性的完成共享的内存数据mutex，交换到线程A的上下文中，从而实现私有的过程!!\n如：线程A先进行"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "xchgb"
				},
				{
					"Type": "NodeText",
					"Data": "指令中，将"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "%al"
				},
				{
					"Type": "NodeText",
					"Data": "中的值与内存中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "mutex"
				},
				{
					"Type": "NodeText",
					"Data": "的值进行交换，之后线程A被切走，当线程B进入"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "xchgb"
				},
				{
					"Type": "NodeText",
					"Data": "中时，但发现"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "mutex"
				},
				{
					"Type": "NodeText",
					"Data": "的值已经被线程A给拿走了，这就是线程A竞争到了 锁。"
				}
			]
		},
		{
			"ID": "20221011090456-6acanpf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-6acanpf",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "mutex的本质:其实是通过一条汇编，将锁数据交换到自己的上下文中! !"
				}
			]
		},
		{
			"ID": "20221011090456-q16ql93",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-q16ql93",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对线程进行加锁"
				}
			]
		},
		{
			"ID": "20221011090456-wxv9jvi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-wxv9jvi",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "写个抢票小程序，如果再不加锁的情况下，抢票时可能会出现负数，或多人抢到了同一张票，这就是因为抢票这个动作不是原子的，所以需要加锁"
				}
			]
		},
		{
			"ID": "20221011090456-d6g9ksp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-d6g9ksp",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cunistd.h\u003e\n#include \u003cpthread.h\u003e\n#include \u003ccstdio\u003e\n#include \u003cstring\u003e\n#include \u003cctime\u003e\n\n// 抢票逻辑，10000票，5线程同时再抢\n//tickets是不是就是所谓的临界资源！ tickets-- 是原子的吗？(是安全的吗？)\n//为了让多个线程进行切换，线程什么时候可能切换(1. 时间片到了 2. 检测的时间点：从内核态返回用户态的时候)\n//int tickets = 1000;\n\nclass Ticket\n{\nprivate:\n    int tickets;\n    pthread_mutex_t mtx;//定义 锁变量\n\npublic:\n    Ticket()\n        :tickets(1000)\n    {\n        pthread_mutex_init(\u0026mtx , nullptr); //对锁进行初始化\n    }\n\n    ~Ticket()\n    {\n        pthread_mutex_destroy(\u0026mtx);//使用析构函数来销毁锁\n    }\n    bool GetTicket()\n    {\n        bool res = true;\n        pthread_mutex_lock(\u0026mtx); //对以下代码进行加锁\n        if(tickets \u003e 0 )\n        {\n            usleep(100);\n            std::cout \u003c\u003c \"我是[\" \u003c\u003c pthread_self() \u003c\u003c \"]我要抢的票是：\"\u003c\u003c tickets \u003c\u003c std::endl;\n            tickets--;\n            printf(\"\");\n        }\n        else\n        {\n            printf(\"票已经被抢空\\n\");\n            res = false;\n        }\n        pthread_mutex_unlock(\u0026mtx);//与lock对应，进行解锁\n        return res;\n    }\n};\n\nvoid* pthread_route(void *args)\n{\n   Ticket *t = (Ticket*)args;\n\n    while(true)\n    {\n      if (!t-\u003eGetTicket())//每次抢票后，退出循环，因为要给其他线程进行抢票\n\t\tbreak;\n    }\n}\n\nint main()\n{\n    Ticket* t = new Ticket();\n    pthread_t tid[5];\n    for(int i = 0 ; i \u003c 5 ; i++)\n    {\n        int *id = new int(i);\n        pthread_create(tid+i , nullptr , pthread_route , (void*)t );\n    }\n\n    for(int i = 0 ; i \u003c 5 ; i++)\n    {\n        pthread_join(tid[i] , nullptr);\n    }\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-lcvti8a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-lcvti8a",
				"updated": "20221011092845"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时的抢票程序是原子的了，就不会出现负数，或多人抢到了同一张票。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220927221114"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220927221114-20221011092845-zxeceyy.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-0rx5kzh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-0rx5kzh",
				"updated": "20221011093000"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个线程抢到的票都是不固定的，是因为每个线程抢票的时间片不同，所以票的多少是不一的，而且因为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "没有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20221011090456-ih258rh",
					"TextMarkBlockRefSubtype": "s",
					"TextMarkTextContent": "同步"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "机制"
				},
				{
					"Type": "NodeText",
					"Data": "。使用锁的线程，离锁比较近，所以竞争能力强，很容易申请到锁。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220927221032"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220927221032-20221011092854-fkmcryb.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-mfrs08k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-mfrs08k",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "'锁' 是临界资源吗？"
				}
			]
		},
		{
			"ID": "20221011090456-ctwcrjo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-ctwcrjo",
				"updated": "20221011093012"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "锁也是一种临界资源，因为它也可以被其他线程看到，不然无法保护 临界区。"
				}
			]
		},
		{
			"ID": "20221011090456-bxgv5dz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-bxgv5dz",
				"updated": "20221011093043"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "锁的工作原理"
				}
			]
		},
		{
			"ID": "20221011090456-tseacel",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-tseacel",
				"updated": "20221011093024"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220928174151"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220928174151-20221011093024-wwk7jhy.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-kul2dms",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011090456-kul2dms",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可重入VS线程安全"
				}
			]
		},
		{
			"ID": "20221011090456-snkf4pd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-snkf4pd",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "概念"
				}
			]
		},
		{
			"ID": "20221011090456-8yy1val",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-8yy1val",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-y6npszq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-y6npszq",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-b50ayu1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-b50ayu1",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "线程安全"
								},
								{
									"Type": "NodeText",
									"Data": "：多个线程并发同一段代码时，不会出现不同的结果。常见对全局变量或者静态变量进行操作，并且没有锁保护的情况下，会出现该问题。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-w9aotv4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-w9aotv4",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-psj23bx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-psj23bx",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "重入"
								},
								{
									"Type": "NodeText",
									"Data": "：同一个函数被不同的执行流调用，当前一个流程还没有执行完，就有其他的执行流再次进入，我们称之为重入。一个函数在重入的情况下，运行结果不会出现任何不同或者任何问题，则该函数被称为可重入函数，否则，是不可重入函数。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-ykkysox",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-ykkysox",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常见的线程不安全的情况"
				}
			]
		},
		{
			"ID": "20221011090456-oib05vt",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-oib05vt",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-virs07h",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-virs07h",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-lh7tk2b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-lh7tk2b",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不保护共享变量的函数"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-gejabdi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-gejabdi",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-7af0032",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-7af0032",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "函数状态随着被调用，状态发生变化的函数"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-482tgvs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-482tgvs",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-cgeughw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-cgeughw",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回指向静态变量指针的函数"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-0n3zicw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-0n3zicw",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-f5o0wka",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-f5o0wka",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用线程不安全函数的函数"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-rng3f3p",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-rng3f3p",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常见的线程安全的情况"
				}
			]
		},
		{
			"ID": "20221011090456-6159zxh",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-6159zxh",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-495g6sv",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-495g6sv",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-0dizsdx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-0dizsdx",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每个线程对全局变量或者静态变量只有读取的权限，而没有写入的权限，一般来说这些线程是安全的"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-3ioaco4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-3ioaco4",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-9t14l47",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-9t14l47",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类或者接口对于线程来说都是原子操作"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-qw7q8kb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-qw7q8kb",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-d7tlavu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-d7tlavu",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "多个线程之间的切换不会导致该接口的执行结果存在二义性"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-x84jspt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-x84jspt",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常见不可重入的情况"
				}
			]
		},
		{
			"ID": "20221011090456-e0lrb5a",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-e0lrb5a",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-gl9jeu6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-gl9jeu6",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-v0v9vaz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-v0v9vaz",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用了malloc/free函数，因为malloc函数是用全局链表来管理堆的"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-p5bro6g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-p5bro6g",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-hcojydv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-hcojydv",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用了标准I/O库函数，标准I/O库的很多实现都以不可重入的方式使用全局数据结构"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-bukf7z7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-bukf7z7",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-0ajdoy1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-0ajdoy1",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可重入函数体内使用了静态的数据结构"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-0yky25w",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-0yky25w",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常见可重入的情况"
				}
			]
		},
		{
			"ID": "20221011090456-y3foo5p",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-y3foo5p",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-xnf8iuz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-xnf8iuz",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-bllxh21",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-bllxh21",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不使用全局变量或静态变量"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-b4r6hbt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-b4r6hbt",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-dhc1z9b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-dhc1z9b",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不使用用malloc或者new开辟出的空间"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-vaqjsdb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-vaqjsdb",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-onbuyrv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-onbuyrv",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不调用不可重入函数"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-l3olz10",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-l3olz10",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-69n831w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-69n831w",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不返回静态或全局数据，所有数据都有函数的调用者提供"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-ssi4en5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-ssi4en5",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-0p4fa0s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-0p4fa0s",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用本地数据，或者通过制作全局数据的本地拷贝来保护全局数据"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-yyo7xot",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-yyo7xot",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可重入与线程安全联系"
				}
			]
		},
		{
			"ID": "20221011090456-p034eyo",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-p034eyo",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-vtn5ggf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-vtn5ggf",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-g0gkr4l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-g0gkr4l",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "函数是可重入的，那就是线程安全的"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-7oq0ilj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-7oq0ilj",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-47t5kty",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-47t5kty",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "函数是不可重入的，那就不能由多个线程使用，有可能引发线程安全问题"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-gcrxval",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-gcrxval",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-xebxplv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-xebxplv",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果一个函数中有全局变量，那么这个函数既不是线程安全也不是可重入的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-7q051gz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-7q051gz",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可重入与线程安全区别"
				}
			]
		},
		{
			"ID": "20221011090456-5av7hcn",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-5av7hcn",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-ev8yty2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-ev8yty2",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-j1cmiwn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-j1cmiwn",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可重入函数是线程安全函数的一种"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-ubccwku",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-ubccwku",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-x3phq79",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-x3phq79",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark",
									"TextMarkTextContent": "线程安全不一定是可重入的，而可重入函数则一定是线程安全的。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-zdc49hm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-zdc49hm",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-b97nsc7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-b97nsc7",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果将对临界资源的访问加上锁，则这个函数是线程安全的，但如果这个重入函数若锁还未释放则会产生死锁，因此是不可重入的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011093150-uq59ybe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011093150-uq59ybe",
				"updated": "20221011093151"
			}
		},
		{
			"ID": "20221011090456-3j79b2g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-3j79b2g",
				"updated": "20221011093138"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220928184906"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220928184906-20221011093138-1xiama7.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n就如上图，main函数进入insert中申请了一把锁，通过信号递达后，由需要再次进入insert函数，又需要再次申请锁，但是锁被自己占用着，形成了一种骑驴找驴的现象。所以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "线程安全不一定是可重入的，而可重入函数则一定是线程安全的。"
				}
			]
		},
		{
			"ID": "20221011090456-9pdaux6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-9pdaux6",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "时刻注意死锁四个必要条件"
				}
			]
		},
		{
			"ID": "20221011090456-3sv8tlh",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-3sv8tlh",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-0znkrzo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-0znkrzo",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-m2ro8uo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-m2ro8uo",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "互斥条件：一个资源每次只能被一个执行流使用"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-bzezxrm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-bzezxrm",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-q9bft3l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-q9bft3l",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "请求与保持条件：一个执行流因请求资源而阻塞时，对已获得的资源保持不放"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-q6qchf4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-q6qchf4",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-hts6ygm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-hts6ygm",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不剥夺条件:一个执行流已获得的资源，在末使用完之前，不能强行剥夺"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-ggfynwn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-ggfynwn",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-pf7kej0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-pf7kej0",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "循环等待条件:若干执行流之间形成一种头尾相接的循环等待资源的关系"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-ih258rh",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011090456-ih258rh",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "条件变量"
				}
			]
		},
		{
			"ID": "20221011090456-kw4aade",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-kw4aade",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-8ekqlcg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-8ekqlcg",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-s3q799f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-s3q799f",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当一个线程互斥地访问某个变量时，它可能发现在其它线程改变状态之前，它什么也做不了。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-81jas5e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-81jas5e",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-83gofjx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-83gofjx",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "例如一个线程访问队列时，发现队列为空，它只能等待，只到其它线程将一个节点添加到队列中。这种情况就需要用到条件变量。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-3hgxxi5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-3hgxxi5",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "同步"
				},
				{
					"Type": "NodeText",
					"Data": "：在保证数据安全的前提下，让线程能够按照某种特定的顺序访问临界资源，从而有效避免饥饿问题，叫做同步\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "竞态条件"
				},
				{
					"Type": "NodeText",
					"Data": "：因为时序问题，而导致程序异常，我们称之为竞态条件。"
				}
			]
		},
		{
			"ID": "20221011090456-a983nrv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-a983nrv",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_cond"
				}
			]
		},
		{
			"ID": "20221011090456-fm2ur5k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-fm2ur5k",
				"updated": "20221011093255"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220919202345"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220919202345-20221011093255-kgdd9vi.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-apiohsp",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-apiohsp",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "条件变量初始化"
				}
			]
		},
		{
			"ID": "20221011090456-wesvb0v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-wesvb0v",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int pthread_cond_init(pthread_cond_t *restrict cond,const pthread_condattr_t *restrict attr);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-pzhspr4",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011090456-pzhspr4",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011090456-yyph2r1",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011090456-yyph2r1",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "参数："
						}
					]
				},
				{
					"ID": "20221011090456-cxyj3d9",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221011090456-cxyj3d9",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-tffmusy",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-tffmusy",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-9g9mcu5",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-9g9mcu5",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "cond：要初始化的条件变量"
										}
									]
								}
							]
						},
						{
							"ID": "20221011090456-sbnjdz8",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-sbnjdz8",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-rw7erus",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-rw7erus",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "attr：NULL"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-k90uifk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-k90uifk",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "条件变量销毁"
				}
			]
		},
		{
			"ID": "20221011090456-qb0bb3z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-qb0bb3z",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int pthread_cond_destroy(pthread_cond_t* cond)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-ajab18a",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-ajab18a",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等待条件满足"
				}
			]
		},
		{
			"ID": "20221011090456-wbhhyta",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-wbhhyta",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int pthread_cond_wait(pthread_cond_t *restrict cond,pthread_mutex_t *restrict mutex); \n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-vj9lt1d",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011090456-vj9lt1d",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011090456-d74mmn7",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011090456-d74mmn7",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "参数："
						}
					]
				},
				{
					"ID": "20221011090456-tq7tziz",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221011090456-tq7tziz",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-e3qq62s",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-e3qq62s",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-oywf6ra",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-oywf6ra",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "cond：要在这个条件变量上等待"
										}
									]
								}
							]
						},
						{
							"ID": "20221011090456-9ivd1et",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-9ivd1et",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-8vs9me8",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-8vs9me8",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "mutex：互斥量，后面详细解释"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-6vu20pq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-6vu20pq",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "唤醒等待"
				}
			]
		},
		{
			"ID": "20221011090456-bwa87qa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-bwa87qa",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int pthread_cond_broadcast(pthread_cond_t* cond); //唤醒所有等待中的线程\n\nint pthread_cond_signal(pthread_cond_t* cond);//唤醒等待队列里等待的第一个线程\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-b9prqht",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-b9prqht",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "pthread_cond 实例"
				}
			]
		},
		{
			"ID": "20221011090456-6xhqs76",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-6xhqs76",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cpthread.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cstring\u003e\n\n\npthread_mutex_t mtx;\npthread_cond_t cond;\n\n//ctrl线程 控制 work线程，让他定期运行\nvoid *ctrl(void *args)\n{\n    std::string name = (char*)args;\n    while(true){\n        std::cout \u003c\u003c \"master say : begin work\" \u003c\u003c std::endl;\n      \n        //pthread_cond_signal: 唤醒在条件变量下在cond 等待队列里等待的第一个线程\n         pthread_cond_signal(\u0026cond);\n      \n        //唤醒所有线程\n        //pthread_cond_broadcast(\u0026cond);\n      \n        sleep(5);\n    }\n}\n\nvoid *work(void *args)\n{\n    int number = *(int*)args;\n    delete (int*)args;\n\n    while(true){\n        //此处我们的mutex不用，暂时这样，后面解释\n        pthread_cond_wait(\u0026cond, \u0026mtx);\n        std::cout \u003c\u003c \"worker: \" \u003c\u003c number \u003c\u003c \" is working ...\" \u003c\u003c std::endl;\n    }\n}\n\nint main()\n{\n#define NUM 3\n\n    pthread_mutex_init(\u0026mtx, nullptr);\n    pthread_cond_init(\u0026cond, nullptr);\n\n    pthread_t master;\n    pthread_t worker[NUM];\n    pthread_create(\u0026master, nullptr, ctrl, (void*)\"boss\");\n    for(int i = 0; i \u003c NUM; i++){\n        int *number = new int(i);\n        pthread_create(worker+i, nullptr, work, (void*)number);\n    }\n\n    for(int i = 0; i \u003c NUM; i++){\n        pthread_join(worker[i], nullptr);\n    }\n    pthread_join(master, nullptr);\n\n    pthread_mutex_destroy(\u0026mtx);\n    pthread_cond_destroy(\u0026cond);\n    return 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-68vmalx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-68vmalx",
				"updated": "20221011093331"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行结果：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220919214913"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220919214913-20221011093331-fi20trg.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n这就是同步，可以发现，线程的是按顺序进行执行的，这说明，条件变量内部一定存在一个等待队列"
				}
			]
		},
		{
			"ID": "20221011090456-kr0ivhu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-kr0ivhu",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "struct cond{\n\tint status;\n\ttask_struct *p;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-pzbdk4j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-pzbdk4j",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以通过status来控制等待队列的状态。"
				}
			]
		},
		{
			"ID": "20221011093609-l6ihhfw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011093609-l6ihhfw"
			}
		},
		{
			"ID": "20221011090456-gvl7s8i",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-gvl7s8i",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "pthread_cond_wait"
				},
				{
					"Type": "NodeText",
					"Data": "需要互斥量"
				}
			]
		},
		{
			"ID": "20221011090456-vm6zyon",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-vm6zyon",
				"updated": "20221011093353"
			},
			"Children": [
				{
					"ID": "20221011090456-fppnan2",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-fppnan2",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-l0lphyn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-l0lphyn",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "条件等待是线程间同步的一种手段，如果只有一个线程，条件不满足，一直等下去都不会满足，所以必须要有一个线程通过某些操作，改变共享变量，使原先不满足的条件变得满足，并且友好的通知等待在条件变量上的线程。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-nwna71e",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-nwna71e",
						"updated": "20221011093353"
					},
					"Children": [
						{
							"ID": "20221011090456-56oqoza",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-56oqoza",
								"updated": "20221011093353"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "条件不会无缘无故的突然变得满足了，必然会牵扯到共享数据的变化。所以一定要用互斥锁来保护。没有互斥锁就无法安全的获取和修改共享数据。\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20220930084543"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/Pasted image 20220930084543-20221011093353-ygli81q.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-5rktioe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-5rktioe",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "按照上面的说法，我们设计出如下的代码：先上锁，发现条件不满足，解锁，然后等待在条件变量上不就\n行了"
				}
			]
		},
		{
			"ID": "20221011090456-81im4mr",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221011090456-81im4mr",
				"updated": "20221011093425"
			},
			"Children": [
				{
					"ID": "20221011090456-82eeher",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221011090456-82eeher",
						"updated": "20221011093425"
					},
					"Children": [
						{
							"ID": "20221011090456-s9zttt3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-s9zttt3",
								"updated": "20221011093425"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "pthread_cond_wait"
								},
								{
									"Type": "NodeText",
									"Data": "的时候，会首先自动释放"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark",
									"TextMarkTextContent": "mtx"
								},
								{
									"Type": "NodeText",
									"Data": " !,然后再挂起自己。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-no39v6o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221011090456-no39v6o",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-55jw5ss",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-55jw5ss",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回的时候，会首先自动竞争锁，获取到锁之后，才能返回！"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-6edy4mz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-6edy4mz",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这是一段错误的设计："
				}
			]
		},
		{
			"ID": "20221011090456-k00u2sk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-k00u2sk",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 错误的设计\npthread_mutex_lock(\u0026mutex); \nwhile (condition_is_false) {\n\tpthread_mutex_unlock(\u0026mutex);\n\t//解锁之后，等待之前，条件可能已经满足，信号已经发出，但是该信号可能被错过 \n\tpthread_cond_wait(\u0026cond);\n\tpthread_mutex_lock(\u0026mutex); \n}\npthread_mutex_unlock(\u0026mutex);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-rifdzcc",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-rifdzcc",
				"updated": "20221011093514"
			},
			"Children": [
				{
					"ID": "20221011090456-usqioad",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-usqioad",
						"updated": "20221011093514"
					},
					"Children": [
						{
							"ID": "20221011090456-xkss1zg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-xkss1zg",
								"updated": "20221011093514"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "由于解锁和等待不是原子操作。调用解锁之后， "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "pthread_cond_wait"
								},
								{
									"Type": "NodeText",
									"Data": " 之前，如果已经有其他线程获取到互斥量，摒弃条件满足，发送了信号，那么 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "pthread_cond_wait "
								},
								{
									"Type": "NodeText",
									"Data": "将错过这个信号，可能会导致线程永远阻塞在这个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "pthread_cond_wait"
								},
								{
									"Type": "NodeText",
									"Data": "。所以解锁和等待必须是一个原子操作。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-fmd5m70",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-fmd5m70",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-kwz1e2b",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-kwz1e2b",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": " int pthread_cond_wait(pthread_cond_ t *cond,pthread_mutex_ t * mutex)"
								},
								{
									"Type": "NodeText",
									"Data": "; 进入该函数后， 会去看条件量等于0不？等于，就把互斥量变成1，直到cond_ wait返回，把条件量改成1，把互斥量恢复成原样。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-tmqd1gt",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011090456-tmqd1gt",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生产者消费者模型"
				}
			]
		},
		{
			"ID": "20221011090456-zhajf8r",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-zhajf8r",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为何要使用生产者消费者模型"
				}
			]
		},
		{
			"ID": "20221011090456-mm7uzk2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-mm7uzk2",
				"updated": "20221011093626"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220919202840"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220919202840-20221011093626-vvjibqn.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-zhb5khg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-zhb5khg",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-c8mpg9k",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-c8mpg9k",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-6jr9zu4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-6jr9zu4",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "生产者消费者模式就是通过一个容器来解决生产者和消费者的强耦合问题。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-71y6imb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-71y6imb",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-66ctpic",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-66ctpic",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-8c3oi2m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-8c3oi2m",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-wifqkph",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-wifqkph",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个阻塞队列就是用来给生产者和消费者解耦的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-yn4sbvw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-yn4sbvw",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\"321\"原则"
				}
			]
		},
		{
			"ID": "20221011090456-uhg9zfh",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221011090456-uhg9zfh",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\"3\"种关系"
				}
			]
		},
		{
			"ID": "20221011090456-m2t58b6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-m2t58b6",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-6fkyxtk",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-6fkyxtk",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-r353dss",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-r353dss",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "供货商vs供货商: 竞争 , 互斥"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-fnk8axa",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-fnk8axa",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-mr6eya3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-mr6eya3",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "消费者vs 消费者:竞争，互斥"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-qy2vj26",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-qy2vj26",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-yo9e48a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-yo9e48a",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "供货商vs 消费者:互斥，同步!"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-4m9svx7",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221011090456-4m9svx7",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\"2\" 种角色"
				}
			]
		},
		{
			"ID": "20221011090456-eupmuos",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-eupmuos",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生产者(n) 和 消费者(n)"
				}
			]
		},
		{
			"ID": "20221011090456-7g2h67d",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221011090456-7g2h67d",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\"1\"个交易场所"
				}
			]
		},
		{
			"ID": "20221011090456-ln95045",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-ln95045",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "超市一\u003e交易场所、一段缓冲区（内存空间，stl容)"
				}
			]
		},
		{
			"ID": "20221011090456-pdygwes",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-pdygwes",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "生产者消费者模型优点"
				}
			]
		},
		{
			"ID": "20221011090456-m4hsn49",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-m4hsn49",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-ad76u0s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-ad76u0s",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-gz867ff",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-gz867ff",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "解耦"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-wqnc2eb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-wqnc2eb",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-m123av3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-m123av3",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持并发"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-dlaoo2x",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-dlaoo2x",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-w43n6z4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-w43n6z4",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "支持忙闲不均"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-yl4zjbd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-yl4zjbd",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "CP模型的具体实现"
				}
			]
		},
		{
			"ID": "20221011094022-dp4ihu4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094022-dp4ihu4"
			}
		},
		{
			"ID": "20221011090456-pfl1rfa",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-pfl1rfa",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "单生产者单消费者模型"
				}
			]
		},
		{
			"ID": "20221011093635-h32y3k9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011093635-h32y3k9",
				"updated": "20221011093832"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20221011093646-qop7ntw",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "单生产者单消费者模型代码"
				}
			]
		},
		{
			"ID": "20221011090456-eb6tblu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-eb6tblu",
				"updated": "20221011094009"
			}
		},
		{
			"ID": "20221011090456-bwm0f9o",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221011090456-bwm0f9o",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程条件变量等待是否使用 if ？"
				}
			]
		},
		{
			"ID": "20221011090456-42ut7cy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-42ut7cy",
				"updated": "20221011094054"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221004122109"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221004122109-20221011094054-i1w6vo2.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-q4eypk7",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221011090456-q4eypk7",
				"updated": "20221011094254"
			},
			"Children": [
				{
					"ID": "20221011090456-v52wbhx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221011090456-v52wbhx",
						"updated": "20221011094254"
					},
					"Children": [
						{
							"ID": "20221011090456-y470i4j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-y470i4j",
								"updated": "20221011094254"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "pthread_cond_wait"
								},
								{
									"Type": "NodeText",
									"Data": "的时候，会首先自动释放"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark",
									"TextMarkTextContent": "mtx"
								},
								{
									"Type": "NodeText",
									"Data": "!,然后再挂起自己。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-y160fo9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221011090456-y160fo9",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-r2ryzij",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-r2ryzij",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回的时候，会首先自动竞争锁，获取到锁之后，才能返回！"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-oq1lhat",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-oq1lhat",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "根据上图与总结，最好使用while"
				}
			]
		},
		{
			"ID": "20221011090456-f8w819j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-f8w819j",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Push(const T \u0026in)\n{\n\tLockQueue();\n\t//临界区\n\twhile(IsFull()){ //不能使用if进行判断，因为wait有可能挂起失败\n\t\t//等待的，把线程挂起，我们当前是持有锁的！！！\n\t\tProducterWait();\n\t}\n\t//向队列中放数据，生产函数\n\tbq_.push(in);\n\n\t//if(bq_.size() \u003e cap_/2 ) WakeupComsumer();\n\tUnlockQueue();\n\tWakeupComsumer();\n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-4bywdm1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-4bywdm1",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "单生产者多消费者模型"
				}
			]
		},
		{
			"ID": "20221011090456-uja1nyv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-uja1nyv",
				"updated": "20221011094317"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这次改造使得生产者生产数据，消费者获取数据后，对数据进行处理工作。对生产者的数据进行 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "+-*/%"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221004122338"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221004122338-20221011094317-42p4d25.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n所以需要添加一个 Task类，这个类就包含了将生产者的数据进行任务处理的工作。"
				}
			]
		},
		{
			"ID": "20221011094356-53tuqmx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094356-53tuqmx",
				"updated": "20221011094444"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20221011094430-d6xl2e5",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "单生产者多消费者数据模型代码与运行结果"
				}
			]
		},
		{
			"ID": "20221011090456-f1rawse",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-f1rawse",
				"updated": "20221011094539"
			}
		},
		{
			"ID": "20221011090456-qjf948r",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011090456-qjf948r",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "POSIX信号量"
				}
			]
		},
		{
			"ID": "20221011090456-e1ksxup",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-e1ksxup",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "POSIX信号量和SystemV信号量作用相同，都是用于同步操作，达到无冲突的访问共享资源目的。  但POSIX可以用于线程间同步。"
				}
			]
		},
		{
			"ID": "20221011090456-gbmz3po",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-gbmz3po",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要导入头文件 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "semapthore.h"
				}
			]
		},
		{
			"ID": "20221011094649-57yt21e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094649-57yt21e"
			}
		},
		{
			"ID": "20221011090456-sqxd3b6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-sqxd3b6",
				"updated": "20221011094641"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220930162247"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220930162247-20221011094641-ur8kkmj.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011094655-f0hnput",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094655-f0hnput"
			}
		},
		{
			"ID": "20221011090456-6cz1yx4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-6cz1yx4",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "信号量函数"
				}
			]
		},
		{
			"ID": "20221011090456-vroq9ay",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-vroq9ay",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "初始化信号量 sem_init()"
				}
			]
		},
		{
			"ID": "20221011090456-7igdjue",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-7igdjue",
				"updated": "20221011094710"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220930153305"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220930153305-20221011094710-3b6krny.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n参数："
				}
			]
		},
		{
			"ID": "20221011090456-n8ayhcc",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011090456-n8ayhcc",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011090456-ltljoch",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011090456-ltljoch",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "pshared"
						},
						{
							"Type": "NodeText",
							"Data": " : 0表示线程间共享，非零表示进程间共享\n"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "value"
						},
						{
							"Type": "NodeText",
							"Data": "：信号量初始值"
						}
					]
				}
			]
		},
		{
			"ID": "20221011094736-7tduc1c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094736-7tduc1c"
			}
		},
		{
			"ID": "20221011090456-2ovzdq1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-2ovzdq1",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "销毁信号量"
				}
			]
		},
		{
			"ID": "20221011090456-axi8gjs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-axi8gjs",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int sem_destroy(sem_t *sem);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011094732-bj3byw0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094732-bj3byw0"
			}
		},
		{
			"ID": "20221011090456-pp1g7vf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-pp1g7vf",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "等待信号量"
				}
			]
		},
		{
			"ID": "20221011090456-09fs6v9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-09fs6v9",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "功能：等待信号量，会将信号量的值减1"
				}
			]
		},
		{
			"ID": "20221011090456-6zwcywx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-6zwcywx",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int sem_wait(sem_t *sem); //P()\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011094731-plq6ubn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094731-plq6ubn"
			}
		},
		{
			"ID": "20221011090456-tijdgbs",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-tijdgbs",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发布信号量"
				}
			]
		},
		{
			"ID": "20221011090456-x5almlm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-x5almlm",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "功能：发布信号量，表示资源使用完毕，可以归还资源了。将信号量值加1。"
				}
			]
		},
		{
			"ID": "20221011090456-699jzcn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-699jzcn",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int sem_post(sem_t *sem);//V()\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011094740-xa6o4by",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094740-xa6o4by"
			}
		},
		{
			"ID": "20221011090456-574tbj8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-574tbj8",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用环形队列的生产消费模型"
				}
			]
		},
		{
			"ID": "20221011090456-wkxuuup",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-wkxuuup",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-klewqmc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-klewqmc",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-gxqtb93",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-gxqtb93",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "环形队列采用数组模拟，用模运算来模拟环状特性"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-d1mpbul",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-d1mpbul",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-wmxvrb8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-wmxvrb8",
								"updated": "20221011094752"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20220930162531"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/Pasted image 20220930162531-20221011094752-p29a1bp.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-77i7huh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-77i7huh",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-8zmxv1f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-8zmxv1f",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "环形结构起始状态和结束状态都是一样的，不好判断为空或者为满，所以可以通过加计数器或者标记位来判断满或者空。另外也可以预留一个空的位置，作为满的状态"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-8a9fan6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-8a9fan6",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-fjc8snw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-fjc8snw",
								"updated": "20221011094801"
							},
							"Children": [
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20220930162622"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/Pasted image 20220930162622-20221011094801-0zoqs8r.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011094836-tzljstk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011094836-tzljstk",
				"updated": "20221011094837"
			}
		},
		{
			"ID": "20221011090456-ra0xfa3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-ra0xfa3",
				"updated": "20221011094906"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221004123812"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221004123812-20221011094821-vwbm6v3.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n定义blank信号量为10 ，代表着有十个空位。\n当"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "P(blank)"
				},
				{
					"Type": "NodeText",
					"Data": " 时 ， 就会多出一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "数据"
				},
				{
					"Type": "NodeText",
					"Data": "，所以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "V(data)"
				},
				{
					"Type": "NodeText",
					"Data": "。\n当"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "P(data)"
				},
				{
					"Type": "NodeText",
					"Data": " 时 ， 就会多出一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "空位"
				},
				{
					"Type": "NodeText",
					"Data": "，所以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "V(blank)"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20221011090456-jkb16p2",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-jkb16p2",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "环形队列的生产消费模型代码"
				}
			]
		},
		{
			"ID": "20221011095553-pitt38k",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221011095553-pitt38k",
				"updated": "20221011095612"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "单生产单消费的环形队列"
				}
			]
		},
		{
			"ID": "20221011090456-d1wwlxl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-d1wwlxl",
				"updated": "20221011095535"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20221011095017-ssnyjqr",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "环形队列单生产单消费模型代码"
				}
			]
		},
		{
			"ID": "20221011095245-eh9etz8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011095245-eh9etz8"
			}
		},
		{
			"ID": "20221011095605-75t2ccv",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221011095605-75t2ccv",
				"updated": "20221011095613"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多生产多消费的环形队列"
				}
			]
		},
		{
			"ID": "20221011090456-h8etrm6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-h8etrm6",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "多生产和多消费的优势在于并发的获取和处理任务"
				}
			]
		},
		{
			"ID": "20221011090456-meh61u8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-meh61u8",
				"updated": "20221011095524"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20221011095323-nlgfgm8",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "环形队列多生产多消费模型代码"
				}
			]
		},
		{
			"ID": "20221011105512-mgir8zo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011105512-mgir8zo"
			}
		},
		{
			"ID": "20221011105535-onfbpr5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011105535-onfbpr5"
			}
		},
		{
			"ID": "20221011090456-dksyj4r",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011090456-dksyj4r",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "线程池"
				}
			]
		},
		{
			"ID": "20221011090456-53q749g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-53q749g",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一种线程使用模式。线程过多会带来调度开销，进而影响缓存局部性和整体性能。而线程池维护着多个线程，等待着监督管理者分配可并发执行的任务。这避免了在处理短时间任务时创建与销毁线程的代价。线程池不仅能够保证内核的充分利用，还能防止过分调度。可用线程数量应该取决于可用的并发处理器、处理器内核、内存、网络sockets等的数量。"
				}
			]
		},
		{
			"ID": "20221011090456-9a503ge",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-9a503ge",
				"updated": "20221011105806"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221004190946"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221004190946-20221011105806-vhjm41m.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-6240wpx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-6240wpx",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "线程池示例："
				}
			]
		},
		{
			"ID": "20221011090456-sbthhg6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011090456-sbthhg6",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"ID": "20221011090456-1tcak5d",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-1tcak5d",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-pd7k67o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-pd7k67o",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1.  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "创建固定数量线程池，循环从任务队列中获取任务对象，"
								}
							]
						}
					]
				},
				{
					"ID": "20221011090456-eif2a9i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011090456-eif2a9i",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-47gjr98",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011090456-47gjr98",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "2.  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "获取到任务对象后，执行任务对象中的任务接口"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-3s0s7yp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-3s0s7yp",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码实例"
				}
			]
		},
		{
			"ID": "20221011105947-ekyaulx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011105947-ekyaulx",
				"updated": "20221011110000"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20221011110000-xnjio2c",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "线程池代码"
				}
			]
		},
		{
			"ID": "20221011090456-xq5zmfz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-xq5zmfz",
				"updated": "20221011110308"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行结果：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221004224041"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221004224041-20221011110217-fzyiiy5.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-lrbmdwo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-lrbmdwo",
				"updated": "20221011110318"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但运行结果占用太多资源时，系统会自动把进程被19号信号kill的。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221004224203"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221004224203-20221011110229-pznomg0.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011110325-cdox1cr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011110325-cdox1cr"
			}
		},
		{
			"ID": "20221011090456-0k57uge",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-0k57uge",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "单例模式"
				}
			]
		},
		{
			"ID": "20221011090456-p8t8y53",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-p8t8y53",
				"updated": "20221011110340"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "某些类, 只应该具有一个对象(实例), 就称之为单例.\n例如一个男人只能有一个媳妇.\n在很多服务器开发场景中, 经常需要让服务器加载很多的数据 (上百G) 到内存中. 此时往往要用一个单例的类来管理这些数据，创建太多相似的对象时，容易造成严重的数据冗余。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221005134308"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221005134308-20221011110340-6b87f6x.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011110344-nroa9zw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011110344-nroa9zw"
			}
		},
		{
			"ID": "20221011090456-fsg3np6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011090456-fsg3np6",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "饿汉实现方式和懒汉实现方式"
				}
			]
		},
		{
			"ID": "20221011090456-19zza4j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-19zza4j",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "本次主要使用懒汉方式实现单例模式"
				}
			]
		},
		{
			"ID": "20221011090456-gyg8v7k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-gyg8v7k",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "饿汉方式"
				}
			]
		},
		{
			"ID": "20221011090456-ufpddfn",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011090456-ufpddfn",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011090456-kk0iodx",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221011090456-kk0iodx",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-buf8n81",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-buf8n81",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-tx7q1ee",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-tx7q1ee",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "吃完饭, 立刻洗碗, 这种就是"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "mark strong",
											"TextMarkTextContent": "饿汉方式."
										},
										{
											"Type": "NodeText",
											"Data": " 因为下一顿吃的时候可以立刻拿着碗就能吃饭. "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "mark",
											"TextMarkTextContent": "也就是程序一启动就创建好"
										},
										{
											"Type": "NodeText",
											"Data": "。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-8qld5sr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-8qld5sr",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "懒汉方式"
				}
			]
		},
		{
			"ID": "20221011090456-aopymne",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011090456-aopymne",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011090456-8igm36d",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20221011090456-8igm36d",
						"updated": "20221011090456"
					},
					"Children": [
						{
							"ID": "20221011090456-ep1mpb5",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20221011090456-ep1mpb5",
								"updated": "20221011090456"
							},
							"Children": [
								{
									"ID": "20221011090456-1k4gcc2",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20221011090456-1k4gcc2",
										"updated": "20221011090456"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "吃完饭, 先把碗放下, 然后下一顿饭用到这个碗了再洗碗, 就是"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "mark strong",
											"TextMarkTextContent": "懒汉方式"
										},
										{
											"Type": "NodeText",
											"Data": ".当我们需要的时候才进行创建"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011090456-ypg92bm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-ypg92bm",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "懒汉方式最核心的思想是 \"延时加载\". 从而能够优化服务器的启动速度."
				}
			]
		},
		{
			"ID": "20221011090456-hkq4b39",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-hkq4b39",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "饿汉方式实现单例模式"
				}
			]
		},
		{
			"ID": "20221011090456-yeyhmbu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-yeyhmbu",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003ctypename T\u003e \nclass Singleton {\n\tstatic T data; \npublic:\n\tstatic T* GetInstance() { \n\t\treturn \u0026data;\n\t} \n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-uyzt5hz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221011090456-uyzt5hz",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "懒汉方式实现单例模式"
				}
			]
		},
		{
			"ID": "20221011090456-q3wmy43",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-q3wmy43",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只要通过 Singleton 这个包装类来使用 T 对象, 则一个进程中只有一个 T 对象的实例.\n还是使用到了Task.hpp文件，但是和上面的一样，这里就不写了。"
				}
			]
		},
		{
			"ID": "20221011110415-j5sjqwr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011110415-j5sjqwr",
				"updated": "20221011110423"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20221011110423-59gqt5c",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "懒汉方式实现单例模式代码(线程不安全)"
				}
			]
		},
		{
			"ID": "20221011111022-2e631yn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011111022-2e631yn"
			}
		},
		{
			"ID": "20221011090456-70r9w0o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-70r9w0o",
				"updated": "20221011111159"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "解决线程安全问题，对 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "GetInstance()"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "方法进行加锁"
				},
				{
					"Type": "NodeText",
					"Data": " ，并添加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "双判定"
				},
				{
					"Type": "NodeText",
					"Data": "。\nthread_pool.cpp"
				}
			]
		},
		{
			"ID": "20221011090456-fpooewq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011090456-fpooewq",
				"updated": "20221011090456"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#pragma once\n\n#include \u003ciostream\u003e\n#include \u003cqueue\u003e\n#include \u003cpthread.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cstring\u003e\n\nnamespace fmy_threadPool\n{\n    const int g_num = 5;\n\n    template\u003cclass T\u003e\n    class ThreadPool\n    {\n    private:\n        int _num;\n        std::queue\u003cT\u003e _task_queue;\n\n        pthread_mutex_t  _mtx;\n        pthread_cond_t _cond;\n\n        static ThreadPool\u003cT\u003e* ins;//这就是需要我们创建的对象，必须是静态的，不然将会重复创建\n\n    private:\n        ThreadPool(int num = g_num)\n            :_num(num)\n        {\n            pthread_mutex_init(\u0026_mtx , nullptr);\n            pthread_cond_init(\u0026_cond , nullptr);\n        }\n\n        ThreadPool(const ThreadPool\u003cT\u003e\u0026 tp) = delete;\n\n        ThreadPool\u003cT\u003e \u0026operator=(ThreadPool\u003cT\u003e \u0026tp) = delete;\n\n    public:\n        static ThreadPool\u003cT\u003e* GetInstance()\n        {\n            static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;//使用static初始化锁，因为该锁无需被初始化和destroy。\n\n            if(ins == nullptr)////双判定，减少锁的争用，当线程创建了对象时，也就不用在争用锁了，从而提高获取单例的效率！\n            {\n                pthread_mutex_lock(\u0026lock);\n                if(ins == nullptr)\n                {\n                    ins = new ThreadPool\u003cT\u003e();\n                    ins-\u003eInitThreadPool();\n                    std::cout \u003c\u003c \"首次加载对象\"\u003c\u003c std:: endl;\n                }\n\n                pthread_mutex_unlock(\u0026lock);\n            }\n            return ins;\n        }\n\n        void Lock()\n        {\n            pthread_mutex_lock(\u0026_mtx);\n        }\n\n        void Unlock()\n        {\n            pthread_mutex_unlock(\u0026_mtx);\n        }\n\n        void Wait()\n        {\n            pthread_cond_wait(\u0026_cond , \u0026_mtx);\n        }\n\n        void WakeUp()\n        {\n            pthread_cond_signal(\u0026_cond);\n        }\n\n        bool IsEmpty()\n        {\n            return _task_queue.empty();\n        }\n\n    public:\n        ~ThreadPool()\n        {\n            pthread_mutex_destroy(\u0026_mtx);\n            pthread_cond_destroy(\u0026_cond);\n        }\n\n        static void *Rountine(void* args)\n        {\n            pthread_detach(pthread_self());\n            ThreadPool\u003cT\u003e* tp = (ThreadPool\u003cT\u003e*)args;\n\n            while(true)\n            {\n                tp-\u003eLock();\n                while(tp-\u003eIsEmpty())\n                {\n                    tp-\u003eWait();\n                }\n                T t;\n                tp-\u003ePopTask(\u0026t);\n                tp-\u003eUnlock();\n                t();\n            }\n        }\n\n        void InitThreadPool()\n        {\n            pthread_t tid;\n            for(int i = 0 ; i \u003c _num; i++)\n            {\n                pthread_create(\u0026tid , nullptr , Rountine , (void*)this);\n            }\n        }\n\n        void PushTask(const T\u0026 in)\n        {\n            Lock();\n            _task_queue.push(in);\n\n            Unlock();\n            WakeUp();\n        }\n\n        void PopTask(T* out)\n        {\n            *out = _task_queue.front();\n            _task_queue.pop();\n        }\n    };\n\n    template \u003cclass T\u003e\n    ThreadPool\u003cT\u003e *ThreadPool\u003cT\u003e::ins = nullptr;// 因为ins是static的，所以需要在类外 对类中的ins进行初始化\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011090456-tr6n5xu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011090456-tr6n5xu",
				"updated": "20230317120000"
			}
		},
		{
			"ID": "20221011214518-6y4i6dm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214518-6y4i6dm"
			}
		},
		{
			"ID": "20221011214520-ni3ljve",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011214520-ni3ljve",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "STL,智能指针和线程安全"
				}
			]
		},
		{
			"ID": "20221011214520-9chgnr0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011214520-9chgnr0",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "STL中的容器是否是线程安全的?"
				}
			]
		},
		{
			"ID": "20221011214520-tbclyr9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-tbclyr9",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "不是."
				},
				{
					"Type": "NodeText",
					"Data": "\n原因是, "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "STL 的设计初衷是将性能挖掘到极致"
				},
				{
					"Type": "NodeText",
					"Data": ", 而一旦涉及到加锁保证线程安全, 会对性能造成巨大的影响.\n而且对于不同的容器, 加锁方式的不同, 性能可能也不同(例如hash表的锁表和锁桶).\n因此 STL 默认不是线程安全. 如果需要在多线程环境下使用, 往往需要调用者自行保证线程安全."
				}
			]
		},
		{
			"ID": "20221011214525-qyyjkah",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214525-qyyjkah"
			}
		},
		{
			"ID": "20221011214520-xwhde3u",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011214520-xwhde3u",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "智能指针是否是线程安全的?"
				}
			]
		},
		{
			"ID": "20221011214520-h1ndnpl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-h1ndnpl",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于 unique_ptr, 由于只是在当前代码块范围内生效, 因此不涉及线程安全问题.\n对于 shared_ptr, 多个对象需要共用一个引用计数变量, 所以会存在线程安全问题. 但是标准库实现的时候考虑到了这个问题, 基于原子操作(CAS)的方式保证 shared_ptr 能够高效, 原子的操作引用计数."
				}
			]
		},
		{
			"ID": "20221011214528-h7vnsuy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214528-h7vnsuy"
			}
		},
		{
			"ID": "20221011214520-t9wk35h",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011214520-t9wk35h",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其他常见的各种锁"
				}
			]
		},
		{
			"ID": "20221011214520-xbhpjux",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011214520-xbhpjux",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"ID": "20221011214519-p5n217m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011214519-p5n217m",
						"updated": "20221011214519"
					},
					"Children": [
						{
							"ID": "20221011214520-bnhovir",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011214520-bnhovir",
								"updated": "20221011214520"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "悲观锁"
								},
								{
									"Type": "NodeText",
									"Data": "：在每次取数据时，总是担心数据会被其他线程修改，所以会在取数据前先加锁（读锁，写锁，行锁等），当其他线程想要访问数据时，被阻塞挂起。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011214519-7g4wdaz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011214519-7g4wdaz",
						"updated": "20221011214519"
					},
					"Children": [
						{
							"ID": "20221011214520-ngztffa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011214520-ngztffa",
								"updated": "20221011214520"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "乐观锁"
								},
								{
									"Type": "NodeText",
									"Data": "：每次取数据时候，总是乐观的认为数据不会被其他线程修改，因此不上锁。但是在更新数据前，会判断其他数据在更新前有没有对数据进行修改。主要采用两种方式：版本号机制和CAS操作。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011214519-hgokhtg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011214519-hgokhtg",
						"updated": "20221011214519"
					},
					"Children": [
						{
							"ID": "20221011214520-z7v17ur",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011214520-z7v17ur",
								"updated": "20221011214520"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark strong",
									"TextMarkTextContent": "CAS操作"
								},
								{
									"Type": "NodeText",
									"Data": "：当需要更新数据时，判断当前内存值和之前取得的值是否相等。如果相等则用新值更新。若不 等则失败，失败则重试，一般是一个自旋的过程，即不断重试。"
								}
							]
						}
					]
				},
				{
					"ID": "20221011214519-e1e6dcf",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011214519-e1e6dcf",
						"updated": "20221011214519"
					},
					"Children": [
						{
							"ID": "20221011214520-7xdmaph",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011214520-7xdmaph",
								"updated": "20221011214520"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "mark",
									"TextMarkTextContent": "自旋锁，公平锁，非公平锁"
								},
								{
									"Type": "NodeText",
									"Data": "？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011214520-dyf4h4v",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011214520-dyf4h4v",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读者写者问题"
				}
			]
		},
		{
			"ID": "20221011214520-o9od5cp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-o9od5cp",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在编写多线程的时候，有一种情况是十分常见的。那就是，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "有些公共数据修改的机会比较少。相比较改写，它们读的机会反而高的多。通常而言，在读的过程中，往往伴随着查找的操作，中间耗时很长。给这种代码段加锁，会极大地降低我们程序的效率。"
				},
				{
					"Type": "NodeText",
					"Data": " 那么有没有一种方法，可以专门处理这种多读少写的情况呢？     "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "有，那就是读写锁。"
				}
			]
		},
		{
			"ID": "20221011214520-q9y3gku",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-q9y3gku",
				"updated": "20221011221200"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其实也还是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20221011090456-yn4sbvw",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "\"321\"原则"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221011203430"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221011203430-20221011221155-o4fuw1i.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011221206-dbmxfsr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011221206-dbmxfsr"
			}
		},
		{
			"ID": "20221011214520-ai9qw0r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-ai9qw0r",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "生产和消费vs读者写者"
				}
			]
		},
		{
			"ID": "20221011214520-qc9yfi4",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011214520-qc9yfi4",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011214520-f6fonn4",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011214520-f6fonn4",
						"updated": "20221011214520"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "根本原因:读者不会取走资源,而消费者会拿走数据!"
						}
					]
				}
			]
		},
		{
			"ID": "20221011214520-o9oh1fl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-o9oh1fl",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个人在写，多个人在读"
				}
			]
		},
		{
			"ID": "20221011214520-ii04jwv",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011214520-ii04jwv",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011214520-gt0sv4x",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011214520-gt0sv4x",
						"updated": "20221011214520"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "写者和写者: 互斥关系\n读者和写者: 互斥，同步\n读者和读者: 没有关系"
						}
					]
				}
			]
		},
		{
			"ID": "20221011221214-ks91rf0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011221214-ks91rf0"
			}
		},
		{
			"ID": "20221011214520-y1lf7d4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011214520-y1lf7d4",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读写锁"
				}
			]
		},
		{
			"ID": "20221011214520-c97ikoo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-c97ikoo",
				"updated": "20221011221230"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221011203742"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221011203742-20221011221230-gbzrz7u.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011214520-mcrjact",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011214520-mcrjact",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读写锁接口"
				}
			]
		},
		{
			"ID": "20221011214520-ujxgd9k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-ujxgd9k",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "设置读写优先"
				}
			]
		},
		{
			"ID": "20221011214520-rniqhoi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011214520-rniqhoi",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *attr, int pref); \n/*\npref 共有    3 种选择\nPTHREAD_RWLOCK_PREFER_READER_NP (默认设置) 读者优先，可能会导致写者饥饿情况\n\nPTHREAD_RWLOCK_PREFER_WRITER_NP 写者优先，目前有    BUG，导致表现行为和\nPTHREAD_RWLOCK_PREFER_READER_NP 一致\n\nPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP 写者优先，但写者不能递归加锁\n*/\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011214520-o2rrwfm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-o2rrwfm",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "初始化"
				}
			]
		},
		{
			"ID": "20221011214520-v3o9rlo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011214520-v3o9rlo",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock , const pthread_rwlockattr_t *restrict attr);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011214520-mxrzj3y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-mxrzj3y",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "销毁"
				}
			]
		},
		{
			"ID": "20221011214520-whtw2ct",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011214520-whtw2ct",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011214520-ycybrfa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-ycybrfa",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "加锁与解锁"
				}
			]
		},
		{
			"ID": "20221011214520-uj5s8k0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011214520-uj5s8k0",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);//读锁\n\nint pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);//写锁\n\nint pthread_rwlock_unlock(pthread_rwlock_t *rwlock);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011221248-94raovx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011221248-94raovx"
			}
		},
		{
			"ID": "20221011214520-as57z07",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011214520-as57z07",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读写锁伪代码理解"
				}
			]
		},
		{
			"ID": "20221011214520-2uo1giz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-2uo1giz",
				"updated": "20221011221246"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221011210534"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221011210534-20221011221246-19ul740.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "写者"
				}
			]
		},
		{
			"ID": "20221011214520-s7n4r2b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011214520-s7n4r2b",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mtx1.lock()\nwhile(readers \u003e 0)//只要还有读者在读，写者就一直等待，直到读者为0\n{\n\twait();\n}\n\n//读者为0，进入临界区，对内容进行修改\n\nmtx1.unlock（）\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011214520-gf1b7qu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-gf1b7qu",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "读者"
				}
			]
		},
		{
			"ID": "20221011214520-0czhz91",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011214520-0czhz91",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mtx1.lock();\nreaders++;\nmtx1.unlock();\n\n\nmtx1.lock();\nreaders--;//读者减少，\nmtx1.unlock();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011214520-5020979",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011214520-5020979",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读者写者的优先级问题"
				}
			]
		},
		{
			"ID": "20221011214520-u5l1ivd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-u5l1ivd",
				"updated": "20221011221258"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221011210642"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221011210642-20221011221258-1roqjob.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011214520-j34lodj",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221011214520-j34lodj",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"ID": "20221011214520-opi7i0i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011214520-opi7i0i",
						"updated": "20221011214520"
					},
					"Children": [
						{
							"ID": "20221011214520-1fq1tcn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011214520-1fq1tcn",
								"updated": "20221011214520"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "读者优先:读者和写者同时到来的时候，我们让读者先进入访问"
								}
							]
						}
					]
				},
				{
					"ID": "20221011214520-of1z1ee",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221011214520-of1z1ee",
						"updated": "20221011214520"
					},
					"Children": [
						{
							"ID": "20221011214520-zeq0uh3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221011214520-zeq0uh3",
								"updated": "20221011214520"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "写者优先:当读者和写者同时到来的时候，比当前写者晚来的所有的读者，都不要进入临界区访问了，等临界区中没有读者的时候，让写者先"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221011214520-bbo9zx1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011214520-bbo9zx1",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读写锁案列"
				}
			]
		},
		{
			"ID": "20221011221307-95p129s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011221307-95p129s",
				"updated": "20221011221323"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20221011221323-nbbqp8m",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "读写锁代码"
				}
			]
		},
		{
			"ID": "20221011214520-7liyqu1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-7liyqu1",
				"updated": "20221011221427"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221011212001"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221011212001-20221011221422-ob14y6i.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011221456-kty28oo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011221456-kty28oo"
			}
		},
		{
			"ID": "20221011214520-rcjrmh7",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221011214520-rcjrmh7",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "挂起等待特性的锁 vs 自旋锁"
				}
			]
		},
		{
			"ID": "20221011214520-5qz7esc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-5qz7esc",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自旋锁与互斥锁有点类似，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "只是自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁"
				},
				{
					"Type": "NodeText",
					"Data": "，\"自旋\"一词就是因此而得名。"
				}
			]
		},
		{
			"ID": "20221011214520-yi70tzm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-yi70tzm",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于自旋锁使用者一般保持锁时间非常短，因此选择自旋而不是睡眠是非常必要的，自旋锁的效率远高于互斥锁。"
				}
			]
		},
		{
			"ID": "20221011214520-cpwv0ni",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011214520-cpwv0ni",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用自旋锁的场景"
				}
			]
		},
		{
			"ID": "20221011214520-y9fpr11",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-y9fpr11",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其实就像等人，如果需要等人的时间长，我们可以去其他地方做其他事情，但是如果需要等的时间非常短，我们就会在约定地点等人，不断的询问她快到没。    其实不断询问的这个过程其实就是自旋锁的过程。"
				}
			]
		},
		{
			"ID": "20221011214520-39r5hag",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-39r5hag",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而线程访问临界资源是需要花费时间的，线程如何得知，自己会在临界资源中待多长时间呢?﹖"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "线程不知道!!，程序员知道!   因为临界区是程序员写的，程序员能判断是否需要使用自旋锁"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20221011214520-wt3vucl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-wt3vucl",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "如果花费的时间非常短?"
				}
			]
		},
		{
			"ID": "20221011214520-17b76yf",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011214520-17b76yf",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011214520-ty3qa9z",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011214520-ty3qa9z",
						"updated": "20221011214520"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "比较适合自旋锁,不断的通过循环，检测锁的状态"
						}
					]
				}
			]
		},
		{
			"ID": "20221011214520-iqepkzt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-iqepkzt",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "如果花费的时间非常长?"
				}
			]
		},
		{
			"ID": "20221011214520-fmle5oy",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221011214520-fmle5oy",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221011214520-1t7kybf",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221011214520-1t7kybf",
						"updated": "20221011214520"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "比较适合挂起等待锁"
						}
					]
				}
			]
		},
		{
			"ID": "20221011214520-8n367t3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011214520-8n367t3",
				"updated": "20221011221535"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221011212335"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221011212335-20221011221535-4mo301f.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011221539-zffteyy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011221539-zffteyy"
			}
		},
		{
			"ID": "20221011214520-bzqfemo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221011214520-bzqfemo",
				"updated": "20221011214520"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自旋锁函数"
				}
			]
		},
		{
			"ID": "20221011214520-hqelar0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011214520-hqelar0",
				"updated": "20230317120132"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}