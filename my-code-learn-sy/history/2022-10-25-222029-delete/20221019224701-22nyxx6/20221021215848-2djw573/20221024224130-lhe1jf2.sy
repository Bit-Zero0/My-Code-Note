{
	"ID": "20221024224130-lhe1jf2",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221024224130-lhe1jf2",
		"title": "tcp代码（version1）",
		"updated": "20221024224724"
	},
	"Children": [
		{
			"ID": "20221024223837-jkvebqt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024223837-jkvebqt",
				"updated": "20221024223837"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "tcp_client.cpp"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20221024223837-kdwg4ki",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221024223837-kdwg4ki",
				"updated": "20221024223837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cunistd.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003carpa/inet.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003ccerrno\u003e\n#include \u003ccstring\u003e\n#include \u003cstring\u003e\n\n\nvoid Usage(std::string proc )\n{\n    std::cout \u003c\u003c \"Usage: \" \u003c\u003c proc \u003c\u003c \" server_ip server_port\" \u003c\u003c std::endl;\n}\n\nint main(int argc , char* argv[])\n{\n    if(argc != 3)\n    {\n        Usage(argv[0]);\n        return 1;\n    }\n\n    std::string svr_ip = argv[1];\n    uint16_t svr_port = (uint16_t)atoi(argv[2]);\n\n    int sock = socket(AF_INET , SOCK_STREAM , 0);\n    if(sock \u003c  0)\n    {\n        std::cerr \u003c\u003c \"socket error!\" \u003c\u003c std::endl;\n        return 2;\n    }\n\n    struct sockaddr_in server ;\n    bzero(\u0026server , sizeof(server));\n    server.sin_family = AF_INET;\n    server.sin_port =htons(svr_port);\n    server.sin_addr.s_addr =  inet_addr(svr_ip.c_str());\n\n    if(connect(sock , (struct sockaddr*)\u0026server , sizeof(server)) \u003c 0)\n    {\n        std::cout \u003c\u003c \"connect server failed !\" \u003c\u003c std::endl;\n        return 3;\n    }\n\n    std::cout \u003c\u003c \"connect success!\" \u003c\u003c std::endl;\n\n    while(true)\n    {\n        std::cout \u003c\u003c \"Please Enter# \";\n        char buffer[1024];\n\n        fgets(buffer , sizeof(buffer)-1 , stdin);\n\n        write(sock , buffer , sizeof(buffer));\n        ssize_t s = read(sock , buffer , sizeof(buffer)-1);\n\n        if(s \u003e 0)\n        {\n            buffer[s] = 0;\n            std::cout \u003c\u003c \"server echo# \"\u003c\u003c buffer \u003c\u003c std::endl;\n        }\n    }\n\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221024224215-ayfh78v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224215-ayfh78v"
			}
		},
		{
			"ID": "20221024223837-gfpkhs2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024223837-gfpkhs2",
				"updated": "20221024223837"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "server.cpp"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20221024223837-n9bgjmo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221024223837-n9bgjmo",
				"updated": "20221024223837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003carpa/inet.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003ccerrno\u003e\n#include \u003cstring\u003e\n#include \u003ccstring\u003e\n#include \u003csys/types.h\u003e\n#include \u003ccstring\u003e\n#include \u003csys/wait.h\u003e\n#include \u003cunistd.h\u003e\n\nvoid Usage(std::string proc)\n{\n    std::cout \u003c\u003c \"Usage:\" \u003c\u003c proc \u003c\u003c \"port\" \u003c\u003c std::endl;\n}\n\nvoid ServiceIO(int new_sock)\n{\n    while(true)\n    {\n        char buffer[1024];\n        memset(buffer , 0  , sizeof(buffer));\n        ssize_t s = read(new_sock , buffer , sizeof(buffer));\n        if(s \u003e 0)\n        {\n            buffer[s] = 0;\n            std::cout \u003c\u003c \"client#\" \u003c\u003c buffer \u003c\u003c std::endl;\n\n            std::string echo_string = \"\u003e\u003e\u003eserver\u003c\u003c\u003c\";\n            echo_string+=buffer;\n\n            write(new_sock , echo_string.c_str() , echo_string.size());\n        }\n        else if (s == 0)\n        {\n            std::cout \u003c\u003c \"client quit ...\" \u003c\u003c std::endl;\n            break;\n        }\n        else{\n            std::cout \u003c\u003c \"client quit ...\" \u003c\u003c std::endl;\n            break;\n        }\n    }\n}\n\n\nint main(int argc , char* argv[])\n{\n    if(argc != 2)\n    {\n        Usage(argv[0]);\n        return 1;\n    }\n\n    int listen_sock = socket(AF_INET , SOCK_STREAM , 0);\n    if(listen_sock \u003c 0)\n    {\n        std::cerr \u003c\u003c \"socket error\" \u003c\u003c errno \u003c\u003c std::endl;\n        return 2;\n    }\n\n    struct sockaddr_in local;\n    memset(\u0026local , 0 , sizeof(local));\n\n    local.sin_port = htons(atoi(argv[1]));\n    local.sin_family = AF_INET;\n    local.sin_addr.s_addr = INADDR_ANY;\n\n    if(bind(listen_sock , (struct sockaddr *)\u0026local , sizeof(local)) \u003c 0)\n    {\n        std::cerr \u003c\u003c \"bind error \" \u003c\u003c errno \u003c\u003c std::endl;\n        return 3;\n    }\n\n    const int back_log = 5;\n    if(listen(listen_sock ,back_log) \u003c 0)\n    {\n        std::cerr \u003c\u003c \"listen error\" \u003c\u003c errno \u003c\u003c std::endl;\n        return 4;\n    }\n\n    while(true)\n    {\n        struct sockaddr_in peer;\n        socklen_t len = sizeof(peer);\n\n        int new_sock = accept(listen_sock ,(struct sockaddr*)\u0026peer , \u0026len);\n        if(new_sock \u003c 0)\n        {\n            continue;\n        }\n\n        uint16_t cli_port = ntohs(peer.sin_port);\n        std::string cli_ip = inet_ntoa(peer.sin_addr);\n\n        std::cout \u003c\u003c \"get a new link -\u003e [\" \u003c\u003c cli_ip \u003c\u003c \":\" \u003c\u003c cli_port \u003c\u003c \"]#\" \u003c\u003c new_sock \u003c\u003c std::endl;\n\n        ServiceIO(new_sock);\n    }\n\n\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221024224215-w7y9ogd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224215-w7y9ogd"
			}
		},
		{
			"ID": "20221024224216-smh2xtt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224216-smh2xtt"
			}
		},
		{
			"ID": "20221024223837-ewz2wrc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024223837-ewz2wrc",
				"updated": "20221024224724"
			}
		},
		{
			"ID": "20221024224216-vphr5n6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224216-vphr5n6"
			}
		},
		{
			"ID": "20221024224216-f3rbecu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224216-f3rbecu"
			}
		}
	]
}