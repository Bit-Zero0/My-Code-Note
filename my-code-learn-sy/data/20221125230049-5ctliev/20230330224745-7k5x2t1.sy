{
	"ID": "20230330224745-7k5x2t1",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230330224745-7k5x2t1",
		"title": "双指针法",
		"updated": "20230424223247"
	},
	"Children": [
		{
			"ID": "20230424223116-n2a30nu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223116-n2a30nu"
			}
		},
		{
			"ID": "20230424223118-yasxdt0",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424223118-yasxdt0",
				"updated": "20230424223118"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "剑指 Offer 05. 替换空格"
				}
			]
		},
		{
			"ID": "20230424223118-dncev6e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223118-dncev6e",
				"updated": "20230424223118"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://leetcode.cn/problems/ti-huan-kong-ge-lcof/",
					"TextMarkTextContent": "剑指 Offer 05. 替换空格"
				}
			]
		},
		{
			"ID": "20230424223118-wl9h3e2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424223118-wl9h3e2",
				"updated": "20230424223118"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++ 题解"
				}
			]
		},
		{
			"ID": "20230424223118-wv2n04a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424223118-wv2n04a",
				"updated": "20230424223118"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Solution {\npublic:\n    string replaceSpace(string s) {\n        int count = 0 ;\n        int oldSize = s.size();\n        for(int i = 0 ; i \u003c s.size() ; i++)\n        {\n            if(s[i] == ' ') count++;\n        }\n\n        s.resize(s.size() + count*2);\n        int newSize = s.size();\n        for(int i = oldSize-1 , j = newSize-1 ; i \u003c j  ; i-- , j--)\n        {\n            if(s[i] != ' ')\n            {\n                s[j] = s[i];  \n            }\n            else{\n                s[j] = '0';\n                s[j-1] = '2';\n                s[j-2] = '%';\n                j-=2;\n            }\n        }\n        return s;\n    }\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424223201-htmcyvl",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424223201-htmcyvl",
				"updated": "20230424223226"
			}
		},
		{
			"ID": "20230424223117-qv2y28f",
			"Type": "NodeBlockQueryEmbed",
			"Properties": {
				"id": "20230424223117-qv2y28f",
				"updated": "20230424223157"
			},
			"Children": [
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeBlockQueryEmbedScript",
					"Data": "select * from blocks where id='20230327221522-hrdwrt6'"
				},
				{
					"Type": "NodeCloseBrace"
				},
				{
					"Type": "NodeCloseBrace"
				}
			]
		},
		{
			"ID": "20230424223234-beywbdd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223234-beywbdd"
			}
		},
		{
			"ID": "20230424223234-xmq21nu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223234-xmq21nu",
				"updated": "20230424223239"
			}
		},
		{
			"ID": "20230424223239-4lfo34u",
			"Type": "NodeBlockQueryEmbed",
			"Properties": {
				"id": "20230424223239-4lfo34u",
				"updated": "20230424223247"
			},
			"Children": [
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeBlockQueryEmbedScript",
					"Data": "select * from blocks where id='20230327221253-c55ku9l'"
				},
				{
					"Type": "NodeCloseBrace"
				},
				{
					"Type": "NodeCloseBrace"
				}
			]
		},
		{
			"ID": "20230424223235-x0sczg6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223235-x0sczg6"
			}
		},
		{
			"ID": "20230330224758-mbclrho",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230330224758-mbclrho",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "18. 四数之和"
				}
			]
		},
		{
			"ID": "20230330224758-wv6z950",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330224758-wv6z950",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://leetcode.cn/problems/4sum/",
					"TextMarkTextContent": "18. 四数之和"
				}
			]
		},
		{
			"ID": "20230330224758-ke15e3z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330224758-ke15e3z",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解题思路"
				}
			]
		},
		{
			"ID": "20230330224758-9os3lc5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330224758-9os3lc5",
				"updated": "20230330224846"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "四数之和，和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230330224758-ujl2t8i",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "15. 三数之和"
				},
				{
					"Type": "NodeText",
					"Data": "是一个思路，都是使用双指针法, 基本解法就是在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "block-ref",
					"TextMarkBlockRefID": "20230330224758-ujl2t8i",
					"TextMarkBlockRefSubtype": "d",
					"TextMarkTextContent": "15. 三数之和"
				},
				{
					"Type": "NodeText",
					"Data": "的基础上再套一层for循环。"
				}
			]
		},
		{
			"ID": "20230330224758-h1k7bks",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330224758-h1k7bks",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是有一些细节需要注意，例如： 不要判断"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "nums[i] \u0026gt; target"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就返回了，三数之和 可以通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "nums[i] \u0026gt; 0"
				},
				{
					"Type": "NodeText",
					"Data": "​ 就返回了，因为 0 已经是确定的数了，四数之和这道题目 target是任意值。比如：数组是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "[-4, -3, -2, -1]"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "target"
				},
				{
					"Type": "NodeText",
					"Data": "​是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-10"
				},
				{
					"Type": "NodeText",
					"Data": "​，不能因为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "-4 \u0026gt; -10"
				},
				{
					"Type": "NodeText",
					"Data": "​而跳过。但是我们依旧可以去做剪枝，逻辑变成"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "nums[i] \u0026gt; target \u0026amp;\u0026amp; (nums[i] \u0026gt;=0 || target \u0026gt;= 0)"
				},
				{
					"Type": "NodeText",
					"Data": "​就可以了。"
				}
			]
		},
		{
			"ID": "20230330224758-aozhgbz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330224758-aozhgbz",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++题解"
				}
			]
		},
		{
			"ID": "20230330224758-81wzb5g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330224758-81wzb5g",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e fourSum(vector\u003cint\u003e\u0026 nums, int target) {\n    \n        int n = nums.size();\n        int left , right;\n\n        vector\u003cvector\u003cint\u003e\u003e result;\n        sort(nums.begin() , nums.end());\n        for(int i = 0 ; i \u003c n ; i++)\n        {\n            if(n \u003c 4 )\n            {\n                return result;\n            }\n\n            if(nums[i] \u003e target \u0026\u0026 nums[i] \u003e= 0)\n            {\n                break;\n            }\n\n            if( i \u003e 0 \u0026\u0026 nums[i] == nums[i-1]) // 对nums[i]去重\n            {\n                continue;\n            }\n\n       \n            for(int k = i +1 ; k \u003c n ; k++)\n            {\n                if(nums[i] + nums[k] \u003e target \u0026\u0026 nums[i] + nums[k] \u003e= 0)\n                {\n                    break;\n                }\n\n                if(k \u003e i + 1 \u0026\u0026 nums[k] == nums[k-1])// 对nums[K]去重\n                {\n                    continue;\n                }\n\n                left = k + 1;\n                right = n - 1;\n                while(left \u003c right)\n                {\n                    long sum = (long) nums[i] + nums[k] + nums[left] + nums[right];\n                    if(sum \u003e target)\n                    {\n                        right--;\n                    }\n                    else if(sum \u003c target)\n                    {\n                        left++;\n                    }\n                    else\n                    {\n                        result.push_back({nums[i] , nums[k] , nums[left] , nums[right]});\n                    \n                        // 找到答案时，双指针同时收缩\n                        left++;\n                        right--;\n                    \n                        while(left \u003c right \u0026\u0026 nums[left] == nums[left-1])left++;// 对nums[left]去重\n                        while(left \u003c right \u0026\u0026 nums[right] == nums[right+1])right--; // 对nums[right]去重\n                    }\n                }\n            }\n        }\n        return result;\n    }\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230330224804-76yiuie",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330224804-76yiuie"
			}
		},
		{
			"ID": "20230330224758-ujl2t8i",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230330224758-ujl2t8i",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "15. 三数之和"
				}
			]
		},
		{
			"ID": "20230330224758-p3q5cad",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230330224758-p3q5cad",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://leetcode.cn/problems/3sum/",
					"TextMarkTextContent": "15. 三数之和"
				}
			]
		},
		{
			"ID": "20230330224758-bar25zs",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330224758-bar25zs",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解题思路:"
				}
			]
		},
		{
			"ID": "20230330224758-o0gtskf",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230330224758-o0gtskf",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"ID": "20230330224758-vly740d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230330224758-vly740d",
						"updated": "20230330224758"
					},
					"Children": [
						{
							"ID": "20230330224758-zgy1spv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330224758-zgy1spv",
								"updated": "20230330224758"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对数组进行一次排序；"
								}
							]
						}
					]
				},
				{
					"ID": "20230330224758-9iefp1g",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230330224758-9iefp1g",
						"updated": "20230330224758"
					},
					"Children": [
						{
							"ID": "20230330224758-1ci2fp4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330224758-1ci2fp4",
								"updated": "20230330224758"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "预分配空间，常数复杂度优化；"
								}
							]
						}
					]
				},
				{
					"ID": "20230330224758-y9301dg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230330224758-y9301dg",
						"updated": "20230330224758"
					},
					"Children": [
						{
							"ID": "20230330224758-t7ruvfi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330224758-t7ruvfi",
								"updated": "20230330224758"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "长度不足、最小的数大于零、最大的数小于零 直接返回空数组；"
								}
							]
						}
					]
				},
				{
					"ID": "20230330224758-z2magzt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230330224758-z2magzt",
						"updated": "20230330224758"
					},
					"Children": [
						{
							"ID": "20230330224758-macy737",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330224758-macy737",
								"updated": "20230330224758"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "所有数都是 0，只返回一组 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "{{0, 0, 0}}"
								},
								{
									"Type": "NodeText",
									"Data": "​；"
								}
							]
						}
					]
				},
				{
					"ID": "20230330224758-p71aqxz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230330224758-p71aqxz",
						"updated": "20230330224758"
					},
					"Children": [
						{
							"ID": "20230330224758-bu63meg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330224758-bu63meg",
								"updated": "20230330224758"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "去掉重复的情况；"
								}
							]
						}
					]
				},
				{
					"ID": "20230330224758-7yvjepx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230330224758-7yvjepx",
						"updated": "20230330224758"
					},
					"Children": [
						{
							"ID": "20230330224758-qyvzfx7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230330224758-qyvzfx7",
								"updated": "20230330224758"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类似两数之和的双指针部分，找到一个解就放入结果数组，注意去重；"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230330224758-nk9p8x6",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230330224758-nk9p8x6",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++题解"
				}
			]
		},
		{
			"ID": "20230330224758-zblbmbo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230330224758-zblbmbo",
				"updated": "20230330224758"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e threeSum(vector\u003cint\u003e\u0026 nums) {\n        vector\u003cvector\u003cint\u003e\u003e result;\n        int i, left , right;\n        int n = nums.size();\n        sort(nums.begin() , nums.end()); // 对数组进行排序\n\n        if(n \u003c 3 || nums[0] \u003e 0 || nums[n-1] \u003c 0 ) \n            return result;\n\n        if(!nums[i] \u0026\u0026 !nums[n-1]) // nums中有可能时三个0;\n            return {{0,0,0}};\n    \n        for(i = 0; i \u003c n - 2 ; i++)\n        {\n            if( i \u0026\u0026nums[i] == nums[i-1]) // 消除 i 重复元素\n                continue;\n\n            if(nums[i] \u003e 0) // 当nums[i] \u003e 0 时,就会不有符合要求的数据的了\n                break;\n\n\n        \n            left = i +1;\n            right = n -1;\n            while(left \u003c right)\n            {\n                int target = nums[i] + nums[left] + nums[right];\n                if(target \u003e 0) // 大于目标值 , 缩减右边 right\n                {\n                    right--;\n                }\n                else if(target \u003c 0) // 小于目标值 , 增加左边 left\n                {\n                    left++;\n                }\n                else\n                {\n                    result.push_back({nums[i] , nums[left] , nums[right]});\n                    left++;\n                    right--;\n                    while(left \u003c right \u0026\u0026 nums[left] == nums[left-1]) left++; //消除left重复元素\n                    while(left \u003c right \u0026\u0026 nums[right] == nums[right+1])right--;//消除right重复元素\n                }\n            }\n        }\n        return result;\n    }\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}