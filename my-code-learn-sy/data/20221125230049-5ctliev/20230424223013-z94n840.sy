{
	"ID": "20230424223013-z94n840",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230424223013-z94n840",
		"title": "回溯算法",
		"updated": "20230424223027"
	},
	"Children": [
		{
			"ID": "20230424223027-fqa1l7r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223027-fqa1l7r"
			}
		},
		{
			"ID": "20230424223032-cb5tujh",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424223032-cb5tujh",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "17. 电话号码的字母组合"
				}
			]
		},
		{
			"ID": "20230424223032-b0rnljo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223032-b0rnljo",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://leetcode.cn/problems/letter-combinations-of-a-phone-number/",
					"TextMarkTextContent": "17. 电话号码的字母组合"
				}
			]
		},
		{
			"ID": "20230424223032-zr855hj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424223032-zr855hj",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++题解"
				}
			]
		},
		{
			"ID": "20230424223032-8yfpf4g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424223032-8yfpf4g",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Solution {\npublic:\n    vector\u003cstring\u003e result;\n    string s;\n\nprivate:\n    const string letterMap[10] = {\n        \"\", // 0\n        \"\", // 1\n        \"abc\", // 2\n        \"def\", // 3\n        \"ghi\", // 4\n        \"jkl\", // 5\n        \"mno\", // 6\n        \"pqrs\", // 7\n        \"tuv\", // 8\n        \"wxyz\", // 9\n    };\n\npublic:\n    void backtracking(const string\u0026 digits ,int index)\n    {\n        if(digits.size() == index)\n        {\n            result.push_back(s);\n            return ;\n        }\n\n        int digit = digits[index] -'0'; // 将index指向的数字转为int\n        string letter = letterMap[digit]; // 取数字对应的字符集\n        for(int i = 0 ; i \u003c letter.size() ; i++)\n        {\n            s.push_back(letter[i]); // 处理\n            backtracking(digits , index+1); // 递归，注意index+1，一下层要处理下一个数字了\n            s.pop_back();           // 回溯\n        }\n    }\n\n    vector\u003cstring\u003e letterCombinations(string digits) {\n        if( digits.size() == 0) return result;\n\n        backtracking(digits , 0);\n        return result;\n    }\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424223032-55x5yh2",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424223032-55x5yh2",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "77. 组合"
				}
			]
		},
		{
			"ID": "20230424223032-hxre2aq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223032-hxre2aq",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://leetcode.cn/problems/combinations/",
					"TextMarkTextContent": "77. 组合"
				}
			]
		},
		{
			"ID": "20230424223032-2915z2h",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424223032-2915z2h",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解题思路"
				}
			]
		},
		{
			"ID": "20230424223032-z3ejv0q",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424223032-z3ejv0q",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++题解"
				}
			]
		},
		{
			"ID": "20230424223032-494v22t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424223032-494v22t",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Solution {\npublic:\n    vector\u003cvector\u003cint\u003e\u003e result; // 存放符合条件结果的集合\n    vector\u003cint\u003e path; // 用来存放符合条件结果\n\n    void BackTracking(int n , int k , int startindex)\n    {\n        if(path.size() == k )\n        {\n            result.push_back(path);\n            return;\n        }\n        for(int i = startindex ; i \u003c= n - ( k - path.size()) +1  ; i++)\n        {\n            path.push_back(i); // 处理节点\n            BackTracking( n , k , i + 1 ); //递归\n            path.pop_back();// 回溯，撤销处理的节点\n        }\n\n    }\n\n    vector\u003cvector\u003cint\u003e\u003e combine(int n, int k) {\n        BackTracking( n  , k ,1);\n        return result;\n    }\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424223036-mugr1qa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223036-mugr1qa"
			}
		},
		{
			"ID": "20230424223032-e039wly",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424223032-e039wly",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "216. 组合总和 III"
				}
			]
		},
		{
			"ID": "20230424223032-1whxmfb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424223032-1whxmfb",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "a",
					"TextMarkAHref": "https://leetcode.cn/problems/combination-sum-iii/",
					"TextMarkTextContent": "216. 组合总和 III"
				}
			]
		},
		{
			"ID": "20230424223032-vzhfkmm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424223032-vzhfkmm",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "解题思路"
				}
			]
		},
		{
			"ID": "20230424223032-32h0799",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424223032-32h0799",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++题解"
				}
			]
		},
		{
			"ID": "20230424223032-5f76lkc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424223032-5f76lkc",
				"updated": "20230424223032"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Solution {\nprivate:\n    vector\u003cvector\u003cint\u003e\u003e result; // 存放结果集\n    vector\u003cint\u003e path; // 符合条件的结果\n    // targetSum：目标和，也就是题目中的n。\n    // k：题目中要求k个数的集合。\n    // sum：已经收集的元素的总和，也就是path里元素的总和。\n    // startIndex：下一层for循环搜索的起始位置。\n    void backtracking(int targetSum, int k, int sum, int startIndex) {\n        if (path.size() == k) {\n            if (sum == targetSum) result.push_back(path);\n            return; // 如果path.size() == k 但sum != targetSum 直接返回\n        }\n        for (int i = startIndex; i \u003c= 9; i++) {\n            sum += i; // 处理\n            path.push_back(i); // 处理\n            backtracking(targetSum, k, sum, i + 1); // 注意i+1调整startIndex\n            sum -= i; // 回溯\n            path.pop_back(); // 回溯\n        }\n    }\n\npublic:\n    vector\u003cvector\u003cint\u003e\u003e combinationSum3(int k, int n) {\n        result.clear(); // 可以不加\n        path.clear();   // 可以不加\n        backtracking(n, k, 0, 1);\n        return result;\n    }\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}