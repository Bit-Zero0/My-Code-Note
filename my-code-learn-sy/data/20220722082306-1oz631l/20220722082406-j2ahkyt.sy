{
	"ID": "20220722082406-j2ahkyt",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220722082406-j2ahkyt",
		"title": "c++默认成员函数",
		"updated": "20220829124700"
	},
	"Children": [
		{
			"ID": "20220722082417-lmlm6op",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722082417-lmlm6op",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++最常见的三个默认成员函数"
				}
			]
		},
		{
			"ID": "20220722082417-tqd7y6q",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722082417-tqd7y6q",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "c++类的6个默认成员函数"
				}
			]
		},
		{
			"ID": "20220722082417-47csvli",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220722082417-47csvli",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"ID": "20220722082417-0gdaa08",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220722082417-0gdaa08",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-4welb5u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-4welb5u",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造函数"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-7d2qv3l",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220722082417-7d2qv3l",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-8ic202t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-8ic202t",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "析构函数"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-wp3drrh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220722082417-wp3drrh",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-c80pwoh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-c80pwoh",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "拷贝构造函数"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-6xg4udg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220722082417-6xg4udg",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-i48dbjd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-i48dbjd",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "赋值运算符重载函数"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-96a2147",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220722082417-96a2147",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-ql1bjh1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-ql1bjh1",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "取地址运算符重载"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-zwbrgta",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220722082417-zwbrgta",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-7p694jd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-7p694jd",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "const修饰的取地址操作符重载"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-w3rwa3g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-w3rwa3g",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeLink",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "日期类代码"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "D:\\code\\cpp-learn\\date\\date"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-0vc2cdj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722082417-0vc2cdj",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "构造函数"
				}
			]
		},
		{
			"ID": "20220722082417-8akgv97",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-8akgv97",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "构造函数是特殊的成员函数，需要注意的是，构造函数的虽然名称叫构造，但是需要注意的是构造函数的主要任务并不是开空间创建对象，而是"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "初始化对象"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20220722082417-t292uu2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-t292uu2",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其特征如下："
				}
			]
		},
		{
			"ID": "20220722082417-fi2o30t",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220722082417-fi2o30t",
				"updated": "20220722100150"
			},
			"Children": [
				{
					"ID": "20220722082417-iifbxx9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220722082417-iifbxx9",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-h5gmtjx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-h5gmtjx",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "函数名与类名相同。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-vjufoq0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220722082417-vjufoq0",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-0kvenuo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-0kvenuo",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无返回值。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-9w5ocqr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220722082417-9w5ocqr",
						"updated": "20220722100150"
					},
					"Children": [
						{
							"ID": "20220722082417-3rol9xm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-3rol9xm",
								"updated": "20220722100150"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对象实例化时编译器自动调用对应 的构造函数。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-sl3ip9y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220722082417-sl3ip9y",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-234gsqq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-234gsqq",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造函数可以重载。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-r3xooio",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220722082417-r3xooio",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-1lhkra6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-1lhkra6",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果类中没有显式定义构造函数，则C++编译器会自动生成一个无参的默认构造函数，一旦用户显式定义编译器将不再生成。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-iirjirq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-iirjirq",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如："
				}
			]
		},
		{
			"ID": "20220722082417-mazhvog",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-mazhvog",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\nclass Date\n{\npublic :\n\t// 1.无参构造函数\n\tDate ()\n\t{}\n\n\t// 2.带参构造函数\n\tDate (int year, int month , int day )\n\t{\n\t\t_year = year ;\n\t\t_month = month ;\n\t\t_day = day ;\n\t}\n\nprivate :\n\tint _year ;\n\tint _month ;\n\tint _day ;\n};\n\nvoid TestDate()\n\n{\n\tDate d1; // 调用无参构造函数\n\n\tDate d2 (2015, 1, 1); // 调用带参的构造函数\n\n\t// 注意：如果通过无参构造函数创建对象时，对象后面不用跟括号，否则就成了函数声明\n\t// 以下代码的函数：声明了d3函数，该函数无参，返回一个日期类型的对象\n\tDate d3();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-5nphmvu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-5nphmvu",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们定义构造函数时， 我们可以使用全缺省的方式来定义，这样的话我们能减少很多代码量，而且复用性更强。"
				}
			]
		},
		{
			"ID": "20220722082417-rpt3jsm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-rpt3jsm",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Date\n{\npublic:\n\tDate (int year = 1900, int month = 1, int day = 1)\n\t{\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t}\n\nprivate :\n\tint _year ;\n\tint _month ;\n\tint _day ;\n};\n\n// 以下测试函数能通过编译吗？\n\nvoid Test()\n{\n\tDate d1;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-lm9rkg9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722082417-lm9rkg9",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "析构函数"
				}
			]
		},
		{
			"ID": "20220722082417-2bqbj58",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-2bqbj58",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "析构函数：与构造函数功能相反，析构函数不是完成对象的销毁，局部对象销毁工作是由编译器完成的。而"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "对象在销毁时会自动调用析构函数，完成类的一些资源清理工作"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20220722082417-setl86c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722082417-setl86c",
				"updated": "20220829124700"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特征"
				}
			]
		},
		{
			"ID": "20220722082417-d7nioe1",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220722082417-d7nioe1",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"ID": "20220722082417-pqfsxwa",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220722082417-pqfsxwa",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-7fd7ryk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-7fd7ryk",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "析构函数名是在类名前加上字符 "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "~"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-gcptxtr",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220722082417-gcptxtr",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-pj4ffwx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-pj4ffwx",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无参数无返回值。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-8rb78lj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220722082417-8rb78lj",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-4kyw0d1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-4kyw0d1",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个类有且只有一个析构函数。若未显式定义，系统会自动生成默认的析构函数。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-rudf9yw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20220722082417-rudf9yw",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-ba5jkxt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-ba5jkxt",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对象生命周期结束时，C++编译系统系统自动调用析构函数。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-jorp7vp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20220722082417-jorp7vp",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-gszvdo5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-gszvdo5",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "编译器生成的默认析构函数，对会自定类型成员调用它的析构函数。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220829124651-54j28l0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220829124651-54j28l0",
				"updated": "20220829124651"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么时候会调用析构函数"
				}
			]
		},
		{
			"ID": "20220829124651-54pe6uh",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220829124651-54pe6uh",
				"updated": "20220829124651"
			},
			"Children": [
				{
					"ID": "20220829124651-gljnvpq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220829124651-gljnvpq",
						"updated": "20220829124651"
					},
					"Children": [
						{
							"ID": "20220829124651-rgonmlw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220829124651-rgonmlw",
								"updated": "20220829124651"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "变量在离开其作用域时被销毁。"
								}
							]
						}
					]
				},
				{
					"ID": "20220829124651-6rpbvjd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220829124651-6rpbvjd",
						"updated": "20220829124651"
					},
					"Children": [
						{
							"ID": "20220829124651-ndlxe9p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220829124651-ndlxe9p",
								"updated": "20220829124651"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当一个对象被销毁时，其成员被销毁。"
								}
							]
						}
					]
				},
				{
					"ID": "20220829124651-so7cszh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220829124651-so7cszh",
						"updated": "20220829124651"
					},
					"Children": [
						{
							"ID": "20220829124651-2o49te1",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220829124651-2o49te1",
								"updated": "20220829124651"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "容器（无论是标准库容器还是数组）被销毁时，其元素被销毁。"
								}
							]
						}
					]
				},
				{
					"ID": "20220829124651-hujvcqr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220829124651-hujvcqr",
						"updated": "20220829124651"
					},
					"Children": [
						{
							"ID": "20220829124651-68u06k7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220829124651-68u06k7",
								"updated": "20220829124651"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于动态分配的对象,当对指向它的指针应用delete运算符时被销毁。"
								}
							]
						}
					]
				},
				{
					"ID": "20220829124651-4o542ly",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220829124651-4o542ly",
						"updated": "20220829124651"
					},
					"Children": [
						{
							"ID": "20220829124651-gwc8env",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220829124651-gwc8env",
								"updated": "20220829124651"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对于临时对象，当创建它的完整表达式结束时被销毁。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220829124648-x0huhcg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829124648-x0huhcg"
			}
		},
		{
			"ID": "20220829124649-o47khky",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220829124649-o47khky"
			}
		},
		{
			"ID": "20220722082417-1mqubaz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-1mqubaz",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "typedef int DataType;\n\nclass SeqList\n\n{\n\npublic :\n\tSeqList (int capacity = 10)\n\t{\n\t\t_pData = (DataType*)malloc(capacity * sizeof(DataType));\n\t\tassert(_pData);\n\t\t_size = 0;\n\t\t_capacity = capacity;\n\t}\n\n\t~SeqList()\n\t{\n\t\tif (_pData)\n\t\t{\n\t\tfree(_pData ); // 释放堆上的空间\n\t\t_pData = NULL; // 将指针置为空\n\t\t_capacity = 0;\n\t\t_size = 0;\n\t\t}\n\t}\n\nprivate :\n\tint* _pData ;\n\tsize_t _size;\n\tsize_t _capacity;\n};\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-jeaejk3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-jeaejk3",
				"updated": "20220722082924"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "未被析构前"
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220722082432-blzhvuv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082432-blzhvuv",
				"updated": "20220722093002"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/20220424162840.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-fx3ntyt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-fx3ntyt",
				"updated": "20220722093025"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "被析构后\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220424162944.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722093033-e18wphe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722093033-e18wphe"
			}
		},
		{
			"ID": "20220722082417-ko6exiq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722082417-ko6exiq",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "编译器生成的默认析构函数，对会自定类型成员调用它的析构函数。"
				}
			]
		},
		{
			"ID": "20220722082417-kbo8br2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-kbo8br2",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Stack\n{\npublic:\n\tStack(int capacity = 4)\n\t{\n\t\t_a = (int*)malloc(sizeof(int)*capacity);\n\t\tif (_a == nullptr)\n\t\t{\n\t\t\tcout \u003c\u003c \"malloc fail\\n\" \u003c\u003c endl;\n\t\t\texit(-1);\n\t\t}\n\n\t\t_top = 0;\n\t\t_capacity = capacity;\n\t}\n\n\tvoid Push(int x)\n\t{}\n\n\t// 如果我们不写默认生成析构函数和构造函数类似\n\t// 对于内置类型不做处理\n\t// 对于自定义类型回去调用它的析构函数\n\t~Stack()\n\t{\n\t\tfree(_a);\n\t\t_a = nullptr;\n\t\t_top = _capacity = 0;\n\t}\nprivate:\n\tint* _a;\n\tsize_t _top;\n\tsize_t _capacity;\n};\n\n// 两个栈实现一个队列\nclass MyQueue {\npublic:\n\t// 默认生成构造函数和析构函数会对自定义类型成员调用他的构造和析构\n\tvoid push(int x) {\n\n\t}\nprivate:\n\tStack pushST;\n\tStack popST;\n};\n\nint main()\n{\n\n\tStack s1;\n\t//Stack s2(20);\n\n\tMyQueue mq;\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-33zp0gl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-33zp0gl",
				"updated": "20220722092927"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们需要销毁 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "MyQueue"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 时，它会自动调用我们定义的"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "自定义类型"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中的析构函数来完成释放。"
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220722084102-aekda3z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722084102-aekda3z",
				"updated": "20220722092917"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220424163357.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-tbee9av",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722082417-tbee9av",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拷贝构造函数"
				}
			]
		},
		{
			"ID": "20220722082417-3cc61s3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-3cc61s3",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "拷贝构造函数：只有单个形参，该形参是对"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "本类类型对象的引用"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "(一般常用const修饰)，在用已存在的类型对象创建新对象时由编译器自动调用。"
				}
			]
		},
		{
			"ID": "20220722082417-43qva68",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-43qva68",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "特征"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-uml0994",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20220722082417-uml0994",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"ID": "20220722082417-v6zx2uq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20220722082417-v6zx2uq",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-q8plere",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-q8plere",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "拷贝构造函数是构造函数的一个重载形式。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-52lbad3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20220722082417-52lbad3",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-93xwq5g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-93xwq5g",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "拷贝构造函数的参数只有一个且必须使用引用传参，使用传值方式会引发无穷递归调用。"
								}
							]
						}
					]
				},
				{
					"ID": "20220722082417-tswp2vw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20220722082417-tswp2vw",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-2i8oca0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722082417-2i8oca0",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "若未显示定义，系统生成默认的拷贝构造函数。 默认的拷贝构造函数对象按内存存储按字节序完成拷贝，这种拷贝我们叫做"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "浅拷贝"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，或者"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "值拷贝"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-2uzt9h7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-2uzt9h7",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如：如果我们使用值传递，就会引发无限递归"
				}
			]
		},
		{
			"ID": "20220722082417-wf0oe8c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-wf0oe8c",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Date\n{\npublic:\n\tDate(int year = 1900, int month = 1, int day = 1)\n\t{\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t}\n\n\tDate(const Date d)//这里没有使用 引用传递，所以会无限递归\n\t{\n\t\t_year = d._year;\n\t\t_month = d._month;\n\t\t_day = d._day;\n\t}\n\nprivate:\n\tint _year;\n\tint _month;\n\tint _day;\n};\n\nint main()\n{\n\tDate d1;\n\tDate d2(d1);\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-7m4yzpa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-7m4yzpa",
				"updated": "20220722092942"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220424163942.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722090628-0srbiw4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722090628-0srbiw4",
				"updated": "20220722090629"
			}
		},
		{
			"ID": "20220722082417-zg8xshg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-zg8xshg",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "传值"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "发生无线递归的原因 ："
				}
			]
		},
		{
			"ID": "20220722082417-mdelgxz",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722082417-mdelgxz",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722082417-vnk35tz",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722082417-vnk35tz",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "因为传值时，传递的就是对象，而对象又需要调用拷贝构造函数，而拷贝构造函数接收的是一个对象拷贝，而不是本体，所以形参又是一个对象，这个对象又会去调用它的拷贝构造函数，以此不断循环。"
						}
					]
				},
				{
					"ID": "20220722082417-30rxc4t",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722082417-30rxc4t",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "所以在应该使用"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "引用方式传参,那样的话 形参就是实参的别名,就不会造成无限递归了"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-4lgy1l7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722082417-4lgy1l7",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认生成的拷贝构造函数的问题："
				}
			]
		},
		{
			"ID": "20220722082417-tasjfqg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-tasjfqg",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认是生成的拷贝构造，只是对值进行浅拷贝"
				}
			]
		},
		{
			"ID": "20220722082417-jct9yuv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-jct9yuv",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Date\n{\npublic:\n\tDate(int year = 1900, int month = 1, int day = 1)\n\t{\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t}\n\nprivate:\n\tint _year;\n\tint _month;\n\tint _day;\n};\n\nint main()\n{\n\tDate d1;\n\tDate d2(d1);\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-24brw66",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-24brw66",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当成员函数中含有指针时，会造成一个严重的问题。"
				}
			]
		},
		{
			"ID": "20220722082417-9llapgm",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722082417-9llapgm",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722082417-fmblxf3",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722082417-fmblxf3",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "两个对象或之内的成员的地址是相同的，当对两个对象进行析构时，就会造成一个对同一个地址的"
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "二次释放"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "。"
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-6gt6f6v",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-6gt6f6v",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class String\n{\npublic:\n\tString(const char* str = \"jack\")\n\t{\n\t\t_str = (char*)malloc(strlen(str) + 1);\n\t\tstrcpy(_str, str);\n\t}\n\n\t~String()\n\t{\n\t\tcout \u003c\u003c \"~String()\" \u003c\u003c endl;\n\t\tfree(_str);\n\t}\n\nprivate:\n\tchar* _str;\n};\n\nint main()\n{\n\tString s1(\"hello\");\n\tString s2(s1);\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-64p89gu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-64p89gu",
				"updated": "20220722093111"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220424170023.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722093115-4671dha",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722093115-4671dha"
			}
		},
		{
			"ID": "20220722082417-iz21fh3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722082417-iz21fh3",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "赋值运算符重载"
				}
			]
		},
		{
			"ID": "20220722082417-wnyqk70",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-wnyqk70",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++为了增强代码的可读性引入了运算符重载，运算符重载是具有特殊函数名的函数，也具有其返回值类型，函数名字以及参数列表"
				}
			]
		},
		{
			"ID": "20220722082417-ndibi3f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-ndibi3f",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "函数原型：返回值类型 operator操作符(参数列表)"
				}
			]
		},
		{
			"ID": "20220722082417-xke5odc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-xke5odc",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意 :"
				}
			]
		},
		{
			"ID": "20220722082417-q7d7ipl",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722082417-q7d7ipl",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722082417-g8i8j72",
					"Type": "NodeList",
					"ListData": {
						"Typ": 1
					},
					"Properties": {
						"id": "20220722082417-g8i8j72",
						"updated": "20220722082417"
					},
					"Children": [
						{
							"ID": "20220722082417-9cl5wew",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "MS4=",
								"Num": 1
							},
							"Properties": {
								"id": "20220722082417-9cl5wew",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"ID": "20220722082417-vqx0q01",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722082417-vqx0q01",
										"updated": "20220722082417"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "不能通过连接其他符号来创建新的操作符：比如operator@"
										}
									]
								}
							]
						},
						{
							"ID": "20220722082417-g1cfzvj",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "Mi4=",
								"Num": 2
							},
							"Properties": {
								"id": "20220722082417-g1cfzvj",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"ID": "20220722082417-x51vlu8",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722082417-x51vlu8",
										"updated": "20220722082417"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "重载操作符必须有一个类类型或者枚举类型的操作数"
										}
									]
								}
							]
						},
						{
							"ID": "20220722082417-3x58h0h",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "My4=",
								"Num": 3
							},
							"Properties": {
								"id": "20220722082417-3x58h0h",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"ID": "20220722082417-ynbk8ua",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722082417-ynbk8ua",
										"updated": "20220722082417"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "用于内置类型的操作符，其含义不能改变，例如：内置的整型+，不 能改变其含义"
										}
									]
								}
							]
						},
						{
							"ID": "20220722082417-d5d6ibg",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "NC4=",
								"Num": 4
							},
							"Properties": {
								"id": "20220722082417-d5d6ibg",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"ID": "20220722082417-zwz2qe4",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722082417-zwz2qe4",
										"updated": "20220722082417"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "作为类成员的重载函数时，其形参看起来比操作数数目少1成员函数的操作符有一个默认的形参this，限定为第一个形参"
										}
									]
								}
							]
						},
						{
							"ID": "20220722082417-jcf5jsa",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "NS4=",
								"Num": 5
							},
							"Properties": {
								"id": "20220722082417-jcf5jsa",
								"updated": "20220722082417"
							},
							"Children": [
								{
									"ID": "20220722082417-5own0eh",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722082417-5own0eh",
										"updated": "20220722082417"
									},
									"Children": [
										{
											"Type": "NodeCodeSpan",
											"Data": "code",
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": ".*"
												},
												{
													"Type": "NodeCodeSpanCloseMarker"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": " 、"
										},
										{
											"Type": "NodeCodeSpan",
											"Data": "code",
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "::"
												},
												{
													"Type": "NodeCodeSpanCloseMarker"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": " 、"
										},
										{
											"Type": "NodeCodeSpan",
											"Data": "code",
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "sizeof"
												},
												{
													"Type": "NodeCodeSpanCloseMarker"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": " 、"
										},
										{
											"Type": "NodeCodeSpan",
											"Data": "code",
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "?:(三目操作符)"
												},
												{
													"Type": "NodeCodeSpanCloseMarker"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": " 、"
										},
										{
											"Type": "NodeCodeSpan",
											"Data": "code",
											"Children": [
												{
													"Type": "NodeCodeSpanOpenMarker"
												},
												{
													"Type": "NodeCodeSpanContent",
													"Data": "."
												},
												{
													"Type": "NodeCodeSpanCloseMarker"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": " 注意以上5个运算符不能重载。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-dqvvsjw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-dqvvsjw",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "全局的 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "operator=="
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-rc11f54",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-rc11f54",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Date\n\n{\n\npublic:\n\tDate(int year = 1900, int month = 1, int day = 1)\n\t{\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t}\n\nint _year;\nint _month;\nint _day;\n};\n\n\n// 这里会发现运算符重载成全局的就需要成员变量是共有的，那么问题来了，封装性如何保证？\n// 这里其实可以用我们后面学习的友元解决，或者干脆重载成成员函数。\nbool operator==(const Date\u0026 d1, const Date\u0026 d2)\n{\n\treturn d1._year == d2._year;\n\t\u0026\u0026 d1._month == d2._month\n\t\u0026\u0026 d1._day == d2._day;\n}\n\nvoid Test ()\n{\n\tDate d1(2018, 9, 26);\n\tDate d2(2018, 9, 27);\n\tcout\u003c\u003c(d1 == d2)\u003c\u003cendl;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-91rcihf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-91rcihf",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在类中的"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "operator=="
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-v8ly8qx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-v8ly8qx",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Date\n{\npublic:\n\tDate(int year = 1900, int month = 1, int day = }1)\n\t{\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t}\n\n// bool operator==(Date* this, const Date\u0026 d2)\n// 这里需要注意的是，左操作数是this指向的调用函数的对象\n\tbool operator==(const Date\u0026 d2)\n\t{\n\t\treturn _year == d2._year;\n\t\t\u0026\u0026 _month == d2._month\n\t\t\u0026\u0026 _day == d2._day;\n\t}\n\nprivate:\n\tint _year;\n\tint _month;\n\tint _day;\n};\n\nvoid Test ()\n{\n\tDate d1(2018, 9, 26);\n\tDate d2(2018, 9, 27);\n\tcout\u003c\u003c(d1 == d2)\u003c\u003cendl;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-bqahge9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722082417-bqahge9",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "赋值运算符的重载"
				}
			]
		},
		{
			"ID": "20220722082417-o7bf17j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-o7bf17j",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Date\n{\npublic:\n\tDate(int year = 1900, int month = 1, int day = 1)\n\t{\n\t\t_year = year;\n\t\t_month = month;\n\t\t_day = day;\n\t}\n\n\tDate (const Date\u0026 d)\n\t{\n\t\t_year = d._year;\n\t\t_month = d._month;\n\t\t_day = d._day;\n\t}\n\n\tDate\u0026 operator=(const Date\u0026 d)//d1=d2调用的是这个\n\t{\n\t\tif(this != \u0026d)\n\t\t{\n\t\t\t_year = d._year;\n\t\t\t_month = d._month;\n\t\t\t_day = d._day;\n\t\t}\n\t\treturn *this;\n\t}\n\nprivate:\n\tint _year;\n\tint _month;\n\tint _day;\n};\n\n\nint main()\n{\n\tDate d1;\n\tDate d2(2018，10， 1);\n\n\t// 这里d1调用的编译器生成operator=完成拷贝，d2和d1的值也是一样的。\n\td1 = d2；\n\n\treturn 0;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-h0jx5bo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722082417-h0jx5bo",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "const 修饰类的成员函数"
				}
			]
		},
		{
			"ID": "20220722082417-l7pjate",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-l7pjate",
				"updated": "20220722093139"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将const修饰的类成员函数称之为const成员函数，const修饰类成员函数，实际"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "修饰该成员函数隐含的this指针"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，表明在"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "该成员函数中不能对类的任何成员进行修改"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220424173601.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-tihlife",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722082417-tihlife",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "取地址及const取地址操作符重载"
				}
			]
		},
		{
			"ID": "20220722082417-t5q4cor",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-t5q4cor",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "主要任务"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "：都是取出对象的 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "this指针"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，即对象的"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "地址"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20220722082417-dpdjgzd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-dpdjgzd",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这两个默认成员函数一般不用重新定义 ，编译器默认会生成"
				}
			]
		},
		{
			"ID": "20220722082417-zq0mi3z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722082417-zq0mi3z",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Date\n{\npublic :\n\tDate* operator\u0026()\n\t{\n\t\treturn this ;\n\t}\n\n\tconst Date* operator\u0026()const\n\t{\n\t\treturn this ;\n\t}\n\nprivate :\n\tint _year ; // 年\n\tint _month ; // 月\n\tint _day ; // 日\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722082417-td2byy8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722082417-td2byy8",
				"updated": "20220722082417"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这两个运算符一般不需要重载，使用编译器生成的默认取地址的重载即可，只有特殊情况，才需要重载，比如想让别人获取到指定的内容"
				}
			]
		},
		{
			"ID": "20220722093121-qbxflw4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722093121-qbxflw4"
			}
		}
	]
}