{
	"ID": "20220722101946-ovektgc",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220722101946-ovektgc",
		"title": "深浅拷贝",
		"updated": "20220722102259"
	},
	"Children": [
		{
			"ID": "20220722101958-6qsz2dk",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722101958-6qsz2dk",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "深浅拷贝的必要性"
				}
			]
		},
		{
			"ID": "20220722101958-sxa8bhi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101958-sxa8bhi",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在编程中经常会遇到 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "二次释放"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "问题 ， 这常常是因为 数据的"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "深浅拷贝"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "而造成的。"
				}
			]
		},
		{
			"ID": "20220722101958-oxopc4a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101958-oxopc4a",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeText",
									"Data": "浅拷贝"
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "：完全的将代码复制过来，不进行修改。（就像抄作业时，完全不改动）。"
				}
			]
		},
		{
			"ID": "20220722101958-utlr70x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101958-utlr70x",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "深拷贝"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "：给每个对象直降独立的分配资源，保证多个对象之间不会因共享资源而造成多次释放，造成程序崩溃。（就像抄作业时，有选择性的修改，让别人看不出是抄的）"
				}
			]
		},
		{
			"ID": "20220722101958-83d45lo",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722101958-83d45lo",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "浅拷贝"
				}
			]
		},
		{
			"ID": "20220722101958-bj2zl5w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101958-bj2zl5w",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如：这段代码，创建一个 字符数组 。"
				}
			]
		},
		{
			"ID": "20220722101958-i6gwc6l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722101958-i6gwc6l",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Array\n{\nprivate:\n\tint _size;\n\tint capacity;\n\tchar* str;\n\n\n\tArray(const char* s = \"\")\n\t\t:_size(strlen(s))\n\t\t,_capacity(_size)\n\t{\n\t\t_str = new char[capacity+1];\n\t\tstrcpy(_str , s);\n\t}\n\n\tArray(const Array\u0026 a)\n\t\t:_size(a._size)\n\t\t,_capacity(a._capacity)\n\t{\n\t\t_str = s._str;\n\t}\n\n\t~Array()\n\t{\n\t\tdalete[] _str;\n\t\t_str = nullptr;\n\t\t_size = _capacity = 0;\n\t}\n}\n\nint main()\n{\n\tArray a1 = \"abc\";\n\n\tArray a2(a1);\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722101958-74qf6dv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101958-74qf6dv",
				"updated": "20220722102220"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当我们使用 a2来拷贝构造 a1 时 ， 会把a1的所有信息都拷贝过去，然后就会形成一个局面。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220510125425.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\na1这个对象和 a2这个对象的"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "所有成员变量都是一样"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "的， 当使用"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722082417-lm9rkg9"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "析构函数"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "时 ，会先释放a2的空间"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "0f16445"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，当之后释放a1时 ，又会再次释放 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "0f16445"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 这个我们开辟的空间， 就会造成"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "二次释放"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20220722101958-qlac89t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722101958-qlac89t",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "深拷贝"
				}
			]
		},
		{
			"ID": "20220722101958-e01vdcd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101958-e01vdcd",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "深拷贝"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "指给每个对象直降独立的分配资源，保证多个对象之间不会因共享资源而造成多次释放，造成程序崩溃。"
				}
			]
		},
		{
			"ID": "20220722101958-ed6jan5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722101958-ed6jan5",
				"updated": "20220722101958"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "‍```cpp\nclass Array\n{\nprivate:\n\tint _size;\n\tint capacity;\n\tchar* str;\n\n\t// 我们自己写的swap函数\n\tvoid swap(string\u0026 s)\n\t{\n\t\tstd:swap(_size , s._size);\n\t\tstd:swap(_capacity , s._capacity);\n\t\tstd:swap(_str , s._str);\n\t}\n\n\tArray(const char* s = \"\")\n\t\t:_size(strlen(s))\n\t\t,_capacity(_size)\n\t{\n\t\t_str = new char[capacity+1];\n\t\tstrcpy(_str , s);\n\t}\n\n\tArray(const Array\u0026 a) //这里的代码有改动，之前是浅拷贝，现在已经变为了深拷贝\n\t\t:_str(nullptr)\n\t\t,_size(0)\n\t\t,_capacity(0)\n\t{\n\t\tArray tmp(s._str); //用s._str来构造tmp对象，而用 char* 字符串的构造需要开辟一片新空间，所以可用\n\t\tswap(s); //这个 swap 是我们自己书写的，因为库函数中的swap会调用构造函数，消耗会太大，所以我们自己些了一个\n\t}\n\n\t~Array()\n\t{\n\t\tdalete[] _str;\n\t\t_str = nullptr;\n\t\t_size = _capacity = 0;\n\t}\n}\n\nint main()\n{\n\tArray a1 = \"abc\";\n\n\tArray a2(a1);\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722101958-ybp9i49",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101958-ybp9i49",
				"updated": "20220722102259"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "/"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220510173611.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722102243-n3noayk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722102243-n3noayk"
			}
		}
	]
}