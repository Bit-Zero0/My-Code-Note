{
	"ID": "20220722101445-7o6q26x",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220722101445-7o6q26x",
		"title": "命名空间",
		"updated": "20220722101513"
	},
	"Children": [
		{
			"ID": "20220722101451-jkuxcin",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722101451-jkuxcin",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "命名空间的概念"
				}
			]
		},
		{
			"ID": "20220722101451-lftqseu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101451-lftqseu",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "命名空间是为了防止同一团队中的所书写的函数或变量名相同而造成冲突，而诞生的概念。"
				}
			]
		},
		{
			"ID": "20220722101451-y7e6s9v",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722101451-y7e6s9v",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722101451-g1kmqpt",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722101451-g1kmqpt",
						"updated": "20220722101451"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在C/C++中，变量、函数和后面要学到的类都是大量存在的，这些变量、函数和类的名称将都存在于全局作用域中，可能会导致很多冲突。使用命名空间的目的是对标识符的名称进行本地化，以避免命名冲突或名字污染，"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "namespace"
						},
						{
							"Type": "NodeText",
							"Data": "关键字的出现就是针对这种问题的。"
						}
					]
				}
			]
		},
		{
			"ID": "20220722101451-24tnhwi",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722101451-24tnhwi",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "命名空间的使用"
				}
			]
		},
		{
			"ID": "20220722101451-h6g5wkp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101451-h6g5wkp",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "namespace"
				},
				{
					"Type": "NodeText",
					"Data": " 关键字。"
				}
			]
		},
		{
			"ID": "20220722101451-yfcrqgs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722101451-yfcrqgs",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n\nvoid printf()\n{\n\tprintf(\"hello\");\n}\n\nnamespace fmy //命名空间\n{\n\tvoid print() // 命名空间内的函数\n\t{\n\t\tprinf(\"hello 123\");\n\t}\n}\n\nint main()\n{\n\n\tprint();//调用函数\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722101451-qt03lw6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101451-qt03lw6",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在代码中我们创建了两个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "print()"
				},
				{
					"Type": "NodeText",
					"Data": " 函数，如果我们没有直接调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "print()"
				},
				{
					"Type": "NodeText",
					"Data": "函数的话，调用的是第一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "print()"
				},
				{
					"Type": "NodeText",
					"Data": ",打印结果就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "hello"
				},
				{
					"Type": "NodeText",
					"Data": " , 而如果我们要使用命名空间中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "print()"
				},
				{
					"Type": "NodeText",
					"Data": " ，就需要使用命名空间来指定函数或变量"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "fmy::print()"
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20220722101451-t4rvtzm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101451-t4rvtzm",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "::"
				},
				{
					"Type": "NodeText",
					"Data": " 这两个冒号组成的叫做，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "域操作符"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20220722101451-ja6k3mb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722101451-ja6k3mb",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "展开命名空间"
				}
			]
		},
		{
			"ID": "20220722101451-35jylo3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101451-35jylo3",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong mark",
					"TextMarkTextContent": "C++"
				},
				{
					"Type": "NodeText",
					"Data": " 中，我们使用使用C++自带的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "输入输出函数"
				},
				{
					"Type": "NodeText",
					"Data": "时，我们需要使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "域操作符"
				},
				{
					"Type": "NodeText",
					"Data": " "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "::"
				},
				{
					"Type": "NodeText",
					"Data": "\n如 ："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "std::cout"
				},
				{
					"Type": "NodeText",
					"Data": " , "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "std::cin"
				},
				{
					"Type": "NodeText",
					"Data": " , "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "std::endl"
				}
			]
		},
		{
			"ID": "20220722101451-grvfrkj",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722101451-grvfrkj",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\nint main()\n{\n\tstd::cout \u003c\u003c \"hello cpp\" \u003c\u003c std::endl;\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722101451-uy5a3bj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101451-uy5a3bj",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每次加上"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "std::"
				},
				{
					"Type": "NodeText",
					"Data": "都 好麻烦，怎么才能更便捷呢；"
				}
			]
		},
		{
			"ID": "20220722101451-ewn2dqe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101451-ewn2dqe",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那就是使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "using"
				},
				{
					"Type": "NodeText",
					"Data": " 关键字；"
				}
			]
		},
		{
			"ID": "20220722101451-fq391i8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722101451-fq391i8",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\nusing namespace std; //展开 std命名空间 ，使std命名空间中的函数都变成全局的。\n\nint main()\n{\n\tcout \u003c\u003c \"hello\" \u003c\u003c endl;\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722101451-e8t8eww",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101451-e8t8eww",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样就简洁多了， 但是这样做会是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong mark",
					"TextMarkTextContent": "std"
				},
				{
					"Type": "NodeText",
					"Data": " 这个命名空间中的函数都展开来，而我们最常用的也就几个，全展开后，有可能会造成命名冲突，所以不推荐全展开，而是推荐"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "局部展开"
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20220722101451-1ca5em4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722101451-1ca5em4",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\nusing std::cout;//只展开我们常用的这三个函数，这样就不容易造成命名冲突了\nusing std::cin;\nusing std::endl;\n\nint main()\n{\n\tcout \u003c\u003c \"hello\" \u003c\u003c endl;\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722101451-7s0332q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101451-7s0332q",
				"updated": "20220722101451"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "只展开我们常用的这三个函数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cout"
				},
				{
					"Type": "NodeText",
					"Data": " ,"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "cin"
				},
				{
					"Type": "NodeText",
					"Data": " ,"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "endl"
				},
				{
					"Type": "NodeText",
					"Data": "，这样就不容易造成命名冲突了"
				}
			]
		},
		{
			"ID": "20220722101513-a2cacza",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722101513-a2cacza"
			}
		}
	]
}