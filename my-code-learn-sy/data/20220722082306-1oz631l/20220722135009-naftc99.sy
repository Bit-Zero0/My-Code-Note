{
	"ID": "20220722135009-naftc99",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220722135009-naftc99",
		"title": "C++的IO流",
		"updated": "20230408230332"
	},
	"Children": [
		{
			"ID": "20230408230332-5y2eags",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230408230332-5y2eags",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C语言的输入与输出"
				}
			]
		},
		{
			"ID": "20230408230332-t5bv4ls",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-t5bv4ls",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "语言中我们用到的最频繁的输入输出方式就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "scanf()"
				},
				{
					"Type": "NodeText",
					"Data": "​与"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "printf()"
				},
				{
					"Type": "NodeText",
					"Data": "​。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "scanf()"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": ":从标准输入设备（键盘）读取数据，并将值存放在变量中。"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "printf()"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": ":将指定的文字/字符串输出到标准输出设备（屏幕）。"
				},
				{
					"Type": "NodeText",
					"Data": "\n注意宽度输出和精度输出控制。C语言借助了相应的缓冲区来进行输入与输出。如下图所示\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230408225639.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-t4co6zz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-t4co6zz",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "输入输出缓冲区"
				},
				{
					"Type": "NodeText",
					"Data": "的理解：\n1.可以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "屏蔽掉低级I/O"
				},
				{
					"Type": "NodeText",
					"Data": "的实现，低级I/O的实现依赖操作系统本身内核的实现，所以如果能够屏蔽这部分的差异，可以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "很容易写出可移植的程序"
				},
				{
					"Type": "NodeText",
					"Data": "。\n2.可以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "使用这部分的内容实现“行”读取的行为"
				},
				{
					"Type": "NodeText",
					"Data": "，对于计算机而言是没有“行”这个概念，有了这部分，就可以定义“行”的概念，然后解析缓冲区的内容，返回一个“行”。"
				}
			]
		},
		{
			"ID": "20230408230332-7ulogor",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230408230332-7ulogor",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++IO流"
				}
			]
		},
		{
			"ID": "20230408230332-xdz5pyj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-xdz5pyj",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++系统实现了一个庞大的类库，其中ios为基类，其他类都是直接或间接派生自ios类\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230408225739.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-zp3e5d1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-zp3e5d1",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++标准IO流"
				}
			]
		},
		{
			"ID": "20230408230332-wt1sr5q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-wt1sr5q",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++标准库提供了4个全局流对象cin、cout、cerr、clog，使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "cout进行标准输出，即数据从内存流向控制台(显示器)"
				},
				{
					"Type": "NodeText",
					"Data": "。使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "cin进行标准输入即数据通过键盘输入到程序中"
				},
				{
					"Type": "NodeText",
					"Data": "，同时C++标准库还提供了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "cerr用来进行标准错误的输出"
				},
				{
					"Type": "NodeText",
					"Data": "，以及"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "clog进行日志的输出"
				},
				{
					"Type": "NodeText",
					"Data": "，从上图可以看出，cout、cerr、clog是ostream类的三个不同的对象，因此这三个对象现在基本没有区别，只是应用场景不同。\n在使用时候必须要包含文件并引入std标准命名空间。"
				}
			]
		},
		{
			"ID": "20230408230332-vh5m50p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-vh5m50p",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意："
				}
			]
		},
		{
			"ID": "20230408230332-vpi9c1l",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230408230332-vpi9c1l",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230408230332-wx6razh",
					"Type": "NodeList",
					"ListData": {
						"Typ": 1
					},
					"Properties": {
						"id": "20230408230332-wx6razh",
						"updated": "20230408230332"
					},
					"Children": [
						{
							"ID": "20230408230332-y2hzirc",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "MS4=",
								"Num": 1
							},
							"Properties": {
								"id": "20230408230332-y2hzirc",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-mbrkfze",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230408230332-mbrkfze",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "cin为缓冲流。"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "键盘输入的数据保存在缓冲区中，当要提取时，是从缓冲区中拿"
										},
										{
											"Type": "NodeText",
											"Data": "。如果一次输入过多，会留在那儿慢慢用，"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "如果输入错了，必须在回车之前修改，如果回车键按下就无法挽回了。只有把输入缓冲区中的数据取完后，才要求输入新的数据"
										},
										{
											"Type": "NodeText",
											"Data": "。"
										}
									]
								}
							]
						},
						{
							"ID": "20230408230332-op0qf5d",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "Mi4=",
								"Num": 2
							},
							"Properties": {
								"id": "20230408230332-op0qf5d",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-p8zguks",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230408230332-p8zguks",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "输入的数据类型必须与要提取的数据类型一致"
										},
										{
											"Type": "NodeText",
											"Data": "，否则出错。出错只是在流的状态字state中对应位置位（置1），程序继续。"
										}
									]
								}
							]
						},
						{
							"ID": "20230408230332-knngwwd",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "My4=",
								"Num": 3
							},
							"Properties": {
								"id": "20230408230332-knngwwd",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-5z7xsfb",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230408230332-5z7xsfb",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "空格和回车都可以作为数据之间的分格符，所以多个数据可以在一行输入，也可以分行输入。"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "但如果是字符型和字符串，则空格（ASCII码为32）无法用cin输入，字符串中也不能有空格"
										},
										{
											"Type": "NodeText",
											"Data": "。回车符也无法读入。"
										}
									]
								}
							]
						},
						{
							"ID": "20230408230332-0mwn6lh",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "NC4=",
								"Num": 4
							},
							"Properties": {
								"id": "20230408230332-0mwn6lh",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-6ettds6",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230408230332-6ettds6",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "cin和cout可以直接输入和输出内置类型数据，原因："
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "标准库已经将所有内置类型的输入和输出全部重载了"
										},
										{
											"Type": "NodeText",
											"Data": ":\n​"
										},
										{
											"Type": "NodeImage",
											"Data": "span",
											"Children": [
												{
													"Type": "NodeBang"
												},
												{
													"Type": "NodeOpenBracket"
												},
												{
													"Type": "NodeLinkText",
													"Data": "image.png"
												},
												{
													"Type": "NodeCloseBracket"
												},
												{
													"Type": "NodeOpenParen"
												},
												{
													"Type": "NodeLinkDest",
													"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230408230026.png"
												},
												{
													"Type": "NodeCloseParen"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "\n​"
										},
										{
											"Type": "NodeImage",
											"Data": "span",
											"Children": [
												{
													"Type": "NodeBang"
												},
												{
													"Type": "NodeOpenBracket"
												},
												{
													"Type": "NodeLinkText",
													"Data": "image.png"
												},
												{
													"Type": "NodeCloseBracket"
												},
												{
													"Type": "NodeOpenParen"
												},
												{
													"Type": "NodeLinkDest",
													"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230408230032.png"
												},
												{
													"Type": "NodeCloseParen"
												}
											]
										},
										{
											"Type": "NodeText",
											"Data": "​"
										}
									]
								}
							]
						},
						{
							"ID": "20230408230332-7hl31p8",
							"Type": "NodeListItem",
							"ListData": {
								"Typ": 1,
								"Delimiter": 46,
								"Marker": "NS4=",
								"Num": 5
							},
							"Properties": {
								"id": "20230408230332-7hl31p8",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-46mlrdk",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230408230332-46mlrdk",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "对于自定义类型，如果要支持cin和cout的标准输入输出，需要对"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "\u0026lt;\u0026lt;"
										},
										{
											"Type": "NodeText",
											"Data": "​和"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "\u0026gt;\u0026gt;"
										},
										{
											"Type": "NodeText",
											"Data": "​进行重载。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408230332-dtm2odr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-dtm2odr",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++文件IO流"
				}
			]
		},
		{
			"ID": "20230408230332-ibi0s2p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-ibi0s2p",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "C++根据文件内容的数据格式分为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "二进制文件"
				},
				{
					"Type": "NodeText",
					"Data": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "文本文件"
				},
				{
					"Type": "NodeText",
					"Data": "。采用文件流对象操作文件的一般步骤："
				}
			]
		},
		{
			"ID": "20230408230332-x21oix6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230408230332-x21oix6",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"ID": "20230408230332-3bzx0x6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230408230332-3bzx0x6",
						"updated": "20230408230332"
					},
					"Children": [
						{
							"ID": "20230408230332-6e9p752",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408230332-6e9p752",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "定义一个文件流对象"
								}
							]
						},
						{
							"ID": "20230408230332-aiziqn0",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230408230332-aiziqn0",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-k9x7atq",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230408230332-k9x7atq",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"ID": "20230408230332-vf5fs3p",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230408230332-vf5fs3p",
												"updated": "20230408230332"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "ifstream ifile(只输入用)"
												}
											]
										}
									]
								},
								{
									"ID": "20230408230332-42ae25u",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230408230332-42ae25u",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"ID": "20230408230332-jjnoyw8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230408230332-jjnoyw8",
												"updated": "20230408230332"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "ofstream ofile(只输出用)"
												}
											]
										}
									]
								},
								{
									"ID": "20230408230332-xxkd75p",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230408230332-xxkd75p",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"ID": "20230408230332-j9q6k0t",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230408230332-j9q6k0t",
												"updated": "20230408230332"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "fstream iofile(既输入又输出用)"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230408230332-5lsc7km",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230408230332-5lsc7km",
						"updated": "20230408230332"
					},
					"Children": [
						{
							"ID": "20230408230332-b199uuq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408230332-b199uuq",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用文件流对象的成员函数打开一个磁盘文件，使得文件流对象和磁盘文件之间建立联系"
								}
							]
						}
					]
				},
				{
					"ID": "20230408230332-qr695a6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230408230332-qr695a6",
						"updated": "20230408230332"
					},
					"Children": [
						{
							"ID": "20230408230332-21cw1xf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408230332-21cw1xf",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用提取和插入运算符对文件进行读写操作，或使用成员函数进行读写"
								}
							]
						}
					]
				},
				{
					"ID": "20230408230332-5iyn9ns",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230408230332-5iyn9ns",
						"updated": "20230408230332"
					},
					"Children": [
						{
							"ID": "20230408230332-hp62c6z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230408230332-hp62c6z",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "关闭文件"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408230332-4qpdo79",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230408230332-4qpdo79",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "写入文本文件"
				}
			]
		},
		{
			"ID": "20230408230332-bjq9o8z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-bjq9o8z",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "文本文件一般以行的形式组织数据。"
				}
			]
		},
		{
			"ID": "20230408230332-d0u8r7o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-d0u8r7o",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "包含头文件："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#include \u0026lt;fstream\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-8ifya6n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-8ifya6n",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类"
				},
				{
					"Type": "NodeText",
					"Data": " ofstream（output file stream）"
				}
			]
		},
		{
			"ID": "20230408230332-o3xgnvz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-o3xgnvz",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "ofstream"
				},
				{
					"Type": "NodeText",
					"Data": "​ "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "打开文件的模式（方式）："
				}
			]
		},
		{
			"ID": "20230408230332-93t38t5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-93t38t5",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于ofstream，不管用哪种模式打开文件，如果文件不存在，都会创建文件。"
				}
			]
		},
		{
			"ID": "20230408230332-y5sk9tb",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				2
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230408230332-y5sk9tb",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "ios::out"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "缺省值：会截断文件内容。"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::trunc"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "截断文件内容。（truncate）"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::app"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不截断文件内容，只在文件未尾追加文件。（append）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408230332-8vnbsnx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-8vnbsnx",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例"
				}
			]
		},
		{
			"ID": "20230408230332-qxkkqi0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-qxkkqi0",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cfstream\u003e  // ofstream类需要包含的头文件。\nusing  namespace std;\n\nint main()\n{\n\t// 文件名一般用全路径，书写的方法如下：\n\t//  1）\"D:\\data\\txt\\test.txt\"       // 错误。\n\t//  2）R\"(D:\\data\\txt\\test.txt)\"   // 原始字面量，C++11标准。\n\t//  3）\"D:\\\\data\\\\txt\\\\test.txt\"   // 转义字符。\n\t//  4）\"D:/tata/txt/test.txt\"        // 把斜线反着写。\n\t//  5）\"/data/txt/test.txt\"          //  Linux系统采用的方法。\n\tstring filename = R\"(D:\\data\\txt\\test.txt)\";\n\t//char    filename[] = R\"(D:\\data\\txt\\test.txt)\";\n\n\t// 创建文件输出流对象，打开文件，如果文件不存在，则创建它。\n\t// ios::out     \t\t缺省值：会截断文件内容。\n\t// ios::trunc  \t\t截断文件内容。（truncate）\n\t// ios::app   \t\t\t不截断文件内容，只在文件未尾追加文件。（append）\n\t//ofstream fout(filename);\n\t//ofstream fout(filename, ios::out);\n\t//ofstream fout(filename, ios::trunc);\n\t//ofstream fout(filename, ios::app);\n\n\tofstream fout;\n\tfout.open(filename,ios::app);\n\n\t// 判断打开文件是否成功。\n\t// 失败的原因主要有：1）目录不存在；2）磁盘空间已满；3）没有权限，Linux平台下很常见。\n\tif (fout.is_open() == false)\n\t{\n\t\tcout \u003c\u003c \"打开文件\" \u003c\u003c filename \u003c\u003c \"失败。\\n\";  return 0;\n\t}\n\n\t// 向文件中写入数据。\n\tfout \u003c\u003c \"西施|19|极漂亮\\n\";\n\tfout \u003c\u003c \"冰冰|22|漂亮\\n\";\n\tfout \u003c\u003c \"幂幂|25|一般\\n\";\n\n\tfout.close();\t   // 关闭文件，fout对象失效前会自动调用close()。\n\n\tcout \u003c\u003c \"操作文件完成。\\n\";\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408230332-r4sdv7w",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230408230332-r4sdv7w",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读取文本文件"
				}
			]
		},
		{
			"ID": "20230408230332-et9l0w5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-et9l0w5",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包含头文件："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#include \u0026lt;fstream\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-voehe3q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-voehe3q",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类：ifstream"
				}
			]
		},
		{
			"ID": "20230408230332-byp5j2d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-byp5j2d",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "ifstream"
				},
				{
					"Type": "NodeText",
					"Data": "​  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "打开文件的模式（方式）："
				}
			]
		},
		{
			"ID": "20230408230332-9ksw3hq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-9ksw3hq",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于ifstream，如果文件不存在，则打开文件失败。"
				}
			]
		},
		{
			"ID": "20230408230332-trer2iw",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				2
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230408230332-trer2iw",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "ios::in"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "缺省值。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408230332-wpkhjnx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-wpkhjnx",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20230408230332-vs9qg1e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-vs9qg1e",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cfstream\u003e  // ifstream类需要包含的头文件。\n#include \u003cstring\u003e     // getline()函数需要包含的头文件。\nusing  namespace std;\n\nint main()\n{\n\t// 文件名一般用全路径，书写的方法如下：\n\t//  1）\"D:\\data\\txt\\test.txt\"       // 错误。\n\t//  2）R\"(D:\\data\\txt\\test.txt)\"   // 原始字面量，C++11标准。\n\t//  3）\"D:\\\\data\\\\txt\\\\test.txt\"   // 转义字符。\n\t//  4）\"D:/tata/txt/test.txt\"        // 把斜线反着写。\n\t//  5）\"/data/txt/test.txt\"          //  Linux系统采用的方法。\n\tstring filename = R\"(D:\\data\\txt\\test.txt)\";\n\t//char    filename[] = R\"(D:\\data\\txt\\test.txt)\";\n\n\t// 创建文件输入流对象，打开文件，如果文件不存在，则打开文件失败。。\n\t// ios::in     \t\t\t缺省值。\n\t//ifstream fin(filename);\n\t//ifstream fin(filename, ios::in);\n\n\tifstream fin;\n\tfin.open(filename,ios::in);\n\n\t// 判断打开文件是否成功。\n\t// 失败的原因主要有：1）目录不存在；2）文件不存在；3）没有权限，Linux平台下很常见。\n\tif (fin.is_open() == false)\n\t{\n\t\tcout \u003c\u003c \"打开文件\" \u003c\u003c filename \u003c\u003c \"失败。\\n\";  return 0;\n\t}\n\n\t//// 第一种方法。\n\t//string buffer;  // 用于存放从文件中读取的内容。\n\t//// 文本文件一般以行的方式组织数据。\n\t//while (getline(fin, buffer))\n\t//{\n\t//\tcout \u003c\u003c buffer \u003c\u003c endl;\n\t//}\n\n\t//// 第二种方法。\n\t//char buffer[16];   // 存放从文件中读取的内容。\n\t//// 注意：如果采用ifstream.getline()，一定要保证缓冲区足够大。\n\t//while (fin.getline(buffer, 15))\n\t//{\n\t//\tcout \u003c\u003c buffer \u003c\u003c endl;\n\t//}\n\n\t// 第三种方法。\n\tstring buffer;\n\twhile (fin \u003e\u003e buffer)\n\t{\n\t\tcout \u003c\u003c buffer \u003c\u003c endl;\n\t}\n\n\tfin.close();\t   // 关闭文件，fin对象失效前会自动调用close()。\n\n\tcout \u003c\u003c \"操作文件完成。\\n\";\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408230332-tu1q2be",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230408230332-tu1q2be",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "写入二进制文件"
				}
			]
		},
		{
			"ID": "20230408230332-3zmfeex",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-3zmfeex",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二进制文件以数据块的形式组织数据，把内存中的数据直接写入文件。"
				}
			]
		},
		{
			"ID": "20230408230332-2dcvky8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-2dcvky8",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包含头文件："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#include \u0026lt;fstream\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-xtgjxcl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-xtgjxcl",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ofstream(output file stream)"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-4ugfglk",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				2
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230408230332-4ugfglk",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "ofstream打开文件的模式（方式）："
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2
								}
							]
						},
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "对于ofstream，不管用哪种模式打开文件，如果文件不存在，都会创建文件。"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2
								}
							]
						},
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "ios::out"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "缺省值：会截断文件内容。"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::trunc"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "截断文件内容。（truncate）"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::app"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不截断文件内容，只在文件未尾追加文件。（append）"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::binary"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "以二进制方式打开文件。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408230332-bs464ba",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-bs464ba",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "操作文本文件和二进制文件的一些细节："
				}
			]
		},
		{
			"ID": "20230408230332-69fuidj",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230408230332-69fuidj",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230408230332-emr8lpz",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230408230332-emr8lpz",
						"updated": "20230408230332"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "1）在windows平台下，文本文件的换行标志是\""
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "\\r\\n"
						},
						{
							"Type": "NodeText",
							"Data": "​\"。\n2）在linux平台下，文本文件的换行标志是\""
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "\\n"
						},
						{
							"Type": "NodeText",
							"Data": "​\"。\n3）在windows平台下，如果以文本方式打开文件，写入数据的时候，系统会将\""
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "\\n"
						},
						{
							"Type": "NodeText",
							"Data": "​\"转换成\""
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "\\r\\n"
						},
						{
							"Type": "NodeText",
							"Data": "​\"；读取数据的时候，系统会将\""
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "\\r\\n"
						},
						{
							"Type": "NodeText",
							"Data": "​\"转换成\""
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "\\n"
						},
						{
							"Type": "NodeText",
							"Data": "​\"。 如果以二进制方式打开文件，写和读都不会进行转换。\n4）在Linux平台下，以文本或二进制方式打开文件，系统不会做任何转换。\n5）以文本方式读取文件的时候，遇到换行符停止，读入的内容中没有换行符；以二制方式读取文件的时候，遇到换行符不会停止，读入的内容中会包含换行符（换行符被视为数据）。\n6）在实际开发中，从兼容和语义考虑，一般："
						}
					]
				},
				{
					"ID": "20230408230332-9t2wvcs",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230408230332-9t2wvcs",
						"updated": "20230408230332"
					},
					"Children": [
						{
							"ID": "20230408230332-ez0hnac",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230408230332-ez0hnac",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-8844u87",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230408230332-8844u87",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "a）以文本模式打开文本文件，用行的方法操作它；"
										}
									]
								}
							]
						},
						{
							"ID": "20230408230332-gvpm4xj",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230408230332-gvpm4xj",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-56lam62",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230408230332-56lam62",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "b）以二进制模式打开二进制文件，用数据块的方法操作它；"
										}
									]
								}
							]
						},
						{
							"ID": "20230408230332-z8xaw2a",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230408230332-z8xaw2a",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-04knwd3",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230408230332-04knwd3",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "c）以二进制模式打开文本文件和二进制文件，用数据块的方法操作它，这种情况表示不关心数据的内容。（例如复制文件和传输文件）"
										}
									]
								}
							]
						},
						{
							"ID": "20230408230332-7mr31my",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230408230332-7mr31my",
								"updated": "20230408230332"
							},
							"Children": [
								{
									"ID": "20230408230332-2jbhqhh",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230408230332-2jbhqhh",
										"updated": "20230408230332"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "d）不要以文本模式打开二进制文件，也不要用行的方法操作二进制文件，可能会破坏二进制数据文件的格式，也没有必要。（因为二进制文件中的某字节的取值可能是换行符，但它的意义并不是换行，可能是整数n个字节中的某个字节）"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408230332-nuglit1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-nuglit1",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20230408230332-z6cubqf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-z6cubqf",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cfstream\u003e  // ofstream类需要包含的头文件。\nusing  namespace std;\n\nint main()\n{\n\t// 文件名一般用全路径，书写的方法如下：\n\t//  1）\"D:\\data\\bin\\test.dat\"       // 错误。\n\t//  2）R\"(D:\\data\\bin\\test.dat)\"   // 原始字面量，C++11标准。\n\t//  3）\"D:\\\\data\\\\bin\\\\test.dat\"   // 转义字符。\n\t//  4）\"D:/tata/bin/test.dat\"        // 把斜线反着写。\n\t//  5）\"/data/bin/test.dat\"          //  Linux系统采用的方法。\n\tstring filename = R\"(D:\\data\\bin\\test.dat)\";\n\t//char    filename[] = R\"(D:\\data\\bin\\test.dat)\";\n\n\t// 创建文件输出流对象，打开文件，如果文件不存在，则创建它。\n\t// ios::out     \t\t缺省值：会截断文件内容。\n\t// ios::trunc  \t\t截断文件内容。（truncate）\n\t// ios::app   \t\t\t不截断文件内容，只在文件未尾追加文件。（append）\n\t// ios::binary   \t\t以二进制方式打开文件。\n\t//ofstream fout(filename, ios::binary);\n\t//ofstream fout(filename, ios::out | ios::binary);\n\t//ofstream fout(filename, ios::trunc | ios::binary);\n\t//ofstream fout(filename, ios::app | ios::binary);\n\n\tofstream fout;\n\tfout.open(filename, ios::app | ios::binary);\n\n\t// 判断打开文件是否成功。\n\t// 失败的原因主要有：1）目录不存在；2）磁盘空间已满；3）没有权限，Linux平台下很常见。\n\tif (fout.is_open() == false)\n\t{\n\t\tcout \u003c\u003c \"打开文件\" \u003c\u003c filename \u003c\u003c \"失败。\\n\";  return 0;\n\t}\n\n\t// 向文件中写入数据。\n\tstruct st_girl {               // 超女结构体。\n\t\tchar name[31];         // 姓名。\n\t\tint    no;                    // 编号。   \n\t\tchar memo[301];      // 备注。\n\t\tdouble weight;         // 体重。\n\t}girl;\n\tgirl = { \"西施\",3,\"中国历史第一美女。\" ,45.8 };\n\tfout.write((const char *)\u0026 girl, sizeof(st_girl));   // 写入第一块数据。\n\tgirl = { \"冰冰\",8,\"也是个大美女哦。\",55.2};\n\tfout.write((const char*)\u0026girl, sizeof(st_girl));     // 写入第二块数据。\n\n\tfout.close();\t   // 关闭文件，fout对象失效前会自动调用close()。\n\n\tcout \u003c\u003c \"操作文件完成。\\n\";\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408230332-zt2c2f2",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230408230332-zt2c2f2",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "读取二进制文件"
				}
			]
		},
		{
			"ID": "20230408230332-lkki5by",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-lkki5by",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包含头文件："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#include \u0026lt;fstream\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-ybthduf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-ybthduf",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ifstream"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-rzywu2r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-rzywu2r",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ifstream****打开文件的模式（方式）："
				}
			]
		},
		{
			"ID": "20230408230332-av8seea",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-av8seea",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对于ifstream，如果文件不存在，则打开文件失败。"
				}
			]
		},
		{
			"ID": "20230408230332-vj28scq",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				2
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230408230332-vj28scq",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "ios::in"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "缺省值。"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::binary"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "以二进制方式打开文件。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408230332-0lz2vdy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-0lz2vdy",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20230408230332-t6expk7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-t6expk7",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cfstream\u003e  // ifstream类需要包含的头文件。\nusing  namespace std;\n\nint main()\n{\n\t// 文件名一般用全路径，书写的方法如下：\n\t//  1）\"D:\\data\\bin\\test.dat\"       // 错误。\n\t//  2）R\"(D:\\data\\bin\\test.dat)\"   // 原始字面量，C++11标准。\n\t//  3）\"D:\\\\data\\\\bin\\\\test.dat\"   // 转义字符。\n\t//  4）\"D:/tata/bin/test.dat\"        // 把斜线反着写。\n\t//  5）\"/data/bin/test.dat\"          //  Linux系统采用的方法。\n\tstring filename = R\"(D:\\data\\bin\\test.dat)\";\n\t//char    filename[] = R\"(D:\\data\\bin\\test.dat)\";\n\n\t// 创建文件输入流对象，打开文件，如果文件不存在，则打开文件失败。。\n\t// ios::in     \t\t\t缺省值。\n\t// ios::binary   \t\t以二进制方式打开文件。\n\t//ifstream fin(filename , ios::binary);\n\t//ifstream fin(filename , ios::in | ios::binary);\n\n\tifstream fin;\n\tfin.open(filename, ios::in | ios::binary);\n\n\t// 判断打开文件是否成功。\n\t// 失败的原因主要有：1）目录不存在；2）文件不存在；3）没有权限，Linux平台下很常见。\n\tif (fin.is_open() == false)\n\t{\n\t\tcout \u003c\u003c \"打开文件\" \u003c\u003c filename \u003c\u003c \"失败。\\n\";  return 0;\n\t}\n\n\t// 二进制文件以数据块（数据类型）的形式组织数据。\n\tstruct st_girl {               // 超女结构体。\n\t\tchar name[31];         // 姓名。\n\t\tint    no;                    // 编号。   \n\t\tchar memo[301];      // 备注。\n\t\tdouble weight;         // 体重。\n\t}girl;\n\twhile (fin.read((char*)\u0026girl, sizeof(girl)))\n\t{\n\t\tcout \u003c\u003c \"name=\" \u003c\u003c girl.name \u003c\u003c \"，no=\" \u003c\u003c girl.no \u003c\u003c \n\t\t\t\"，memo=\" \u003c\u003c girl.memo \u003c\u003c \"，weight=\" \u003c\u003c girl.weight \u003c\u003c endl;\n\t}\n\n\tfin.close();\t   // 关闭文件，fin对象失效前会自动调用close()。\n\n\tcout \u003c\u003c \"操作文件完成。\\n\";\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408230332-ccijki4",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230408230332-ccijki4",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "随机存取"
				}
			]
		},
		{
			"ID": "20230408230332-lnegm64",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-lnegm64",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "fstream类"
				}
			]
		},
		{
			"ID": "20230408230332-mi7p94y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-mi7p94y",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "fstream类既可以读文本/二进制文件，也可以写文本/二进制文件。"
				}
			]
		},
		{
			"ID": "20230408230332-rx95ejs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-rx95ejs",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "fstream类的缺省模式是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ios::in | ios::out"
				},
				{
					"Type": "NodeText",
					"Data": "​，如果文件不存在，则创建文件；"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "但是，不会清空文件原有的内容。"
				}
			]
		},
		{
			"ID": "20230408230332-g91lq71",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-g91lq71",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "普遍的做法是："
				}
			]
		},
		{
			"ID": "20230408230332-pmygtkp",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230408230332-pmygtkp",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230408230332-m1pdbua",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230408230332-m1pdbua",
						"updated": "20230408230332"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "1）如果只想写入数据，用"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "ofstream"
						},
						{
							"Type": "NodeText",
							"Data": "​；如果只想读取数据，用"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "ifstream"
						},
						{
							"Type": "NodeText",
							"Data": "​；如果想写和读数据，用fstream，这种情况不多见。不同的类体现不同的语义。\n2）在Linux平台下，文件的写和读有严格的权限控制。（需要的权限越少越好）"
						}
					]
				}
			]
		},
		{
			"ID": "20230408230332-sagbef7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-sagbef7",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、文件的位置指针"
				}
			]
		},
		{
			"ID": "20230408230332-idk9uib",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-idk9uib",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对文件进行读/写操作时，文件的位置指针指向当前文件读/写的位置。"
				}
			]
		},
		{
			"ID": "20230408230332-1795h6y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-1795h6y",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "很多资料用“文件读指针的位置”和“文件写指针的位置”，容易误导人。不管用哪个类操作文件，文件的位置指针只有一个。"
				}
			]
		},
		{
			"ID": "20230408230332-ctmdzqd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-ctmdzqd",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1）获取文件位置指针"
				}
			]
		},
		{
			"ID": "20230408230332-22n0zbf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-22n0zbf",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ofstream"
				},
				{
					"Type": "NodeText",
					"Data": "类的成员函数是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "tellp()"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ifstream"
				},
				{
					"Type": "NodeText",
					"Data": "类的成员函数是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "tellg()"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "fstream类两个都有"
				},
				{
					"Type": "NodeText",
					"Data": "，效果相同。"
				}
			]
		},
		{
			"ID": "20230408230332-fnjzfch",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-fnjzfch",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "std::streampos tellp();\nstd::streampos tellg();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408230332-rtr1vee",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-rtr1vee",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2）移动文件位置指针"
				}
			]
		},
		{
			"ID": "20230408230332-s4giwzm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-s4giwzm",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ofstream类"
				},
				{
					"Type": "NodeText",
					"Data": "的函数是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "seekp()"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ifstream类"
				},
				{
					"Type": "NodeText",
					"Data": "的函数是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "seekg()"
				},
				{
					"Type": "NodeText",
					"Data": "​；"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "fstream类两个都有"
				},
				{
					"Type": "NodeText",
					"Data": "，效果相同。"
				}
			]
		},
		{
			"ID": "20230408230332-kl84f54",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-kl84f54",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方法一："
				}
			]
		},
		{
			"ID": "20230408230332-z1vr5x0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-z1vr5x0",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "std::istream \u0026 seekg(std::streampos _Pos); \nfin.seekg(128);   // 把文件指针移到第128字节。\nfin.seekp(128);   // 把文件指针移到第128字节。\nfin.seekg(ios::beg) // 把文件指针移动文件的开始。\nfin.seekp(ios::end) // 把文件指针移动文件的结尾。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408230332-ycxio4b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-ycxio4b",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方法二：\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "std::istream \u0026amp; seekg(std::streamoff _Off,std::ios::seekdir _Way);"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-6dz31v1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-6dz31v1",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在ios中定义的枚举类型："
				}
			]
		},
		{
			"ID": "20230408230332-ennblx1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-ennblx1",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "enum seek_dir {beg, cur, end};  // beg-文件的起始位置；cur-文件的当前位置；end-文件的结尾位置。\nfin.seekg(30, ios::beg);    // 从文件开始的位置往后移30字节。\nfin.seekg(-5, ios::cur);     // 从当前位置往前移5字节。\nfin.seekg( 8, ios::cur);     // 从当前位置往后移8字节。\nfin.seekg(-10, ios::end);   // 从文件结尾的位置往前移10字节。\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408230332-mwj2fwp",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-mwj2fwp",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "随机存取"
				}
			]
		},
		{
			"ID": "20230408230332-jx5tmu6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-jx5tmu6",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "随机存取是指直接移动文件的位置指针，在指定位置读取/写入数据。"
				}
			]
		},
		{
			"ID": "20230408230332-nuq50dt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-nuq50dt",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例："
				}
			]
		},
		{
			"ID": "20230408230332-whnyrn0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-whnyrn0",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cfstream\u003e  // fstream类需要包含的头文件。\nusing  namespace std;\n\nint main()\n{\n\tstring filename = R\"(D:\\data\\txt\\test.txt)\";\n\n\tfstream fs;\n\tfs.open(filename, ios::in | ios::out);\n\n\tif (fs.is_open() == false)\n\t{\n\t\tcout \u003c\u003c \"打开文件\" \u003c\u003c filename \u003c\u003c \"失败。\\n\";  return 0;\n\t}\n\n\tfs.seekg(26);    // 把文件位置指针移动到第26字节处。\n\n\tfs \u003c\u003c \"我是一只傻傻的小菜鸟。\\n\"; \n\n\t/*string buffer; \n\twhile (fs \u003e\u003e buffer)\n\t{\n\t\tcout \u003c\u003c buffer \u003c\u003c endl;\n\t}*/\n\n\tfs.close();\t   // 关闭文件，fs对象失效前会自动调用close()。\n\n\tcout \u003c\u003c \"操作文件完成。\\n\";\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408230332-18pbcfb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-18pbcfb",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "打开文件的模式（方式）"
				}
			]
		},
		{
			"ID": "20230408230332-dkj83e2",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				2
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230408230332-dkj83e2",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "一、写文件"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2
								}
							]
						},
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "如果文件不存在，各种模式都会创建文件。"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2
								}
							]
						},
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "ios::out"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "1）会截断文件；2）可以用seekp()移动文件指针。"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios:trunc"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1）会截断文件；2）可以用seekp()移动文件指针。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::app"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "1）不会截断文件；2）文件指针始终在文件未尾，不能用seekp()移动文件指针。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::ate"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "打开文件时文件指针指向文件末尾，但是，可以在文件中的任何地方写数据。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::in"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "打开文件进行读操作，即读取文件中的数据。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ios::binary"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "打开文件为二进制文件，否则为文本文件。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230408230332-erwed8m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-erwed8m",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注：ate是at end的缩写，trunc是truncate（截断）的缩写，app是append（追加）的缩写。"
				}
			]
		},
		{
			"ID": "20230408230332-s31zdzr",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230408230332-s31zdzr",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缓冲区及流状态"
				}
			]
		},
		{
			"ID": "20230408230332-yv6n5jc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-yv6n5jc",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、文件缓冲区"
				}
			]
		},
		{
			"ID": "20230408230332-wtys9wp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-wtys9wp",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "文件缓冲区（缓存）是系统预留的内存空间，用于存放输入或输出的数据。"
				}
			]
		},
		{
			"ID": "20230408230332-w4c0zix",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-w4c0zix",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "根据输出和输入流，分为输出缓冲区和输入缓冲区。"
				}
			]
		},
		{
			"ID": "20230408230332-wk7h6bg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-wk7h6bg",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，在C++中，每打开一个文件，系统就会为它分配缓冲区。不同的流，缓冲区是独立的。"
				}
			]
		},
		{
			"ID": "20230408230332-qrlt3n4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-qrlt3n4",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "程序员不用关心输入缓冲区，只关心输出缓冲区就行了。\n在缺省模式下，输出缓冲区中的数据满了才把数据写入磁盘，但是，这种模式不一定能满足业务的需求。"
				}
			]
		},
		{
			"ID": "20230408230332-vybmv7j",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-vybmv7j",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "输出缓冲区的操作："
				}
			]
		},
		{
			"ID": "20230408230332-qjie7dn",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230408230332-qjie7dn",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1）"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "flush()"
				},
				{
					"Type": "NodeText",
					"Data": "​成员函数"
				}
			]
		},
		{
			"ID": "20230408230332-mn5bpxu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-mn5bpxu",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "刷新缓冲区，把缓冲区中的内容写入磁盘文件。"
				}
			]
		},
		{
			"ID": "20230408230332-nrgsaks",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230408230332-nrgsaks",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2）"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "endl"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-8bivah6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-8bivah6",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "换行，然后刷新缓冲区。"
				}
			]
		},
		{
			"ID": "20230408230332-0km0lwb",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230408230332-0km0lwb",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3）"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "unitbuf"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-srvetyt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-srvetyt",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "fout \u0026lt;\u0026lt; unitbuf;"
				},
				{
					"Type": "NodeText",
					"Data": "​\n设置fout输出流，在每次操作之后自动刷新缓冲区。"
				}
			]
		},
		{
			"ID": "20230408230332-bcats7p",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230408230332-bcats7p",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4）"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "nounitbuf"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230408230332-xnqy5t8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-xnqy5t8",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "fout \u0026lt;\u0026lt; nounitbuf;"
				},
				{
					"Type": "NodeText",
					"Data": "​\n设置fout输出流，让fout回到缺省的缓冲方式。"
				}
			]
		},
		{
			"ID": "20230408230332-4bx7d97",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230408230332-4bx7d97",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、流状态"
				}
			]
		},
		{
			"ID": "20230408230332-d5bbapt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-d5bbapt",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "流状态有三个："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "eofbit"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "、"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "badbit"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "failbit"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "，取值："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong mark",
					"TextMarkTextContent": "1"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "---设置；或"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong mark",
					"TextMarkTextContent": "0"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "---清除。"
				}
			]
		},
		{
			"ID": "20230408230332-41i0acx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-41i0acx",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "当三个流状成都为0时，表示一切顺利，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "good()"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "成员函数返回true。"
				}
			]
		},
		{
			"ID": "20230408230332-54x1h26",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-54x1h26",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1）eofbit"
				}
			]
		},
		{
			"ID": "20230408230332-4iy74a4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-4iy74a4",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当输入流操作到达文件未尾时，将设置eofbit。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "eof()"
				},
				{
					"Type": "NodeText",
					"Data": "​成员函数检查流是否设置了eofbit。"
				}
			]
		},
		{
			"ID": "20230408230332-yhy69zk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-yhy69zk",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2）badbit"
				}
			]
		},
		{
			"ID": "20230408230332-x633ma4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-x633ma4",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "无法诊断的失败破坏流时，将设置badbit。（例如：对输入流进行写入；磁盘没有剩余空间）。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "bad()"
				},
				{
					"Type": "NodeText",
					"Data": "​成员函数检查流是否设置了badbit。"
				}
			]
		},
		{
			"ID": "20230408230332-w74qto1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-w74qto1",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3）failbit"
				}
			]
		},
		{
			"ID": "20230408230332-n7oxs68",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230408230332-n7oxs68",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当输入流操作未能读取预期的字符时，将设置failbit（非致命错误，可挽回，一般是软件错误，例如：想读取一个整数，但内容是一个字符串；文件到了未尾）I/O失败也可能设置failbit。\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "fail()"
				},
				{
					"Type": "NodeText",
					"Data": "​成员函数检查流是否设置了failbit。"
				}
			]
		},
		{
			"ID": "20230408230332-jtcl4ca",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-jtcl4ca",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4）clear()成员函数清理流状态。"
				}
			]
		},
		{
			"ID": "20230408230332-b35l629",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-b35l629",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5）setstate()成员函数重置流状态。"
				}
			]
		},
		{
			"ID": "20230408230332-rfvhxe7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-rfvhxe7",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例一"
				}
			]
		},
		{
			"ID": "20230408230332-dm6y21r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-dm6y21r",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cfstream\u003e          // ofstream类需要包含的头文件。\n#include \u003cunistd.h\u003e\nusing  namespace std;\n\nint main()\n{\n  ofstream fout(\"/oracle/tmp/bbb.txt\");   // 打开文件。\n  fout \u003c\u003c unitbuf; //设置fout输出流，在每次操作之后自动刷新缓冲区。\n\n  for (int ii = 0; ii \u003c 1000; ii++)  // 循环1000次。\n  {\n    fout \u003c\u003c \"ii=\" \u003c\u003c ii \u003c\u003c \"，我是一只傻傻傻傻傻傻傻傻傻傻傻傻傻傻的鸟。\\n\";\n    //fout.flush();      // 刷新缓冲区。\n    usleep(100000);    // 睡眠十分之一秒。\n  }\n\n  fout.close();  // 关闭文件。\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230408230332-9ss0bvu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230408230332-9ss0bvu",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "示例二"
				}
			]
		},
		{
			"ID": "20230408230332-hwjfqov",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230408230332-hwjfqov",
				"updated": "20230408230332"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cfstream\u003e  // ifstream类需要包含的头文件。\n#include \u003cstring\u003e     // getline()函数需要包含的头文件。\nusing  namespace std;\n\nint main()\n{\n\tifstream fin(R\"(D:\\data\\txt\\test.txt)\", ios::in);\n\n\tif (fin.is_open() == false) {\n\t\tcout \u003c\u003c \"打开文件\" \u003c\u003c R\"(D:\\data\\txt\\test.txt)\" \u003c\u003c \"失败。\\n\";\n\t\treturn 0;\n\t}\n\n\tstring buffer;\n\t/*while (fin \u003e\u003e buffer) {\n\t\tcout \u003c\u003c buffer \u003c\u003c endl;\n\t}*/\n\twhile (true) {\n\t\tfin \u003e\u003e buffer;\n\t\tcout \u003c\u003c \"eof()=\" \u003c\u003c fin.eof() \u003c\u003c \",good() = \" \u003c\u003c fin.good() \u003c\u003c \", bad() = \" \u003c\u003c fin.bad() \u003c\u003c \", fail() = \" \u003c\u003c fin.fail() \u003c\u003c endl;\n\t\tif (fin.eof() == true) break;\n\n\t\tcout \u003c\u003c buffer \u003c\u003c endl;\n\t}\n\n\tfin.close();\t   // 关闭文件，fin对象失效前会自动调用close()。\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}