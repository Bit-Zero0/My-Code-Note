{
	"ID": "20220722131105-1df9trz",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220722131105-1df9trz",
		"title": "string",
		"updated": "20221013223953"
	},
	"Children": [
		{
			"ID": "20220722131114-47pdn0q",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20220722131114-47pdn0q",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string模板"
				}
			]
		},
		{
			"ID": "20220722131114-1l4rjas",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-1l4rjas",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string模板常被叫做字符串类型，但在c++中，它属于一种模板。"
				}
			]
		},
		{
			"ID": "20220722131114-ws4gfov",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-ws4gfov",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用string时需要导入头文件  "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "\u003cstring\u003e"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 。"
				}
			]
		},
		{
			"ID": "20220722131114-1femqck",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722131114-1femqck",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string的创建"
				}
			]
		},
		{
			"ID": "20220722131114-5l3395z",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-5l3395z",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-n6tc13d",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131114-n6tc13d",
						"updated": "20220722131114"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "string 的自动扩容：第一次是两倍，之后一般都稳定在1.5倍的自动扩容。"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-z9dkmd9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-z9dkmd9",
				"updated": "20220722131128"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220422220209.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-e3d6kvc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-e3d6kvc",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这是string类型有三种最常见的创建的方式"
				}
			]
		},
		{
			"ID": "20220722131114-eq7q5kk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-eq7q5kk",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstring\u003e\nint main()\n{\n\tstring s; //string)\n\tstring s2 = \"hello Linux\"; \n\n\n\tstring s1(\"hello world\");//string(const char* s)\n\n\n\tstring s3(s1);//调用了拷贝构造 string(const string\u0026 s)\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131141-57bar7y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131141-57bar7y"
			}
		},
		{
			"ID": "20220722131114-s63pg7r",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722131114-s63pg7r",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string常用方法"
				}
			]
		},
		{
			"ID": "20220722131114-u5igatq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722131114-u5igatq",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string类对象的容量操作"
				}
			]
		},
		{
			"ID": "20220722131114-4n03u1o",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-4n03u1o",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-3mfbwqk",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131114-3mfbwqk",
						"updated": "20220722131114"
					},
					"Children": [
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "operator[]"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "  Get character of string"
						}
					]
				},
				{
					"ID": "20220722131114-1xtabz4",
					"Type": "NodeBlockquote",
					"Properties": {
						"id": "20220722131114-1xtabz4",
						"updated": "20220722131114"
					},
					"Children": [
						{
							"Type": "NodeBlockquoteMarker",
							"Data": "\u003e"
						},
						{
							"ID": "20220722131114-x7lmfkk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220722131114-x7lmfkk",
								"updated": "20220722131114"
							},
							"Children": [
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "at"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "  Get character of string\n"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "size"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "    Return length of string"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "capacity"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "  Return size of allocated  storage\n"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "clear"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "  Clear string\n"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "reserve"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " The member function ensures that "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "capacity()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " henceforth returns at least "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "n"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-qjr693v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-qjr693v",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总结；"
				}
			]
		},
		{
			"ID": "20220722131114-8r30bix",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-8r30bix",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-krq4223",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20220722131114-krq4223",
						"updated": "20220722131114"
					},
					"Children": [
						{
							"ID": "20220722131114-yvd2iy5",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20220722131114-yvd2iy5",
								"updated": "20220722131114"
							},
							"Children": [
								{
									"ID": "20220722131114-42i25ur",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722131114-42i25ur",
										"updated": "20220722131114"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "size()与length()方法底层实现原理完全相同，引入size()的原因是为了与其他容器的接口保持一致，一般情况下基本都是用size()。"
										}
									]
								}
							]
						},
						{
							"ID": "20220722131114-pejolrp",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20220722131114-pejolrp",
								"updated": "20220722131114"
							},
							"Children": [
								{
									"ID": "20220722131114-lq9ycj3",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722131114-lq9ycj3",
										"updated": "20220722131114"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "clear()只是将string中有效字符清空，不改变底层空间大小。"
										}
									]
								}
							]
						},
						{
							"ID": "20220722131114-oktry3x",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20220722131114-oktry3x",
								"updated": "20220722131114"
							},
							"Children": [
								{
									"ID": "20220722131114-am42rwj",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722131114-am42rwj",
										"updated": "20220722131114"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "resize(size_t n) 与 resize(size_t n, char c)都是将字符串中有效字符个数改变到n个，不同的是当字符个数增多时：resize(n)用0来填充多出的元素空间，resize(size_t n, char c)用字符c来填充多出的元素空间。注意：resize在改变元素个数时，如果是将元素个数增多，可能会改变底层容量的大小，如果是将元素个数减少，底层空间总大小不变。"
										}
									]
								}
							]
						},
						{
							"ID": "20220722131114-56vg4bo",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20220722131114-56vg4bo",
								"updated": "20220722131114"
							},
							"Children": [
								{
									"ID": "20220722131114-gw1l6ou",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20220722131114-gw1l6ou",
										"updated": "20220722131114"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "reserve(size_t res_arg=0)：为string预留空间，不改变有效元素个数，当reserve的参数小于string的底层空间总大小时，reserver不会改变容量大小。"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-4lckwas",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-4lckwas",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "resize"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " , "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "size"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ,"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "capacity"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的使用"
				}
			]
		},
		{
			"ID": "20220722131114-7g8j4n7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-7g8j4n7",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Teststring1()\n{\n\t// 注意：string类对象支持直接用cin和cout进行输入和输出\n\tstring s(\"hello, bit!!!\");\n\tcout \u003c\u003c s.length() \u003c\u003c endl; \n\tcout \u003c\u003c s.capacity() \u003c\u003c endl;\n\tcout \u003c\u003c s \u003c\u003c endl;\n\n\t// 将s中的字符串清空，注意清空时只是将size清0，不改变底层空间的大小\n\ts.clear();\n\tcout \u003c\u003c s.size() \u003c\u003c endl;\n\tcout \u003c\u003c s.capacity() \u003c\u003c endl;\n\n\t// 将s中有效字符个数增加到10个，多出位置用'a'进行填充\n\t// “aaaaaaaaaa”\n\ts.resize(10, 'a');\n\tcout \u003c\u003c s.size() \u003c\u003c endl;\n\tcout \u003c\u003c s.capacity() \u003c\u003c endl;\n\n\t// 将s中有效字符个数增加到15个，多出位置用缺省值'\\0'进行填充\n\t// \"aaaaaaaaaa\\0\\0\\0\\0\\0\"\n\t// 注意此时s中有效字符个数已经增加到15个\n\ts.resize(15);\n\tcout \u003c\u003c s.size() \u003c\u003c endl;\n\tcout \u003c\u003c s.capacity() \u003c\u003c endl;\n\tcout \u003c\u003c s \u003c\u003c endl;\n\t// 将s中有效字符个数缩小到5个\n\ts.resize(5);\n\tcout \u003c\u003c s.size() \u003c\u003c endl;\n\tcout \u003c\u003c s.capacity() \u003c\u003c endl;\n\tcout \u003c\u003c s \u003c\u003c endl;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-o29kg0n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-o29kg0n",
				"updated": "20220722131202"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220424230859.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131206-kc5kjuj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131206-kc5kjuj"
			}
		},
		{
			"ID": "20220722131114-1ah7wum",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-1ah7wum",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "reserve"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的使用"
				}
			]
		},
		{
			"ID": "20220722131114-brap4ru",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-brap4ru",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Teststring2()\n{\n\tstring s;\n\n\t// 测试reserve是否会改变string中有效元素个数\n\ts.reserve(100);\n\tcout \u003c\u003c s.size() \u003c\u003c endl;\n\tcout \u003c\u003c s.capacity() \u003c\u003c endl;\n\n\t// 测试reserve参数小于string的底层空间大小时，是否会将空间缩小\n\ts.reserve(50);\n\tcout \u003c\u003c s.size() \u003c\u003c endl;\n\tcout \u003c\u003c s.capacity() \u003c\u003c endl;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-xachkok",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-xachkok",
				"updated": "20220722131216"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220424231658.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n仅此得出结论，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "reserve"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 只会改变 容量(capacity) ,如果reserve小于string的容量空间，它也不会将空降缩小。"
				}
			]
		},
		{
			"ID": "20220722131220-31bspa2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131220-31bspa2"
			}
		},
		{
			"ID": "20220722131114-siih4px",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722131114-siih4px",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string的增容："
				}
			]
		},
		{
			"ID": "20220722131114-xjdlxsx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-xjdlxsx",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void TestPushBack()\n{\n\tstring s;\n\tsize_t sz = s.capacity();\n\tcout \u003c\u003c \"making s grow:\\n\";\n\tfor (int i = 0; i \u003c 100; ++i)\n\t{\n\t\ts.push_back('c');\n\t\tif (sz != s.capacity())\n\t\t{\n\t\t\tsz = s.capacity();\n\t\t\tcout \u003c\u003c \"capacity changed: \" \u003c\u003c sz \u003c\u003c '\\n';\n\t\t}\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-fnyd1ps",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-fnyd1ps",
				"updated": "20220722131235"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220425071241.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-ov3xllj",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-ov3xllj",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-hw4qiah",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131114-hw4qiah",
						"updated": "20220722131114"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "结论：string的初识容量是 16byte ，因为 '\\0' 要占用一个byte，所以是15byte，第一次增容是2倍 ， 但之后的增容速率就稳定在 1.5 倍了。"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131239-1ls02yp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131239-1ls02yp"
			}
		},
		{
			"ID": "20220722131114-6poxqkq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722131114-6poxqkq",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string类对象的访问及遍历操作"
				}
			]
		},
		{
			"ID": "20220722131114-b6xzdl4",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-b6xzdl4",
				"updated": "20220722131335"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-p3kzp7x",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131114-p3kzp7x",
						"updated": "20220722131335"
					},
					"Children": [
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "operator[]"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "    返回pos位置的字符，const string类对象调用"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-lt5v5um",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-lt5v5um",
				"updated": "20220722131523"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131251-8gvel7x",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131251-8gvel7x",
						"updated": "20220722131523"
					},
					"Children": [
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "begin"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "+ "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "end"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "     "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "begin"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "获取第一个字符的迭代器 + "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "end"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "获取最后一个字符下一个位置的迭代器"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-vz9qix2",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-vz9qix2",
				"updated": "20220722131526"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-t0wtfhq",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131114-t0wtfhq",
						"updated": "20220722131526"
					},
					"Children": [
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "rbegin"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " + "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "rend"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "   "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "rend"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "获取第一个字符的迭代器 + "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "rbegin"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "获取最后一个字符下一个位置的迭代器"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-w0iq993",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-w0iq993",
				"updated": "20220722131314"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-xwsddmu",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131114-xwsddmu",
						"updated": "20220722131314"
					},
					"Children": [
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeText",
									"Data": "范围fo"
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeText",
									"Data": "r"
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " "
						},
						{
							"Type": "NodeText",
							"Data": "   C++11支持更简洁的范围for的新遍历方式"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-njjl5v5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-njjl5v5",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void test_string1()\n{\n\tstring s1(\"hello world\");\n\n\t// 遍历+修改\n\t// 方式1：下标+[]\n\tfor (size_t i = 0; i \u003c s1.size(); ++i)\n\t{\n\t\ts1[i] += 1;\n\t}\n\n\tfor (size_t i = 0; i \u003c s1.size(); ++i)\n\t{\n\t\tcout \u003c\u003c s1[i] \u003c\u003c \" \";\n\t}\n\tcout \u003c\u003c endl;\n\n\t// 方式2：迭代器\n\tstring::iterator it = s1.begin();\n\twhile (it != s1.end())\n\t{\n\t\t*it -= 1;\n\t\t++it;\n\t}\n\tcout \u003c\u003c endl;\n\n\tit = s1.begin();\n\twhile (it != s1.end())\n\t{\n\t\tcout \u003c\u003c *it \u003c\u003c \" \";\n\t\t++it;\n\t}\n\tcout \u003c\u003c endl;\n\n\t// 方式3：范围for,自动往后迭代，自动判断结束\n\t// C++11\n\t//for (char\u0026 e : s1)\n\tfor (auto\u0026 e : s1)\n\t{\n\t\te -= 1;\n\t}\n\n\tfor (auto e : s1)\n\t{\n\t\tcout \u003c\u003c e \u003c\u003c \" \";\n\t}\n\tcout \u003c\u003c endl;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-5f7l7fb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-5f7l7fb",
				"updated": "20220722131547"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220425074449.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-q73ecn8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-q73ecn8",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用迭代器迭代的意义：对于string，无论是正着遍历，还是反着遍历，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "[]"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 和下标就已经足够使用了，但是对于其他容器(数据结构) 就就无法使用，如："
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "list"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ", "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "map/set"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "等容器不支持"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "[]"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "和下标，用的就是迭代器遍历"
				}
			]
		},
		{
			"ID": "20220722131114-7x4zczf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-7x4zczf",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "operator[]"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "at"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的区别：检查越界的方式是不一样的，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "operator[]"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 是断言；"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "at"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "是抛异常。"
				}
			]
		},
		{
			"ID": "20220722131114-83em1ar",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-83em1ar",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()\n{\n\tchar\u0026 operator[] (size_t pos)\n\t{\n\t\treturn str[pos]; //这里的引用不是为了减少拷贝，而是为了支持修改返回对象\n\t}\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131637-6r7cel3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131637-6r7cel3"
			}
		},
		{
			"ID": "20220722131114-b4lsua0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722131114-b4lsua0",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string类对象的修改操作"
				}
			]
		},
		{
			"ID": "20220722131114-c06haw7",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-c06haw7",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-opb6u32",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131114-opb6u32",
						"updated": "20220722131114"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "push_back  在字符串后面尾插字符。\nappend        在字符串后追加一个字符串。\noperator+=  在字符串后追加字符串str。\ns_str              返回C格式的字符串。\nfind+npos     从字符串pos位置开始"
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeText",
									"Data": "往后"
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "找字符c，返回该字符在字符串中的地址。\nrfind              从字符串pos位置开始"
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeText",
									"Data": "往前"
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "找字符c，返回该字符在字符串中的地址。\nsubstr           在str中从pos位置开始，截取n个字符，然后返回。\ninsert            在指定位置插入\nearse             删除指定位置的数据"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-7yb9khu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-7yb9khu",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void Teststring()\n{\n\tstring str;\n\tstr.push_back(' '); // 在str后插入空格\n\tstr.append(\"hello\"); // 在str后追加一个字符\"hello\"\n\tstr += 'b'; // 在str后追加一个字符'b' \n\tstr += \"it\"; // 在str后追加一个字符串\"it\"\n\tcout \u003c\u003c str \u003c\u003c endl;\n\tcout \u003c\u003c str.c_str() \u003c\u003c endl; // 以C语言的方式打印字符串\n\tcout \u003c\u003c endl;\n\n\t// 获取file的后缀\n\tstring file1(\"string.cpp\");\n\tsize_t pos = file1.rfind('.');\n\tstring suffix(file1.substr(pos, file1.size() - pos));\n\tcout \u003c\u003c suffix \u003c\u003c endl;\n\tcout \u003c\u003c endl;\n\n\t// npos是string里面的一个静态成员变量\n\t// static const size_t npos = -1;\n\n\t// 取出url中的域名\n\tstring url(\"http://www.cplusplus.com/reference/string/string/find/\");\n\tcout \u003c\u003c url \u003c\u003c endl;\n\tsize_t start = url.find(\"://\");\n\tif (start == string::npos)\n\t{\n\t\tcout \u003c\u003c \"invalid url\" \u003c\u003c endl;\n\t\treturn;\n\t}\n\tstart += 3;\n\tsize_t finish = url.find('/', start);\n\tstring address = url.substr(start, finish - start);\n\tcout \u003c\u003c address \u003c\u003c endl;\n\tcout \u003c\u003c endl;\n\n\t// 删除url的协议前缀\n\tpos = url.find(\"://\");\n\turl.erase(0, pos + 3);\n\tcout \u003c\u003c url \u003c\u003c endl;\n}\n\nint main()\n{\n\tTeststring();\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-z067yhv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-z067yhv",
				"updated": "20220722131614"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220425081040.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131633-aqpqawx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131633-aqpqawx"
			}
		},
		{
			"ID": "20220722131114-11m1h0m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-11m1h0m",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "insert"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 方法的使用，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "insert"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "尽量少使用头插，因为是时间是"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "O(n)"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-f2yf2zm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-f2yf2zm",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()\n{\n\tstring s(\"hello world\");\n\ts += ' ';\n\ts += \"!!!!\";\n\n\t// 头插  效率，O(N),尽量少用\n\ts.insert(0, 1, 'x');\n\tcout \u003c\u003c s \u003c\u003c endl;\n\tcout \u003c\u003c endl;\n\n\ts.insert(s.begin(), 'y');\n\ts.insert(0, \"test\");\n\tcout \u003c\u003c s \u003c\u003c endl;\n\tcout \u003c\u003c endl;\n\t// 中间位置插入\n\ts.insert(4, \"\u0026\u0026\u0026\u0026\u0026\");\n\tcout \u003c\u003c s \u003c\u003c endl;\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-uxg40yu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-uxg40yu",
				"updated": "20220722131649"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220425082200.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-5uiazzg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-5uiazzg",
				"updated": "20220722132251"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "earse"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的使用 , "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "earse"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 尽量少使用头部和中间删除，效率低，\n如果需要删除最尾部的字符，可以使用"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "pop_back"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ,但需要 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "c++11"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 版本"
				}
			]
		},
		{
			"ID": "20220722131114-xqui2v0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-xqui2v0",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Yw=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()\n{\n\tstring s(\"hello world\");\n\t// 尽量少用头部和中间删除，因为要挪动数据，效率低\n\ts.erase(0, 1);\n\ts.erase(s.size() - 1, 1);\n\tcout \u003c\u003c s \u003c\u003c endl;\n\n\ts.erase(3);\n\tcout \u003c\u003c s \u003c\u003c endl;\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-cq4tkbi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-cq4tkbi",
				"updated": "20220722131708"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220425120403.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131823-xx2bcpg",
			"Type": "NodeBlockQueryEmbed",
			"Properties": {
				"id": "20220722131823-xx2bcpg",
				"updated": "20220722131823"
			},
			"Children": [
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeOpenBrace"
				},
				{
					"Type": "NodeBlockQueryEmbedScript",
					"Data": "select * from blocks where id='20220722102331-uhujgcl'"
				},
				{
					"Type": "NodeCloseBrace"
				},
				{
					"Type": "NodeCloseBrace"
				}
			]
		},
		{
			"ID": "20220722131835-n883az7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131835-n883az7"
			}
		},
		{
			"ID": "20220722131114-eiqwaha",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220722131114-eiqwaha",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string的模拟实现"
				}
			]
		},
		{
			"ID": "20220722131114-8u56cho",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-8u56cho",
				"updated": "20220722131949"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为string是标椎库里的类，所以需要使用"
				},
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20220722101445-7o6q26x"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "命名空间"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " , 不然容易与库函数中的 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "string"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 有冲突。"
				}
			]
		},
		{
			"ID": "20220722131114-fthd488",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-fthd488",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string的成员属性有三个"
				}
			]
		},
		{
			"ID": "20220722131114-vryyu2v",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-vryyu2v",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-7kzvgyo",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131114-7kzvgyo",
						"updated": "20220722131114"
					},
					"Children": [
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeText",
											"Data": "size"
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 当前字符串的长度。类型为："
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "size_t"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "\n"
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "capacity"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 当前字符串的容量 。类型为："
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "size_t"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "\n"
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "str"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 当前字符串。 类型为："
						},
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "char"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "*"
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-eac80jp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-eac80jp",
				"updated": "20220722132208"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "主要实现："
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "insert"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " , "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "erase"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " ,"
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "operator+="
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " , "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "find"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " , "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "resize"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " , "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": " reserve"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " , "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "push_back"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " ,"
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "append"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "， "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "find"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ,等函数"
				}
			]
		},
		{
			"ID": "20220722131114-0h69luc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-0h69luc",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#pragma once\n#include \u003cstring\u003e\n#include \u003cassert.h\u003e\n#include \u003ciostream\u003e\n\nusing namespace std;\nnamespace fmy {\n\n\tclass string {\n\n\tprivate:\n\t\tsize_t _size;\n\t\tsize_t _capacity;\n\t\tchar* _str;\n\n\t\tstatic const size_t npos = -1;\n\n\tpublic:\n\n\t\ttypedef char* iterator;\n\t\ttypedef const char* const_iterator;\n\n\t\titerator begin()\n\t\t{\n\t\t\treturn _str;\n\t\t}\n\t\n\t\titerator end()\n\t\t{\n\t\t\treturn _str + _size;\n\t\t}\n\n\t\tconst_iterator begin() const\n\t\t{\n\t\t\treturn _str;\n\t\t}\n\n\t\tconst_iterator end() const\n\t\t{\n\t\t\treturn _str + _size;\n\t\t}\n\n\t\tstring(const char* str = \"\") //当我们进行深拷贝时，如果没有目标 字符 ，则创建空字符串\n\t\t\t:_size(strlen(str)) //没有字符，则为 0 。\n\t\t\t,_capacity(_size) //_size为0 ，则 _capacity 也为0\n\t\t{\n\t\t\t_str = new char[_capacity + 1]; //开辟空间，+1是因为要给 '\\0' 留一个位\n\t\t\tstrcpy(_str, str); \n\t\t}\n\n\t\t////拷贝构造  s1(s)   \n\t\t//string(const string\u0026 s)\n\t\t//\t:_size(s._size)\n\t\t//\t,_capacity(s._capacity)\n\t\t//{\n\t\t//\t_str = new char[_capacity + 1];\n\t\t//\tstrcpy(_str, s._str);\n\t\t//}\n\n\n\t\tvoid swap(string\u0026 s)\n\t\t{\n\t\t\tstd::swap(_size, s._size);\n\t\t\tstd::swap(_capacity, s._capacity);\n\t\t\tstd::swap(_str, s._str);\n\t\t}\n\n\t\t//拷贝构造的现代写法\n\t\tstring(string\u0026 s)\n\t\t\t:_size(0)\n\t\t\t,_capacity(0)\n\t\t\t,_str(nullptr)\n\t\t{\n\t\t\tstring tmp(s._str);\n\t\t\tswap(tmp);\n\t\t}\n\n\t\t~string()\n\t\t{\n\t\t\tdelete[] _str;\n\t\t\t_str = nullptr;\n\t\t\t_size = _capacity = 0;\n\t\t}\n\n\t\t////此方法有缺陷，不能自己给自己赋值 如：  s3 = s3 , 因为他会把自己先给释放了，所以之后赋值的内容就是乱码了\n\t\t//string\u0026 operator=(const string\u0026 s)\n\t\t//{\n\t\t//\tdelete[] _str;\n\t\t//\t_str = new char[strlen(s._str) + 1]; // new是有可能会开辟空间失败的，那时抛异常后就会返回，但是我们之前却把 _str 给释放了\n\t\t//\tstrcpy(_str, s._str);\n\n\t\t//\treturn *this;\n\t\t//}\n\n\t\t//string\u0026 operator=(const string\u0026 s)\n\t\t//{\n\t\t//\tif (this != \u0026s) //注意 this 和 \u0026s 是取到的地址\n\t\t//\t{\n\t\t//\t\tchar* tmp = new char[strlen(s._str) + 1]; //因为new有可能开辟失败，所以使用tmp来暂存\n\t\t//\t\tstrcpy(tmp, s._str);\n\t\t//\t\tdelete[] _str; //当new开辟失败时，也不会影响到 _str了\n\t\t//\t\t_str = tmp;\n\t\t//\t\t_size = s._size;\n\t\t//\t\t_capacity = s._capacity;\n\t\t//\t}\n\t\t//\treturn *this;\n\t\t//}\n\n\t\tstring\u0026 operator=(string s)\n\t\t{\n\t\t\tswap(s);\n\t\t\treturn *this;\n\t\t}\n\n\n\n\t\tconst char* c_str() const  //将string转化为C语言中字符串\n\t\t{\n\t\t\treturn _str;\n\t\t}\n\n\t\tsize_t size() const\n\t\t{\n\t\t\treturn _size;\n\t\t}\n\n\t\tconst char\u0026 operator[](size_t pos) const //const 修饰放回值，可以避免返回值被修改，但是同样的，也需要const修饰对象才能调用。\n\t\t{\n\t\t\tassert(pos \u003c _size); //使用assert防止数组越界，如果越界，assert就会直接终止程序，并报错 \n\t\t\treturn _str[pos];\n\t\t}\n\n\t\tchar\u0026 operator[](size_t pos)\n\t\t{\n\t\t\tassert(pos \u003c _size);\n\t\t\treturn _str[pos];\n\t\t}\n\n\t\tvoid push_back(char ch)\n\t\t{\n\t\t\tif (_size == _capacity)\n\t\t\t{\n\t\t\t\treserve(_capacity == 0 ? 4 : _capacity * 2);\n\t\t\t}\n\t\t\t_str[_size] = ch;\n\t\t\t++_size;\n\t\t\t_str[_size] = '\\0';\n\n\t\t\t//insert(_size , ch);\n\t\t}\n\n\t\tvoid reserve(size_t n)\n\t\t{\n\t\t\tif (n \u003e _capacity)\n\t\t\t{\n\t\t\t\tchar* tmp = new char[n + 1];\n\t\t\t\tstrcpy(tmp, _str);\n\t\t\t\tdelete[] _str;\n\n\t\t\t\t_str = tmp;\n\n\t\t\t\t_capacity = n;\n\t\t\t}\n\t\t}\n\n\t\tvoid resize(size_t n, char ch = '\\0')\n\t\t{\n\t\t\tif (n \u003c= _size)\n\t\t\t{\n\t\t\t\t_size = n;\n\t\t\t\t_str[_size];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (n \u003e _capacity)\n\t\t\t\t{\n\t\t\t\t\treserve(n);\n\t\t\t\t}\n\t\t\t\tmemset(_str + _size, ch, n - _size);\n\t\t\t\t_size = n;\n\t\t\t\t_str[_size] = '\\0';\n\t\t\t}\n\t\t}\n\n\t\tstring\u0026 insert(size_t pos, char ch)\n\t\t{\n\t\t\tassert(pos \u003c= _size); //因为要有可能尾插，所以是 \u003c= _size、\n\n\t\t\tif (_size == _capacity)\n\t\t\t{\n\t\t\t\treserve(_capacity == 0 ? 4 : _capacity * 2);\n\t\t\t}\n\n\t\t\tsize_t end = _size + 1;\n\t\t\twhile (end \u003e pos)\n\t\t\t{\n\t\t\t\t_str[end] = _str[end - 1];\n\t\t\t\tend--;\n\t\t\t}\n\n\t\t\t_str[pos] = ch;\n\t\t\t_size++;\n\t\t\n\t\t\treturn *this;\n\t\t}\n\n\t\tstring\u0026 insert(size_t pos, const char* s)\n\t\t{\n\t\t\tassert(pos \u003c= _size);\n\t\t\tsize_t len = strlen(s);\n\t\t\tif (_size + len \u003e _capacity)\n\t\t\t{\n\t\t\t\treserve(_size + len);\n\t\t\t}\n\n\t\t\tsize_t end = _size + len;\n\t\t\twhile (end \u003e= pos+len) \n\t\t\t{\n\t\t\t\t_str[end] = _str[end - len];\n\t\t\t\t--end;\n\t\t\t}\n\t\t\n\t\t\tstrncpy(_str + pos, s, len);\n\t\t\t_size += len;\n\t\t\treturn *this;\n\t\t}\n\n\t\tvoid append(const char* str)\n\t\t{\n\t\t\t/*size_t len = strlen(str);\n\t\t\tif (_size + len \u003e _capacity)\n\t\t\t{\n\t\t\t\treserve(_size + len);\n\t\t\t}\n\t\t\tstrcpy(_str + _size, str);\n\t\t\t_size += len;*/\n\n\t\t\tinsert(_size, str);\n\t\t}\n\n\t\tstring\u0026 operator+=(const char* str)\n\t\t{\n\t\t\tappend(str);\n\t\t\treturn *this;\n\t\t}\n\n\t\tstring\u0026 operator+=(char ch)\n\t\t{\n\t\t\tpush_back(ch);\n\t\t\treturn *this;\n\t\t}\n\n\t\tsize_t find(char ch)\n\t\t{\n\t\t\tfor (size_t i = 0; i \u003c _size; ++i)\n\t\t\t{\n\t\t\t\tif (ch == _str[i])\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn npos;\n\t\t}\n\n\n\t\tsize_t find(char* s, size_t pos = 0)\n\t\t{\n\t\t\tconst char* ptr = strstr(_str + pos , s);\n\t\t\tif (ptr == nullptr)\n\t\t\t{\n\t\t\t\treturn npos;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn ptr - _str; //指针减指针可以得到两个之间相隔的距离。\n\t\t\t}\n\t\t}\n\n\t\tstring\u0026 erase(size_t pos = 0, size_t len = npos)\n\t\t{\n\t\t\tassert(pos \u003c _size);\n\n\t\t\tif (len == npos || len + pos \u003e= _size)\n\t\t\t{\n\t\t\t\t_str[pos] = '\\0';\n\t\t\t\t_size = pos;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstrcpy(_str + pos, _str + pos + len);\n\t\t\t\t_size -= len;\n\t\t\t}\n\t\t\treturn *this;\n\t\t}\n\t\n\t\tvoid clear()\n\t\t{\n\t\t\t_str[0] = '\\0';\n\t\t\t_size = 0;\n\t\t}\n\t};\n\t//const size_t string::npos = -1;\n\n\tbool operator\u003c(const string\u0026 s1, const string\u0026 s2)\n\t{\n\t\tsize_t l1 = 0, l2 = 0;\n\t\twhile (l1 \u003c s1.size() \u0026\u0026 l2 \u003c s2.size())\n\t\t{\n\t\t\tif (s1[l1] \u003c s2[l2])\n\t\t\t\treturn true;\n\t\t\telse if (s1[l1] \u003e s2[l2])\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t{\n\t\t\t\tl1++;\n\t\t\t\tl2++;\n\t\t\t}\n\t\t}\n\t\treturn l2 \u003c s2.size() ? true : false;\n\n\t\t//strcmp(s1.c_str() , s2.c_str());\n\t}\n\n\tbool operator==(string\u0026 s1, string\u0026 s2)\n\t{\n\t\treturn strcmp(s1.c_str(), s2.c_str()) == 0;\n\t}\n\n\tbool operator\u003e=(string\u0026 s1, string\u0026 s2)\n\t{\n\t\treturn !(s1 \u003c s2) ;\n\t}\n\n\tbool operator\u003e(string\u0026 s1, string\u0026 s2)\n\t{\n\t\treturn !(s1 \u003e= s2);\n\t}\n\n\tbool operator\u003c=(string\u0026 s1, string\u0026 s2)\n\t{\n\t\treturn !(s1 \u003e s2);\n\t}\n\n\tbool operator!=(string\u0026 s1, string\u0026 s2)\n\t{\n\t\treturn !(s1 == s2);\n\t}\n\n\tostream\u0026 operator\u003c\u003c(ostream\u0026 out, const string\u0026 s)\n\t{\n\t\tfor (auto ch : s)\n\t\t{\n\t\t\tout \u003c\u003c ch;\n\t\t}\n\t\treturn out;\n\t}\n\n\tistream\u0026 operator\u003e\u003e(istream\u0026 in, string\u0026 s)\n\t{\n\t\ts.clear();\n\n\t\tchar ch = in.get();\n\n\t\twhile (ch != '\\n' \u0026\u0026 ch != ' ')\n\t\t{\n\t\t\ts += ch;\n\t\t\tch = in.get();\n\t\t}\n\n\t\treturn in;\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722132352-edcwb66",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722132352-edcwb66"
			}
		},
		{
			"ID": "20220722131114-apge45w",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220722131114-apge45w",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "有看头的函数"
				}
			]
		},
		{
			"ID": "20220722132358-kchsb3e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722132358-kchsb3e"
			}
		},
		{
			"ID": "20220722131114-ufk56x5",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220722131114-ufk56x5",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string构造函数"
				}
			]
		},
		{
			"ID": "20220722131114-plls7a4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-plls7a4",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string(const char* str = \"\") //当我们进行深拷贝时，如果没有目标 字符 ，则创建空字符串\n\t:_size(strlen(str)) //没有字符，则为 0 。\n\t,_capacity(_size) //_size为0 ，则 _capacity 也为0\n{\n\t_str = new char[_capacity + 1]; //开辟空间，+1是因为要给 '\\0' 留一个位\n\tstrcpy(_str, str); \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722132355-vhqwru5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722132355-vhqwru5"
			}
		},
		{
			"ID": "20220722131114-m7eoqoq",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220722131114-m7eoqoq",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "string拷贝构造函数"
				}
			]
		},
		{
			"ID": "20220722131114-2khzeqq",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-2khzeqq",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "传统写法："
				}
			]
		},
		{
			"ID": "20220722131114-84fuuf6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-84fuuf6",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种写法是传统学法，比较保守。"
				}
			]
		},
		{
			"ID": "20220722131114-fcg5u9o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-fcg5u9o",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string(const string\u0026 s)\n\t:_size(s._size)\n\t,_capacity(s._capacity)\n{\n\t_str = new char[_capacity + 1];\n\tstrcpy(_str, s._str);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-qc3vrw2",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-qc3vrw2",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现代写法："
				}
			]
		},
		{
			"ID": "20220722131114-zjbzprq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-zjbzprq",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string(string\u0026 s) //先将 *this  初始化为空，因为会需要交换\n\t:_size(0)\n\t,_capacity(0)\n\t,_str(nullptr)\n{\n\tstring tmp(s._str); //使用普通构造临时函数，因为普通的构造函数会为我们开辟空间，\n\tswap(tmp); //交换tmp和this中的成员函数\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-d6wtsf9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-d6wtsf9",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在其中使用swap时，我们使用的是，我们自己创建的swap函数。\n因为自带swap函数是交换对象时，会调用构造函数，会对浪费一些资源，所以推荐自己写。"
				}
			]
		},
		{
			"ID": "20220722131114-op66as8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-op66as8",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void swap(string\u0026 s) //只交换必要的成员变量\n{\n\tstd::swap(_str , s._str);\n\tstd::swap(_size , s._size);\n\tstd::swap(_capacity , s._capacity);\n}\n\nstring(string\u0026 s) //先将 *this  初始化为空，因为会需要交换\n\t:_size(0)\n\t,_capacity(0)\n\t,_str(nullptr)\n{\n\tstring tmp(s._str); //使用普通构造临时函数，因为普通的构造函数会为我们开辟空间，\n\tswap(tmp); //交换tmp和this中的成员函数\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-0c7rpbx",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220722131114-0c7rpbx",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "operator="
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 函数"
				}
			]
		},
		{
			"ID": "20220722131114-n7261cm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-n7261cm",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：对象赋值。"
				}
			]
		},
		{
			"ID": "20220722131114-5eojdwa",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-5eojdwa",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "传统写法："
				}
			]
		},
		{
			"ID": "20220722131114-9u233e6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-9u233e6",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：在使用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "new"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 函数时，有可能开辟失败，那时就是结束程序并抛异常，所以不能先删除 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "_str"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n错误写法："
				}
			]
		},
		{
			"ID": "20220722131114-5ijx19r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-5ijx19r",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "//错误写法\n////此方法有缺陷，不能自己给自己赋值 如：  s3 = s3 , 因为他会把自己先给释放了，所以之后赋值的内容就是乱码了\nstring\u0026 operator=(const string\u0026 s)\n{\n\tdelete[] _str;\n\t_str = new char[strlen(s._str) + 1]; // new是有可能会开辟空间失败的，那时抛异常后就会返回，但是我们之前却把 _str 给释放了\n\tstrcpy(_str, s._str);\n\n\treturn *this;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-vgyk03p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-vgyk03p",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正确写法："
				}
			]
		},
		{
			"ID": "20220722131114-qyl4b3l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-qyl4b3l",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string\u0026 operator=(const string\u0026 s)\n{\n\tif(this != \u0026s) //判断是否是自己给自己赋值，所以用的是地址\n\t{\n\t\tchar* tmp = new char[strlen(s._str)+1]; //先开辟一个临时变量tmp，\n\t\tstrcpy(tmp,s._str); //将s中的字符串拷贝到tmp中。\n\t\tdelete[] _str; //释放this-\u003e_str 的空间\n\t\t_str = tmp; //将tmp赋值给this-\u003e_str\n\t\t_size = s._size;\n\t\t_capacity = s._capacity;\n\t}\n\treturn *this;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-0riz6zm",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-0riz6zm",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现代写法："
				}
			]
		},
		{
			"ID": "20220722131114-v3z9yyu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-v3z9yyu",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string\u0026 operator=(string s) //注意这里没有引用传递，是值传递\n{\n\tswap(s); //使用我们自己写的swap函数\n\treturn *this;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-aoolekm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-aoolekm",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：形参部分是没有引用的，因为我们要交换，所以这里是不能使用引用传递，用的是"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "值传递"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。\n而值传递又会开辟新的空间，所以此方法是最推荐使用的"
				}
			]
		},
		{
			"ID": "20220722131114-8op1574",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220722131114-8op1574",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "insert"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 函数"
				}
			]
		},
		{
			"ID": "20220722131114-494wbue",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-494wbue",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用："
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "在指定位置插入字符或字符串。"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-iv0pi3s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-iv0pi3s",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string\u0026 insert(size_t pos, char ch)\n{\n\tassert(pos \u003c= _size); //因为要有可能尾插，所以是 \u003c= _size、\n\n\tif (_size == _capacity)\n\t{\n\t\treserve(_capacity == 0 ? 4 : _capacity * 2);\n\t}\n\n\tsize_t end = _size + 1; //因为要添加一个数据，end是size后一个的空位，所以需要+1。\n\twhile (end \u003e pos)\n\t{\n\t\t_str[end] = _str[end - 1];\n\t\tend--;\n\t}\n\n\t_str[pos] = ch;\n\t_size++;\n\n\treturn *this;\n}\n\nstring\u0026 insert(size_t pos, const char* s)\n{\n\tassert(pos \u003c= _size);\n\tsize_t len = strlen(s);\n\tif (_size + len \u003e _capacity)\n\t{\n\t\treserve(_size + len);\n\t}\n\n\tsize_t end = _size + len;\n\twhile (end \u003e pos) \n\t{\n\t\t_str[end] = _str[end - len];\n\t\t--end;\n\t}\n\n\tstrncpy(_str + pos, s, len);\n\t_size += len;\n\treturn *this;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-umrmz91",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-umrmz91",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "插入字符串的  "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "insert"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " 函数"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ， 有一些缺陷的，在循环判断条件中"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "while(end \u003e pos)"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "  。"
				}
			]
		},
		{
			"ID": "20220722131114-5uij7be",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-5uij7be",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string\u0026 insert(size_t pos, const char* s)\n{\n\tassert(pos \u003c= _size);\n\tsize_t len = strlen(s);\n\tif (_size + len \u003e _capacity)\n\t{\n\t\treserve(_size + len);\n\t}\n\n\tsize_t end = _size + len;\n\twhile (end \u003e pos)  \n\t{\n\t\t_str[end] = _str[end - len];\n\t\t--end;\n\t}\n\n\tstrncpy(_str + pos, s, len);\n\t_size += len;\n\treturn *this;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-pwer7ti",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-pwer7ti",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "虽然此结果的运行结果没有毛病， 但是确实存在一些"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "越界问题"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20220722131114-egoxj39",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-egoxj39",
				"updated": "20220722132439"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "若：我们定义 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "string s(\"hello\")"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "  , 我们要在索引1处插入字符串"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "abc"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220511161041.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-94aezja",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20220722131114-94aezja",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20220722131114-gm4kl0w",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20220722131114-gm4kl0w",
						"updated": "20220722131114"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "1.当 end = 3 时，我们已经挪动出我们需要的空位了，但是循环还在继续。\n2.当end= 3 时， "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "_str[end] = _str[end -len]"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 中  "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "len = 3"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " ， "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "_str[3] = _str[1]"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 是没问题的。\n3.但是当end = 2时 "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "_str[end -len]"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 中的 "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "end -len"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 是等于  "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "2 - 3"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " 是等于 "
						},
						{
							"Type": "NodeCodeSpan",
							"Data": "code",
							"Children": [
								{
									"Type": "NodeCodeSpanOpenMarker"
								},
								{
									"Type": "NodeCodeSpanContent",
									"Data": "-1"
								},
								{
									"Type": "NodeCodeSpanCloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " ， 这已经是越界的了。"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-a60ju9e",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-a60ju9e",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "正确写法："
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-142itqn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-142itqn",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将循环判断语句的 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "while(end \u003e pos)"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "  改为 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "while(end \u003e= pos + len)"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " ，即可解决问题。"
				}
			]
		},
		{
			"ID": "20220722131114-m4qv6bn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-m4qv6bn",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string\u0026 insert(size_t pos, const char* s)\n{\n\tassert(pos \u003c= _size);\n\tsize_t len = strlen(s);\n\tif (_size + len \u003e _capacity)\n\t{\n\t\treserve(_size + len);\n\t}\n\n\tsize_t end = _size + len;\n\twhile (end \u003e= pos+len)  \n\t{\n\t\t_str[end] = _str[end - len];\n\t\t--end;\n\t}\n\n\tstrncpy(_str + pos, s, len);\n\t_size += len;\n\treturn *this;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722132500-n3vgesu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722132500-n3vgesu"
			}
		},
		{
			"ID": "20220722131114-eoqxqq1",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220722131114-eoqxqq1",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "push_back"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "函数"
				}
			]
		},
		{
			"ID": "20220722131114-1v3uugw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-1v3uugw",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此函数注意 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "_size"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 和  "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "_capacity"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的大小"
				}
			]
		},
		{
			"ID": "20220722131114-fsgo4p8",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-fsgo4p8",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "传统写法："
				}
			]
		},
		{
			"ID": "20220722131114-ixl6qve",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-ixl6qve",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void push_back(char ch)\n{\n\tif (_size == _capacity) \n\t{\n\t\treserve(_capacity == 0 ? 4 : _capacity * 2);\n\t}\n\t_str[_size] = ch;\n\t_size++;\n\t_str[_size] = '\\0';\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-b6s11hn",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-b6s11hn",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现代写法："
				}
			]
		},
		{
			"ID": "20220722131114-9n8ipk9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-9n8ipk9",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void push_back(char ch)\n{\n\tinsert(_size , ch);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722132456-jcw5so9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722132456-jcw5so9"
			}
		},
		{
			"ID": "20220722131114-r0ondzo",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220722131114-r0ondzo",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "append"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 函数"
				}
			]
		},
		{
			"ID": "20220722131114-3of649l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-3of649l",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用：在"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "字符串后追加字符或字符串"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-59ohhah",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-59ohhah",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "传统写法："
				}
			]
		},
		{
			"ID": "20220722131114-wgwqzuc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-wgwqzuc",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void append(const char* str)\n{\n\tsize_t len = strlen(str);\n\tif (_size + len \u003e _capacity)\n\t{\n\t\treserve(_size + len);\n\t}\n\tstrcpy(_str + _size, str);\n\t_size += len;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-abudek1",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-abudek1",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现代写法："
				}
			]
		},
		{
			"ID": "20220722131114-qe1asdt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-qe1asdt",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "复用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "insert"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 函数"
				}
			]
		},
		{
			"ID": "20220722131114-e1bzr3g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-e1bzr3g",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "void append(const char* str)\n{\n\tinsert(_size , str);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-qmp1kni",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220722131114-qmp1kni",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "erase"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 函数"
				}
			]
		},
		{
			"ID": "20220722131114-7xdj1tn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-7xdj1tn",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作用："
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "删除指定位置上的字符或字符串"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-dmqadjp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-dmqadjp",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "string\u0026 erase(size_t pos = 0, size_t len = npos)\n{\n\tassert(pos \u003c _size);\n\n\tif (len == npos || len + pos \u003e= _size)\n\t{\n\t\t_str[pos] = '\\0';\n\t\t_size = pos;\n\t}\n\telse\n\t{\n\t\tstrcpy(_str + pos, _str + pos + len);\n\t\t_size -= len;\n\t}\n\treturn *this;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722132509-f3ngs96",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722132509-f3ngs96"
			}
		},
		{
			"ID": "20220722131114-rwhllbw",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220722131114-rwhllbw",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "operator\u003c\u003c"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "函数"
				}
			]
		},
		{
			"ID": "20220722131114-9026ty6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-9026ty6",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "写此函数需要展开 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "std命名空间"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-qz65oif",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-qz65oif",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "错误写法："
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-txgycac",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-txgycac",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ostream\u0026 operator\u003c\u003c(ostream\u0026 out, const string\u0026 s)\n{\n\tout \u003c\u003c s.c_str(); //不能这样写\n\treturn out；\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-jieuc28",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-jieuc28",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因为如果使用"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "c_str"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "函数的话，遇到 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "\\0"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "  就会返回"
				}
			]
		},
		{
			"ID": "20220722131114-zfsdomm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-zfsdomm",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "看以下代码"
				}
			]
		},
		{
			"ID": "20220722131114-qkfaglm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-qkfaglm",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()\n{\n\tstring s(\"hello\");\n\ts+='\\0'; //这个 '\\0' 是作为有效字符插入进去的，所以不代表结果，一般是以空格显示\n\ts+='world';\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-e3og5jv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-e3og5jv",
				"updated": "20220722132547"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果这段代码我们使用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "c_str()"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 这个函数，他就不会把 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "s+='\\0'"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 中的 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "'\\0'"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 当作有效字符，而是当作"
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "结束标志"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220511193724.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-awxxub6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-awxxub6",
				"updated": "20220722132557"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是实际上，有效字符却是 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "11"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 个\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220511193959.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-rovabjj",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20220722131114-rovabjj",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "正确写法："
				}
			]
		},
		{
			"ID": "20220722131114-a4conag",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-a4conag",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "ostream\u0026 operator\u003c\u003c(ostream\u0026 out, const string\u0026 s)\n{\n\tfor (auto ch : s) //使用正常的循环也可以\n\t{\n\t\tout \u003c\u003c ch;\n\t}\n\treturn out;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220722131114-rwnhdtu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-rwnhdtu",
				"updated": "20220722132609"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "assets/"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/020220511194200.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-sp4c53o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-sp4c53o",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "\\0"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "作为有效字符时，在vs2019中不显示，而不是用 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "' '"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "(空格) 代替，"
				}
			]
		},
		{
			"ID": "20220722132614-qat5r8n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722132614-qat5r8n"
			}
		},
		{
			"ID": "20220722131114-84edfx2",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220722131114-84edfx2",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "operator\u003e\u003e"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "函数"
				}
			]
		},
		{
			"ID": "20220722131114-jynnu5m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220722131114-jynnu5m",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "写此函数需要展开 "
				},
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "std命名空间"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20220722131114-i6vp87r",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220722131114-i6vp87r",
				"updated": "20220722131114"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "istream\u0026 operator\u003e\u003e(istream\u0026 in, string\u0026 s)\n{\n\ts.clear();\n\n\tchar ch = in.get();\n\n\twhile (ch != '\\n' \u0026\u0026 ch != ' ')\n\t{\n\t\ts += ch;\n\t\tch = in.get();\n\t}\n\n\treturn in;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221013223949-9x139vd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221013223949-9x139vd"
			}
		},
		{
			"ID": "20221013223950-tdz5l0x",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221013223950-tdz5l0x",
				"updated": "20221013223950"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "移动构造"
				}
			]
		},
		{
			"ID": "20221013223950-fk0oebw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221013223950-fk0oebw",
				"updated": "20221013223950"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 移动构造\nstring(string\u0026\u0026 s)\n\t:_str(nullptr)\n\t, _size(0)\n\t, _capacity(0)\n{\n\tcout \u003c\u003c \"string(string\u0026\u0026 s) -- 资源转移\" \u003c\u003c endl;\n\n\tthis-\u003eswap(s);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221013223953-twt2xcy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221013223953-twt2xcy"
			}
		},
		{
			"ID": "20221013223950-ezaan8w",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20221013223950-ezaan8w",
				"updated": "20221013223950"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "移动赋值"
				}
			]
		},
		{
			"ID": "20221013223950-ghjrbzw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221013223950-ghjrbzw",
				"updated": "20221013223950"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 移动赋值\nstring\u0026 operator=(string\u0026\u0026 s)\n{\n\tcout \u003c\u003c \"string\u0026 operator=(string\u0026\u0026 s) -- 转移资源\" \u003c\u003c endl;\n\tswap(s);\n\n\treturn *this;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}