{
	"ID": "20230424222743-8lbidva",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230424222743-8lbidva",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230424222759-bazzibn\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230424222743-154myg1\u0026quot;,\u0026quot;scrollTop\u0026quot;:8657,\u0026quot;focusId\u0026quot;:\u0026quot;20230424222809-cwogrko\u0026quot;,\u0026quot;focusStart\u0026quot;:29,\u0026quot;focusEnd\u0026quot;:29}",
		"title": "模板",
		"updated": "20230424222853"
	},
	"Children": [
		{
			"ID": "20230424222759-bazzibn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222759-bazzibn"
			}
		},
		{
			"ID": "20230424222809-k874ngh",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424222809-k874ngh",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板简介"
				}
			]
		},
		{
			"ID": "20230424222809-4zeu3la",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-4zeu3la",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板无疑是C++语言中最强大却最少被使用的特性之一。\n在C++中，模板让程序员能够定义一种适用于不同类型对象的行为。这听起来有点像宏（参见前面用于判断两个数中哪个更大的简单宏MAX），但宏不是类型安全的，而模板是类型安全的。"
				}
			]
		},
		{
			"ID": "20230424222809-gdsl9u5",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424222809-gdsl9u5",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模版声明语法"
				}
			]
		},
		{
			"ID": "20230424222809-8i0iz6y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-8i0iz6y",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板声明以关键字"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "template"
				},
				{
					"Type": "NodeText",
					"Data": "​ 打头，接下来是类型参数列表。"
				}
			]
		},
		{
			"ID": "20230424222809-zjrc37a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-zjrc37a",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关键字"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "template"
				},
				{
					"Type": "NodeText",
					"Data": "​ 标志着模板声明的开始，接下来是模板参数列表。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "该参数列表包含关键字typename"
				},
				{
					"Type": "NodeText",
					"Data": "​，它定义了模板参数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "objType"
				},
				{
					"Type": "NodeText",
					"Data": "​，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "objType"
				},
				{
					"Type": "NodeText",
					"Data": "​ 是一个占位符，针对对象实例化模板时，将使用对象的类型替换它。"
				}
			]
		},
		{
			"ID": "20230424222809-l2szpzn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-l2szpzn",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "函数模版"
				}
			]
		},
		{
			"ID": "20230424222809-rxggmmt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-rxggmmt",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003ctypename T1, typename T2\u003e\nbool TemplateFunction(const T1\u0026 param1, const T2\u0026 param2);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-8ue6ucv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-8ue6ucv",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类模版"
				}
			]
		},
		{
			"ID": "20230424222809-yrlt6cl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-yrlt6cl",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003ctypename T1, typename T2 \u003e\nclass MyTemplate\n{\nprivate:\n\tT1 member1;\n\tT2 member2;\n\npublic:\n\tT1 GetObj1() {return member1; }\n\t// ... other members\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-ln9aw5c",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424222809-ln9aw5c",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "各种类型的模板声明"
				}
			]
		},
		{
			"ID": "20230424222809-fuoixfu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-fuoixfu",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板声明可以是：\n• 函数的声明或定义；\n• 类的定义或声明；\n• 类模板的成员函数或成员类的声明或定义；\n• 类模板的静态数据成员的定义；\n• 嵌套在类模板中的类的静态数据成员的定义；\n• 类或类模板的成员模板的定义"
				}
			]
		},
		{
			"ID": "20230424222809-x82ieem",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424222809-x82ieem",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板函数"
				}
			]
		},
		{
			"ID": "20230424222809-l7f8vv4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-l7f8vv4",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设要编写一个函数，它适用于不同类型的参数，为此可使用模板语法！编写一个找最大值的Max函数."
				}
			]
		},
		{
			"ID": "20230424222809-yabtzk2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-yabtzk2",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003ctypename objType\u003e\nconst objType\u0026 GetMax(const objType\u0026 value1, const objType\u0026 value2)\n{\n\tif (value1 \u003e value2)\n\t\treturn value1;\n\telse\n\t\treturn value2;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-6ityekn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-6ityekn",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面是一个使用该模板的示例："
				}
			]
		},
		{
			"ID": "20230424222809-naewbce",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-naewbce",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()\n{\n\tint num1 = 10; \n\tint num2 = 40;\n\tint maxVal = GetMax\u003cint\u003e(num1 , num2);\n\tdouble double1 = 1.1;\n\tdouble double2 = 11.1;\n\tdouble maxVal = GetMax \u003cdouble\u003e(double1, double2);\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-cn09dha",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424222809-cn09dha",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模版生成的函数"
				}
			]
		},
		{
			"ID": "20230424222809-7x5os5f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-7x5os5f",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意到调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetMax"
				},
				{
					"Type": "NodeText",
					"Data": "​ 时使用了"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;int\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​，这将模板参数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "objType"
				},
				{
					"Type": "NodeText",
					"Data": "​ 指定为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int"
				},
				{
					"Type": "NodeText",
					"Data": "​。上述代码将导致编译器生成模板函数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetMax"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的两个版本，如下所示："
				}
			]
		},
		{
			"ID": "20230424222809-t9h49b8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-t9h49b8",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "const int\u0026 GetMax(const int\u0026 value1, const int\u0026 value2)\n{\n\t//...\n}\n\nconst double\u0026 GetMax(const double\u0026 value1, const double\u0026 value2)\n{\n\t// ...\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-6q6nw8u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-6q6nw8u",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然而，实际上调用模板函数时并非一定要指定类型，因此下面的函数调用没有任何问题："
				}
			]
		},
		{
			"ID": "20230424222809-rwovpkp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-rwovpkp",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "int maxVal = GetMax(num1, num2);"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230424222809-ux1y0ie",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-ux1y0ie",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这种情况下，编译器很聪明，会自动推导类型, 知道这是针对整型调用模板函数。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "然而，对于模板类，必须显式地指定类型"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230424222809-sb3mghd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424222809-sb3mghd",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实例解析"
				}
			]
		},
		{
			"ID": "20230424222809-f6yj3vw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-f6yj3vw",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include\u003ciostream\u003e\n#include\u003cstring\u003e\nusing namespace std;\n\ntemplate \u003ctypename Type\u003e\nconst Type\u0026 GetMax(const Type\u0026 value1, const Type\u0026 value2)\n{\n\tif (value1 \u003e value2)\n\t\treturn value1;\n\telse\n\t\treturn value2;\n}\n\ntemplate \u003ctypename Type\u003e\nvoid DisplayComparison(const Type\u0026 value1, const Type\u0026 value2)\n{\n\tcout \u003c\u003c \"GetMax(\" \u003c\u003c value1 \u003c\u003c \", \" \u003c\u003c value2 \u003c\u003c \") = \";\n\tcout \u003c\u003c GetMax(value1, value2) \u003c\u003c endl;\n}\n\nint main()\n{\n\tint num1 = -101, num2 = 2011;\n\tDisplayComparison(num1, num2);\n\n\tdouble d1 = 3.14, d2 = 3.1416;\n\tDisplayComparison(d1, d2);\n\n\tstring name1(\"Jack\"), name2(\"John\");\n\tDisplayComparison(name1, name2);\n\n\treturn 0;\n }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-or0chjv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-or0chjv",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行结果:"
				}
			]
		},
		{
			"ID": "20230424222809-4u9ggvb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-4u9ggvb",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "GetMax(-101, 2011) = 2011\nGetMax(3.14, 3.1416) = 3.1416\nGetMax(Jack, John) = John\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-af0zmi9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-af0zmi9",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "该程序清单包含两个模板函数：GetMax( ) 和 DisplayComparison( )， 。在main( )函数中，表明，可将同一个模板函数用于不同类型的数据：int、double 和 std::string。模板函数不仅可以重用（就像宏函数一样），而且更容易编写和维护，还是类型安全的。"
				}
			]
		},
		{
			"ID": "20230424222809-pvanwbp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-pvanwbp",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "请注意，调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DisplayComparison"
				},
				{
					"Type": "NodeText",
					"Data": "​ 时，也可显式地指定类型，如下所示：\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "DisplayComparison\u0026lt;int\u0026gt;(num1, num2);"
				},
				{
					"Type": "NodeText",
					"Data": "​\n然而，调用模板函数时没有必要这样做。您无需指定模板参数的类型，因为编译器能够自动推断出类型；但使用模板类时，需要这样做。"
				}
			]
		},
		{
			"ID": "20230424222809-2p84gab",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424222809-2p84gab",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模版类"
				}
			]
		},
		{
			"ID": "20230424222809-kkp9q7o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-kkp9q7o",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面是一个简单的模板类，它只有单个模板参数T，用于存储一个成员变量："
				}
			]
		},
		{
			"ID": "20230424222809-n5xakmf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-n5xakmf",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003ctypename T\u003e\nclass HoldVarTypeT\n{\nprivate:\n\tT value;\npublic:\n\tvoid SetValue (const T\u0026 newValue) { value = newValue; }\n\tT\u0026 GetValue() {return value;}\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-cfwybkw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-cfwybkw",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类 HoldVarTypeT 用于保存一个类型为T 的变量，该变量的类型是在使用模板时指定的。下面来看该模板类的一种用法："
				}
			]
		},
		{
			"ID": "20230424222809-47njiuy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-47njiuy",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int main()\n{\n\tHoldVarTypeT \u003cint\u003e holdInt; //int的模板实例化\n\tholdInt.SetValue(5);\n\tcout \u003c\u003c \"The value stored is: \" \u003c\u003c holdInt.GetValue() \u003c\u003c endl;\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-n6izsmr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-n6izsmr",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里使用该模板类来存储和检索类型为int 的对象，即使用int 类型的模板参数实例化Template 类。同样，这个类也可以用于处理字符串，其用法类似："
				}
			]
		},
		{
			"ID": "20230424222809-6gzn3j6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-6gzn3j6",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "HoldVarTypeT \u003cchar*\u003e holdStr;\nholdStr.SetValue(\"Sample string\");\ncout \u003c\u003c \"The value stored is: \" \u003c\u003c holdStr.GetValue() \u003c\u003c endl;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-rt40t6z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-rt40t6z",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此，这个模板类定义了一种模式，并可针对不同的数据类型实现这种模式。"
				}
			]
		},
		{
			"ID": "20230424222809-vbsms2z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-vbsms2z",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意:"
				}
			]
		},
		{
			"ID": "20230424222809-zmk7zmv",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230424222809-zmk7zmv",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230424222809-lf3r3kt",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230424222809-lf3r3kt",
						"updated": "20230424222809"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "实例化模板类时，除使用 int 等简单类型和标准库中的类外，还可使用其他类型。您可能使用自己定义的类来实例化模板。"
						}
					]
				}
			]
		},
		{
			"ID": "20230424222809-y5xoqzk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424222809-y5xoqzk",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明包含多个参数的模板"
				}
			]
		},
		{
			"ID": "20230424222809-itnhgd9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-itnhgd9",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板参数列表包含多个参数，参数之间用逗号分隔。因此，如果要声明一个泛型类用于存储两个类型可能不同的对象，可以使用如下所示的代码（这个模板类包含两个模板参数）："
				}
			]
		},
		{
			"ID": "20230424222809-l24slae",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-l24slae",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003ctypename T1, typename T2\u003e\nclass HoldsPair\n{\nprivate:\n\tT1 value1;\n\tT2 value2;\npublic:\n\t// 构造函数\n\tHoldsPair (const T1\u0026 val1, const T2\u0026 val2)\n\t{\n\t\tvalue1 = val1;\n\t\tvalue2 = val2;\n\t};\n\t// ... \n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-6k9a3wa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-6k9a3wa",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这里，类"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HoldsPair"
				},
				{
					"Type": "NodeText",
					"Data": "​ 接受两个模板参数，参数名分别为T1 和T2。可使用这个类来存储两个类型相同或不同的对象，如下所示："
				}
			]
		},
		{
			"ID": "20230424222809-cxu3msn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-cxu3msn",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "HoldsPair \u003cint, double\u003e pairIntDouble (6, 1.99);\nHoldsPair \u003cint, int\u003e pairIntDouble (6, 500);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-jfxi6ik",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424222809-jfxi6ik",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "声明包含默认参数的模板"
				}
			]
		},
		{
			"ID": "20230424222809-cwogrko",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-cwogrko",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template \u003ctypename T1=int, typename T2=int\u003e\nclass HoldsPair\n{\n\t// ... \n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-ulmk5w2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-ulmk5w2",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这与给函数指定默认参数值极其类似，只是这里指定的是默认类型。\n这样，前述第二种HoldsPair 用法可以简写为："
				}
			]
		},
		{
			"ID": "20230424222809-jfdpfok",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-jfdpfok",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "HoldsPair \u003c\u003e pairInts (6, 500); // 使用模版默认的类型进行初始化,默认类型为int\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-6li74of",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424222809-6li74of",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类模版实例"
				}
			]
		},
		{
			"ID": "20230424222809-0d4y2cg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-0d4y2cg",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面使用前面讨论的 HoldsPair 模板来进行开发"
				}
			]
		},
		{
			"ID": "20230424222809-62ctatz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-62ctatz",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " #include \u003ciostream\u003e\n using namespace std;\n\n // template with default params: int \u0026 double\n template \u003ctypename T1=int, typename T2=double\u003e\n class HoldsPair\n {\n private:\n\t T1 value1;\n\t T2 value2;\n public:\n\t HoldsPair(const T1\u0026 val1, const T2\u0026 val2) // constructor\n\t\t : value1(val1), value2(val2) {}\n\n\t // Accessor functions\n\t const T1 \u0026 GetFirstValue () const\n\t {\n\t\t return value1;\n\t }\n\n\t const T2\u0026 GetSecondValue () const\n\t {\n\t\t return value2;\n\t }\n };\n\n int main ()\n {\n\tHoldsPair\u003c\u003e pairIntDbl (300, 10.09);\n\tHoldsPair\u003cshort,const char*\u003epairShortStr(25,\"Learn templates, love C++”);\n\n\tcout \u003c\u003c \"The first object contains -\" \u003c\u003c endl;\n\tcout \u003c\u003c \"Value 1: \" \u003c\u003c pairIntDbl.GetFirstValue () \u003c\u003c endl;\n\tcout \u003c\u003c \"Value 2: \" \u003c\u003c pairIntDbl.GetSecondValue () \u003c\u003c endl;\n\n\tcout \u003c\u003c \"The second object contains -\" \u003c\u003c endl;\n\tcout \u003c\u003c \"Value 1: \" \u003c\u003c pairShortStr.GetFirstValue () \u003c\u003c endl;\n\tcout \u003c\u003c \"Value 2: \" \u003c\u003c pairShortStr.GetSecondValue () \u003c\u003c endl;\n\n\treturn 0;\n\t}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-b4yul23",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-b4yul23",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行结果:"
				}
			]
		},
		{
			"ID": "20230424222809-7u1jzyv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-7u1jzyv",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "The first object contains -\nValue 1: 300\nValue 2: 10.09\nThe second object contains -\nValue 1: 25\nValue 2: Learn templates, love C++\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-q8mrsuo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-q8mrsuo",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这个简单程序演示了如何声明模板类HoldsPair 来存储两个值，这两个值的类型取决于模板的参数列表。第1 行有一个模板参数列表，它定义了两个参数（T1 和T2），这两个参数的默认类型分别为 int 和 double 。\n存取器函数"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetFirstValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​和"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "GetSecondValue()"
				},
				{
					"Type": "NodeText",
					"Data": "​用于查询对象的值，它们将根据模板实例化语法返回正确的对象类型。\nHoldsPair 定义了一种模式，可通过重用该模式针对不同的变量类型实现相同的逻辑。因此，使用模板可提高代码的可复用性。"
				}
			]
		},
		{
			"ID": "20230424222809-jpl7q6q",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230424222809-jpl7q6q",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板的实例化和具体化"
				}
			]
		},
		{
			"ID": "20230424222809-xpzkg0e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-xpzkg0e",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板类是创建类的蓝图，因此在编译器看来，仅当模板类以某种方式被使用后，其代码才存在。换言之，对于您定义了但未使用的模板类，编译器将忽略它。然而，当您像下面这样通过提供模板参数来实例化模板类（如HoldsPair）时："
				}
			]
		},
		{
			"ID": "20230424222809-4swlqth",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-4swlqth",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "HoldsPair\u003cint, double\u003e pairIntDbl;\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-bwndk8w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-bwndk8w",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "就相当于命令编译器使用模板来创建一个类，即使用模板参数指定的类型（这里是int 和double）实例化模板。因此，对模板来说，实例化指的是使用一个或多个模板参数来创建特定的类型。"
				}
			]
		},
		{
			"ID": "20230424222809-7xederj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-7xederj",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "另一方面，在有些情况下，使用特定的类型实例化模板时，需要显式地指定不同的行为。这就是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "具体化模板"
				},
				{
					"Type": "NodeText",
					"Data": "，即为特定的类型指定行为 也叫 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "特化"
				},
				{
					"Type": "NodeText",
					"Data": "。下面是模板类HoldsPair 的一个具体化，其中两个模板参数的类型都为int："
				}
			]
		},
		{
			"ID": "20230424222809-gkiurkw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-gkiurkw",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "template\u003c\u003e class HoldsPair\u003cint, int\u003e\n{\n\t// implementation code here\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-jc8zqhg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-jc8zqhg",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "具体化模板的代码必须在模板定义后面"
				}
			]
		},
		{
			"ID": "20230424222853-3ypjwdr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222853-3ypjwdr"
			}
		},
		{
			"ID": "20230424222809-2rh9rrh",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230424222809-2rh9rrh",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实例"
				}
			]
		},
		{
			"ID": "20230424222809-n55axe6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-n55axe6",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\nusing namespace std;\ntemplate \u003ctypename T1 = int, typename T2 = double\u003e\nclass HoldsPair\n{\nprivate:\n\tT1 value1;\n\tT2 value2;\npublic:\n\tHoldsPair(const T1\u0026 val1, const T2\u0026 val2) // constructor\n\t\t: value1(val1), value2(val2) {}\n\n\t// Accessor functions\n\tconst T1 \u0026 GetFirstValue() const;\n\tconst T2\u0026 GetSecondValue() const;\n};\n\n// specialization of HoldsPair for types int \u0026 int here\ntemplate\u003c\u003e class HoldsPair\u003cint, int\u003e\n{\nprivate:\n\tint value1;\n\tint value2;\n\tstring strFun;\n\npublic:\n\tHoldsPair(const int\u0026 val1, const int\u0026 val2) // constructor\n\t\t: value1(val1), value2(val2) {}\n\n\tconst int \u0026 GetFirstValue() const\n\t{\n\t\tcout \u003c\u003c \"Returning integer \" \u003c\u003c value1 \u003c\u003c endl;\n\t\treturn value1;\n\t}\n};\n\nint main()\n{\n\tHoldsPair\u003cint, int\u003e pairIntInt(222, 333);\n\tpairIntInt.GetFirstValue();\n\n\treturn 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-byhbvzq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-byhbvzq",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行结果:"
				}
			]
		},
		{
			"ID": "20230424222809-sf7rdp1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-sf7rdp1",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Returning integer 222\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-ircj9to",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-ircj9to",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "分析:"
				}
			]
		},
		{
			"ID": "20230424222809-gcr5hsy",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230424222809-gcr5hsy",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"ID": "20230424222809-mu6v76o",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230424222809-mu6v76o",
						"updated": "20230424222809"
					},
					"Children": [
						{
							"ID": "20230424222809-iqonlgd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230424222809-iqonlgd",
								"updated": "20230424222809"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "事实上，在模板具体化"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HoldsPair\u0026lt;int, int\u0026gt;"
								},
								{
									"Type": "NodeText",
									"Data": "​中，对函数GetFirstValue()做了修改，使其同时显示获得的值。"
								}
							]
						}
					]
				},
				{
					"ID": "20230424222809-k8zxyu1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230424222809-k8zxyu1",
						"updated": "20230424222809"
					},
					"Children": [
						{
							"ID": "20230424222809-038a0sn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230424222809-038a0sn",
								"updated": "20230424222809"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果您仔细查看"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "具体化代码"
								},
								{
									"Type": "NodeText",
									"Data": "，将发现这个版本在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "具体化模版中还声明了一个字符串成员"
								},
								{
									"Type": "NodeText",
									"Data": "；在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "普通模板定义中，并没有这个成员"
								},
								{
									"Type": "NodeText",
									"Data": "。事实上，这个模板定义甚至都没有提供存取函数"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "GetFirstValue()"
								},
								{
									"Type": "NodeText",
									"Data": "​和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "GetSecondValue()"
								},
								{
									"Type": "NodeText",
									"Data": "​的实现，但程序依然能够通过编译。"
								}
							]
						}
					]
				},
				{
					"ID": "20230424222809-va3n3xg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230424222809-va3n3xg",
						"updated": "20230424222809"
					},
					"Children": [
						{
							"ID": "20230424222809-76fdmu0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230424222809-76fdmu0",
								"updated": "20230424222809"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这是"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "因为编译器只需考虑针对"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong code",
									"TextMarkTextContent": "\u0026lt;int, int\u0026gt;"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "的模板实例化，而在这个实例化中，我们提供了完备的具体实现"
								},
								{
									"Type": "NodeText",
									"Data": "。总之，这个示例不仅演示了模板具体化，还表明根据模板的使用情况，编译器可能忽略模板代码。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230424222809-54csb02",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230424222809-54csb02",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板类和静态成员"
				}
			]
		},
		{
			"ID": "20230424222809-v9k9mqk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-v9k9mqk",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在模板类中，静态成员属性的工作原理是什么样的呢？"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "如果将类成员声明为静态的，该成员将由类的所有实例共享"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230424222809-928lpgj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-928lpgj",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "模板类的静态成员与此类似，由特定具体化的所有实例共享。也就是说，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "如果模板类包含静态成员，该成员将在针对int 具体化的所有实例之间共享；同样，它还将在针对double 具体化的所有实例之间共享，且与针对int 具体化的实例无关"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230424222809-sbiqcuq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-sbiqcuq",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "换句话说，可以认为编译器创建了两个版本的x：x_int 用于针对int 具体化的实例，而x_double 针对double 具体化的实例"
				}
			]
		},
		{
			"ID": "20230424222809-470xskw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-470xskw",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\nusing namespace std;\n\ntemplate \u003ctypename T\u003e\nclass TestStatic\n{\npublic:\n\tstatic int staticVal;\n};\n\n// static member initialization\ntemplate\u003ctypename T\u003e int TestStatic\u003cT\u003e::staticVal; //这行不可或缺，它初始化模板类的静态成员：\n\nint main()\n{\n\tTestStatic\u003cint\u003e intInstance;\n\tcout \u003c\u003c \"Setting staticVal for intInstance to 2011\" \u003c\u003c endl;\n\tintInstance.staticVal = 2011;\n\n\tTestStatic\u003cdouble\u003e dblnstance;\n\tcout \u003c\u003c \"Setting staticVal for Double_2 to 1011\" \u003c\u003c endl;\n\tdblnstance.staticVal = 1011;\n\n\tcout \u003c\u003c \"intInstance.staticVal = \" \u003c\u003c intInstance.staticVal \u003c\u003c endl;\n\tcout \u003c\u003c \"dblnstance.staticVal = \" \u003c\u003c dblnstance.staticVal \u003c\u003c endl;\n\n\treturn 0;\n }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-8a75uy1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-8a75uy1",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行结果:"
				}
			]
		},
		{
			"ID": "20230424222809-5rbiybg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230424222809-5rbiybg",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Setting staticVal for intInstance to 2011\nSetting staticVal for Double_2 to 1011\nintInstance.staticVal = 2011\ndblnstance.staticVal = 1011\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230424222809-8utfty2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222809-8utfty2",
				"updated": "20230424222809"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "分析"
				},
				{
					"Type": "NodeText",
					"Data": "\n在main函数中，分别为针对 int 和double 的模板具体化设置了成员staticVal。输出表明，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "编译器在两个不同的静态成员中存储了两个不同的值，但这两个静态成员都名为staticVal"
				},
				{
					"Type": "NodeText",
					"Data": "。也就是说，对于针对每种类型具体化的类，编译器确保其静态变量不受其他类的影响。"
				}
			]
		},
		{
			"ID": "20230424222743-154myg1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230424222743-154myg1",
				"updated": "20230424222743"
			}
		}
	]
}