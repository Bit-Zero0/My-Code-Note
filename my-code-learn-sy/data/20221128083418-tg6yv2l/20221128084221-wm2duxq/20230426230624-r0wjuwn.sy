{
	"ID": "20230426230624-r0wjuwn",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230426230624-r0wjuwn",
		"title": "Servlet",
		"updated": "20230426230643"
	},
	"Children": [
		{
			"ID": "20230426230643-58n7red",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230426230643-58n7red",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Servlet 是什么"
				}
			]
		},
		{
			"ID": "20230426230643-vn5aiy7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-vn5aiy7",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Servlet 是一种实现动态页面的技术. 是一组 Tomcat 提供给程序猿的 API, 帮助程序猿简单高效的开发一个 web app."
				}
			]
		},
		{
			"ID": "20230426230643-u270oxy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-u270oxy",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "回顾  动态页面 vs 静态页面"
				}
			]
		},
		{
			"ID": "20230426230643-c7tqqh4",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-c7tqqh4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-1pbvqr3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-1pbvqr3",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-jy6g6dp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-jy6g6dp",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态页面也就是内容始终固定的页面. 即使  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "用户不同/时间不同/输入的参数不同, 页面内容也不会发生变化"
								},
								{
									"Type": "NodeText",
									"Data": " . (除非网站的开发人员修改源代码, 否则页面内容始终不变)."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-ug3t3sp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-ug3t3sp",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-i1h8wqp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-i1h8wqp",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "对应的, "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "动态页面指的就是  用户不同/时间不同/输入的参数不同, 页面内容会发生变化"
								},
								{
									"Type": "NodeText",
									"Data": "."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-1lpqs4u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-1lpqs4u",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "构建动态页面的技术有很多, 每种语言都有一些相关的库/框架来做这件事.\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Servlet"
				},
				{
					"Type": "NodeText",
					"Data": " 就是 Tomcat 这个 HTTP 服务器提供给 Java 的一组 API, 来完成构建动态页面这个任务."
				}
			]
		},
		{
			"ID": "20230426230643-dbortyu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-dbortyu",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Servlet 主要做的工作"
				}
			]
		},
		{
			"ID": "20230426230643-en58jno",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-en58jno",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-dj0gdjb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-dj0gdjb",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-7ftpmc7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-7ftpmc7",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "允许程序猿注册一个类, 在 Tomcat 收到某个特定的 HTTP 请求的时候, 执行这个类中的一些代码."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-hujnmgl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-hujnmgl",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-bpfrput",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-bpfrput",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "帮助程序猿解析 HTTP 请求, 把 HTTP 请求从一个字符串解析成一个 HttpRequest 对象."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-fxadmx5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-fxadmx5",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-6kmpywb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-6kmpywb",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "帮助程序猿构造 HTTP 响应. 程序猿只要给指定的 HttpResponse 对象填写一些属性字段, Servlet就会自动的安装 HTTP 协议的方式构造出一个 HTTP 响应字符串, 并通过 Socket 写回给客户端."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-aa41a3e",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-aa41a3e",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-src5cp8",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-src5cp8",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "当然, Servlet 还支持一些其他的辅助功能, 此处暂时先不介绍."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-jot4y2i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-jot4y2i",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "简而言之, Servlet 是一组 Tomcat 提供的 API, 让程序猿自己写的代码能很好的和 Tomcat 配合起来, 从而更简单的实现一个 web app.\n而不必关注 Socket, HTTP协议格式, 多线程并发等技术细节, 降低了 web app 的开发门槛, 提高了开发效率."
				}
			]
		},
		{
			"ID": "20230426230643-hxudmwq",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230426230643-hxudmwq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "第一个 Servlet 程序"
				}
			]
		},
		{
			"ID": "20230426230643-kyazve8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-kyazve8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. 创建项目"
				}
			]
		},
		{
			"ID": "20230426230643-mxlbfhj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-mxlbfhj",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 IDEA 创建一个 Maven 项目."
				}
			]
		},
		{
			"ID": "20230426230643-83hnezw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230426230643-83hnezw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-h2rzf3n",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230426230643-h2rzf3n",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-492vw9l",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-492vw9l",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "菜单 -\u003e 文件 -\u003e 新建项目 -\u003e Maven\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221126161924.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126161924.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-lgm9ngc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230426230643-lgm9ngc",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-zt8yb91",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-zt8yb91",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "选择项目要存放的目录\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221126162107.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126162107.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-3boljc8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-3boljc8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. 引入依赖"
				}
			]
		},
		{
			"ID": "20230426230643-xro5u0y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-xro5u0y",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Maven 项目创建完毕后, 会自动生成一个 pom.xml 文件.\n我们需要在 pom.xml 中引入 Servlet API 依赖的 jar 包."
				}
			]
		},
		{
			"ID": "20230426230643-a9xuzhn",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230426230643-a9xuzhn",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-6wnct8a",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230426230643-6wnct8a",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-eohpsw4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-eohpsw4",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在中央仓库 https://mvnrepository.com/ 中搜索 \"servlet\", 一般第一个结果就是.\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221126162230.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126162230.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-u7aqhkz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230426230643-u7aqhkz",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-tkv3ccb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-tkv3ccb",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "选择版本. 一般我们使用 3.1.0 版本\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221126162321.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126162321.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-6fprq2d",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-6fprq2d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-aptljff",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-aptljff",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Servlet 的版本要和 Tomcat 匹配.\n如果我们使用 Tomcat 8.5, 那么就需要使用 Servlet 3.1.0\n可以在 http://tomcat.apache.org/whichversion.html 查询版本对应关系.\n​"
						},
						{
							"Type": "NodeImage",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeBang"
								},
								{
									"Type": "NodeOpenBracket"
								},
								{
									"Type": "NodeLinkText",
									"Data": "Pasted image 20221126162442.png"
								},
								{
									"Type": "NodeCloseBracket"
								},
								{
									"Type": "NodeOpenParen"
								},
								{
									"Type": "NodeLinkDest",
									"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126162442.png"
								},
								{
									"Type": "NodeCloseParen"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "​"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-kehdj6n",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230426230643-kehdj6n",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-8vog40w",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230426230643-8vog40w",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-g8k4lxd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-g8k4lxd",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "把中央仓库中提供的 xml 复制到项目的 pom.xml 中\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221126162512.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126162512.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-bn7ucip",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-bn7ucip",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "修改后的 pom.xml 形如:(每人的不一定都一样)"
				}
			]
		},
		{
			"ID": "20230426230643-g3ckw50",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-g3ckw50",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e  \n\u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\"  \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e  \n    \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e  \n  \n    \u003cgroupId\u003eorg.example\u003c/groupId\u003e  \n    \u003cartifactId\u003eServletHelloWorld\u003c/artifactId\u003e  \n    \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e  \n  \n    \u003cproperties\u003e    \n\t    \u003cmaven.compiler.source\u003e8\u003c/maven.compiler.source\u003e  \n        \u003cmaven.compiler.target\u003e8\u003c/maven.compiler.target\u003e  \n    \u003c/properties\u003e  \n  \n    \u003cdependencies\u003e    \n\t    \u003cdependency\u003e        \n\t\t    \u003cgroupId\u003ejavax.servlet\u003c/groupId\u003e  \n            \u003cartifactId\u003ejavax.servlet-api\u003c/artifactId\u003e  \n            \u003cversion\u003e3.1.0\u003c/version\u003e  \n            \u003cscope\u003eprovided\u003c/scope\u003e  \n        \u003c/dependency\u003e  \n    \u003c/dependencies\u003e\n\u003c/project\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-kgwgebm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-kgwgebm",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;dependencies\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​标签内部放置项目依赖的 jar 包. maven 会自动下载依赖到本地."
				}
			]
		},
		{
			"ID": "20230426230643-y71nx7d",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-y71nx7d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-tqxzfye",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-tqxzfye",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark",
							"TextMarkTextContent": "关于 groupId, artifactId, version"
						},
						{
							"Type": "NodeText",
							"Data": "\n这几个东西暂时我们不关注. 啥时候需要关注呢? 如果我们要把这个写的代码发布到中央仓库上, 那么就需要设定好这几个 ID 了."
						}
					]
				},
				{
					"ID": "20230426230643-weplu78",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230426230643-weplu78",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-iwk3vyn",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-iwk3vyn",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-3p0lelo",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-3p0lelo",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "groupId"
										},
										{
											"Type": "NodeText",
											"Data": ": 表示组织名称"
										}
									]
								}
							]
						},
						{
							"ID": "20230426230643-wh7jmou",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-wh7jmou",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-1h3dc3p",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-1h3dc3p",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "artifactId"
										},
										{
											"Type": "NodeText",
											"Data": ": 表示项目名称"
										}
									]
								}
							]
						},
						{
							"ID": "20230426230643-ebwbk6l",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-ebwbk6l",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-selgr6p",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-selgr6p",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "version"
										},
										{
											"Type": "NodeText",
											"Data": ": 表示版本号\n中央仓库就是按照这三个字段来确定唯一一个包的."
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-k2ikrps",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-k2ikrps",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126163010.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126163010.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n红色方框圈出来的部分, 就是这个 jar 包的 groupId, artifactId, version"
				}
			]
		},
		{
			"ID": "20230426230643-s6jpr99",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-s6jpr99",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. 创建目录"
				}
			]
		},
		{
			"ID": "20230426230643-jp8oube",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-jp8oube",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当项目创建好了之后, IDEA 会帮我们自动创建出一些目录. 形如\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126163122.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126163122.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-3pryacq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-3pryacq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些目录中:"
				}
			]
		},
		{
			"ID": "20230426230643-ijjk1hw",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-ijjk1hw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-q8q7hka",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-q8q7hka",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-itctpx5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-itctpx5",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "src 表示源代码所在的目录"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-1qfaluh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-1qfaluh",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-j9jpf9o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-j9jpf9o",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "main/java 表示源代码的根目录. 后续创建 .java 文件就放到这个目录中."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-j8hrin8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-j8hrin8",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-wi0jbk3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-wi0jbk3",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "main/resources 表示项目的一些资源文件所在的目录. 此处暂时不关注."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-dx8xmdw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-dx8xmdw",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-cgtoxpy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-cgtoxpy",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "test/java 表示测试代码的根目录. 此处暂时不关注."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-cgffzv8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-cgffzv8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这些目录还不够, 我们还需要创建一些新的目录/文件."
				}
			]
		},
		{
			"ID": "20230426230643-kuzp8m1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-kuzp8m1",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1) 创建 webapp 目录"
				},
				{
					"Type": "NodeText",
					"Data": "\n在 main 目录下, 和 java 目录并列, 创建一个 webapp 目录 (注意, 不是 webapps).\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126163238.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126163238.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-e13vuxo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-e13vuxo",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2) 创建 web.xml"
				},
				{
					"Type": "NodeText",
					"Data": "\n然后在 webapp 目录内部创建一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "WEB-INF"
				},
				{
					"Type": "NodeText",
					"Data": " 目录, 并创建一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "web.xml"
				},
				{
					"Type": "NodeText",
					"Data": " 文件\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126163350.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126163350.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-j5egybr",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-j5egybr",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-sqca9f1",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-sqca9f1",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意单词拼写."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-yqud0wk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-yqud0wk",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "3) 编写 web.xml"
				},
				{
					"Type": "NodeText",
					"Data": "\n往 web.xml 中拷贝以下代码. 具体细节内容我们暂时不关注."
				}
			]
		},
		{
			"ID": "20230426230643-gsgoz56",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-gsgoz56",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c!DOCTYPE web-app PUBLIC\n\"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \n\"http://java.sun.com/dtd/web-app_2_3.dtd\" \u003e\n\n\u003cweb-app\u003e\n\t\u003cdisplay-name\u003eArchetype Created Web Application\u003c/display-name\u003e \n\u003c/web-app\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-obp1lkv",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-obp1lkv",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-84c5jzu",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-84c5jzu",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "webapp 目录就是未来部署到 Tomcat 中的一个重要的目录. 当前我们可以往 webapp 中放一些静态资源, 比如 html , css 等.\n在这个目录中还有一个重要的文件 web.xml. Tomcat 找到这个文件才能正确处理 webapp 中的动态资源."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-wuwqjt8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-wuwqjt8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4. 编写代码"
				}
			]
		},
		{
			"ID": "20230426230643-2neo619",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-2neo619",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 java 目录中创建一个类 HelloServlet, 代码如下:"
				}
			]
		},
		{
			"ID": "20230426230643-l8nnfwf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-l8nnfwf",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import javax.servlet.ServletException;  \nimport javax.servlet.annotation.WebServlet;  \nimport javax.servlet.http.HttpServlet;  \nimport javax.servlet.http.HttpServletRequest;  \nimport javax.servlet.http.HttpServletResponse;  \nimport java.io.IOException;  \n  \n@WebServlet(\"/hello\")\npublic class HelloServlet extends HttpServlet {  \n    @Override  \n    protected void doGet(HttpServletRequest req , HttpServletResponse resp)throws ServletException, IOException {  \n        System.out.println(\"hello\");  \n        resp.getWriter().write(\"hello\");  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-9s3ay82",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-9s3ay82",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-s7lfps3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-s7lfps3",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-nw82h44",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-nw82h44",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建一个类   "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HelloServlet"
								},
								{
									"Type": "NodeText",
									"Data": "​ , 继承自   "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServlet"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-ob1902t",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-ob1902t",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-pqty62y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-pqty62y",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在这个类上方加上   "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@WebServlet(\u0026quot;/hello\u0026quot;)"
								},
								{
									"Type": "NodeText",
									"Data": "​ 注解, 表示 Tomcat 收到的请求中, 路径为的请求才会调用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HelloServlet"
								},
								{
									"Type": "NodeText",
									"Data": "​ 这个类的代码.  (这个路径未包含 Context Path)"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-z8ps1uo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-z8ps1uo",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-18esdej",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-18esdej",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "重写"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "doGet"
								},
								{
									"Type": "NodeText",
									"Data": "​方法. "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "doGet"
								},
								{
									"Type": "NodeText",
									"Data": "​的参数有两个, 分别表示"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "收到的 HTTP 请求"
								},
								{
									"Type": "NodeText",
									"Data": "  和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "要构造的 HTTP 响应"
								},
								{
									"Type": "NodeText",
									"Data": ". 这个方法会在 Tomcat 收到 GET 请求时触发"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-ondfjkr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-ondfjkr",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-a4xk84t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-a4xk84t",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServletRequest"
								},
								{
									"Type": "NodeText",
									"Data": "​ 表示 HTTP 请求. Tomcat 按照 HTTP 请求的格式把 字符串 格式的请求转成了一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServletRequest"
								},
								{
									"Type": "NodeText",
									"Data": "​ 对象. 后续想获取请求中的信息(方法, url, header, body 等) 都是通过这个对象来获取."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-t3nslvn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-t3nslvn",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-0y1hq9h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-0y1hq9h",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServletResponse"
								},
								{
									"Type": "NodeText",
									"Data": "​ 表示 HTTP 响应. 代码中把响应对象构造好(构造响应的状态码, header,body 等)"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-077doo6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-077doo6",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-w1fac10",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-w1fac10",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "resp.getWriter()"
								},
								{
									"Type": "NodeText",
									"Data": "​ 会获取到一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "流对象"
								},
								{
									"Type": "NodeText",
									"Data": ", 通过这个流对象就可以写入一些数据, 写入的数据会被构造成一个 HTTP 响应的 body 部分, Tomcat 会把整个响应转成字符串, 通过 socket 写回给浏览器."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-eq0quti",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-eq0quti",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-1wkpru1",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-1wkpru1",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "这个代码虽然只有寥寥几行, 但是包含的信息量是巨大的."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-lel01oo",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230426230643-lel01oo",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-zhzgsa6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230426230643-zhzgsa6",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-hpjk4ts",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-hpjk4ts",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们的代码不是通过 main 方法作为入口了. main 方法已经被包含在 Tomcat 里, 我们写的代码会被Tomcat 在合适的时机调用起来."
								}
							]
						},
						{
							"ID": "20230426230643-lp2zw24",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230426230643-lp2zw24",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-nfzmmja",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-nfzmmja",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-sby1y9y",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-sby1y9y",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "此时我们写的代码并不是一个完整的程序, 而是 Tomcat 这个程序的一小部分逻辑."
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-cruvk6k",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230426230643-cruvk6k",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-d3dranv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-d3dranv",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们随便写个类都能被 Tomcat 调用嘛? 满足啥样条件才能被调用呢?\n主要满足三个条件:\na) 创建的类需要继承自 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServlet"
								},
								{
									"Type": "NodeText",
									"Data": "​\nb) 这个类需要使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@WebServlet"
								},
								{
									"Type": "NodeText",
									"Data": "​ 注解关联上一个 HTTP 的路径\nc) 这个类需要实现 doXXX 方法.\n当这三个条件都满足之后, Tomcat 就可以找到这个类, 并且在合适的时机进行调用."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-lzs0zuj",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-lzs0zuj",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5. 打包程序"
				}
			]
		},
		{
			"ID": "20230426230643-klju82m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-klju82m",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用 maven 进行打包. 打开 maven 窗口 (一般在 IDEA 右侧就可以看到 Maven 窗口, 如果看不到的话,\n可以通过  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "菜单 -\u0026gt; View -\u0026gt; Tool Window -\u0026gt; Maven 打开"
				},
				{
					"Type": "NodeText",
					"Data": ")"
				}
			]
		},
		{
			"ID": "20230426230643-fvpg0hv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-fvpg0hv",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后展开 Lifecycle , 双击 package 即可进行打包.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126165144.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126165144.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-3q8p4po",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-3q8p4po",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果比较顺利的话, 能够看到 SUCCESS 这样的字样.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126165156.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126165156.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-vcrjkxa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-vcrjkxa",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果代码/配置/环境存在问题, 可能会提示 BUILD FAILED, 可以根据具体提示的错误信息具体解决.\n打包成功后, 可以看到在 target 目录下, 生成了一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "jar"
				},
				{
					"Type": "NodeText",
					"Data": "​ 包.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126165249.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126165249.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-4oahla8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-4oahla8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这样的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "jar"
				},
				{
					"Type": "NodeText",
					"Data": "​ 包并不是我们需要的, Tomcat 需要识别的是另外一种 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "war"
				},
				{
					"Type": "NodeText",
					"Data": "​ 包格式.\n另外这个 jar 包的名字太复杂了, 我们也希望这个名字能更简单一点."
				}
			]
		},
		{
			"ID": "20230426230643-k7t2nvl",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-k7t2nvl",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-cphrcox",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-cphrcox",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark",
							"TextMarkTextContent": "war 包和 jar 包的区别"
						}
					]
				},
				{
					"ID": "20230426230643-8f3c9uf",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230426230643-8f3c9uf",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-wqi7w7b",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-wqi7w7b",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-4jovcwh",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-4jovcwh",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "jar 包是普通的 java 程序打包的结果. 里面会包含一些 .class 文件."
										}
									]
								}
							]
						},
						{
							"ID": "20230426230643-p5m6fdo",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-p5m6fdo",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-708fvaz",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-708fvaz",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "war 包是 java web 的程序, 里面除了会包含 .class 文件之外, 还会包含 HTML, CSS, JavaScript, 图片, 以及其他的 jar 包. 打成 war 包格式才能被 Tomcat 识别."
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-xeoib1l",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-xeoib1l",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-fx6gc1x",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-fx6gc1x",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "​"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "ServletHelloWorld-1.0-SNAPSHOT.jar"
						},
						{
							"Type": "NodeText",
							"Data": "​    的由来\n这个名字来源于\n​"
						},
						{
							"Type": "NodeImage",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeBang"
								},
								{
									"Type": "NodeOpenBracket"
								},
								{
									"Type": "NodeLinkText",
									"Data": "Pasted image 20221126165449.png"
								},
								{
									"Type": "NodeCloseBracket"
								},
								{
									"Type": "NodeOpenParen"
								},
								{
									"Type": "NodeLinkDest",
									"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126165449.png"
								},
								{
									"Type": "NodeCloseParen"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "\n相当于把 artifactId 和 version 拼接起来了."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-puxjig2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-puxjig2",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "pom.xml"
				},
				{
					"Type": "NodeText",
					"Data": " 中新增一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "packing"
				},
				{
					"Type": "NodeText",
					"Data": "​ 标签, 表示打包的方式是打一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "war"
				},
				{
					"Type": "NodeText",
					"Data": "​ 包."
				}
			]
		},
		{
			"ID": "20230426230643-fune6na",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-fune6na",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cpackaging\u003ewar\u003c/packaging\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-c7yyyg1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-c7yyyg1",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "pom.xml"
				},
				{
					"Type": "NodeText",
					"Data": " 中再新增一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "build"
				},
				{
					"Type": "NodeText",
					"Data": "​ 标签, 内置一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "finalName"
				},
				{
					"Type": "NodeText",
					"Data": "​ 标签, 表示打出的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "war"
				},
				{
					"Type": "NodeText",
					"Data": "​ 包的名字是 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HelloServlet"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-22u4tlf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-22u4tlf",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cbuild\u003e\n    \u003cfinalName\u003eServletHelloWorld\u003c/finalName\u003e \n\u003c/build\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-ow8uon9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ow8uon9",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "完整的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "pom.xml"
				},
				{
					"Type": "NodeText",
					"Data": " 形如"
				}
			]
		},
		{
			"ID": "20230426230643-5pxug4b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-5pxug4b",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e  \n\u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\"  \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e  \n    \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e  \n  \n    \u003cgroupId\u003eorg.example\u003c/groupId\u003e  \n    \u003cartifactId\u003eServletHelloWorld\u003c/artifactId\u003e  \n    \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e  \n  \n    \u003cproperties\u003e    \n\t    \u003cmaven.compiler.source\u003e8\u003c/maven.compiler.source\u003e  \n        \u003cmaven.compiler.target\u003e8\u003c/maven.compiler.target\u003e  \n    \u003c/properties\u003e  \n    \u003cdependencies\u003e    \n\t    \u003cdependency\u003e        \n\t\t    \u003cgroupId\u003ejavax.servlet\u003c/groupId\u003e  \n            \u003cartifactId\u003ejavax.servlet-api\u003c/artifactId\u003e  \n            \u003cversion\u003e3.1.0\u003c/version\u003e  \n            \u003cscope\u003eprovided\u003c/scope\u003e  \n        \u003c/dependency\u003e  \n    \u003c/dependencies\u003e    \n  \n    \u003cpackaging\u003ewar\u003c/packaging\u003e  \n    \u003cbuild\u003e    \n\t    \u003cfinalName\u003eServletHelloWorld\u003c/finalName\u003e  \n    \u003c/build\u003e\n\u003c/project\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-voeij9o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-voeij9o",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重新使用 maven 打包, 可以看到生成的新的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "war"
				},
				{
					"Type": "NodeText",
					"Data": "​ 包的结果.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126170035.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126170035.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-js966o9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-js966o9",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "6. 部署程序"
				}
			]
		},
		{
			"ID": "20230426230643-43myedz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-43myedz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "把 war 包拷贝到 Tomcat 的 webapps 目录下."
				}
			]
		},
		{
			"ID": "20230426230643-vp9swb4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-vp9swb4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "启动 Tomcat , Tomcat 就会自动把 war 包解压缩.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126170345.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126170345.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-74ap6xj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-74ap6xj",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126170413.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126170413.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-e3bqgcw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-e3bqgcw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "看到这个日志说明 Tomcat 已经正确识别了 ServletHelloWorld 这个 webapp."
				}
			]
		},
		{
			"ID": "20230426230643-3jk426k",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-3jk426k",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "7. 验证程序"
				}
			]
		},
		{
			"ID": "20230426230643-q8axgei",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-q8axgei",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时通过浏览器访问   http://127.0.0.1:8080/ServletHelloWorld/hello"
				}
			]
		},
		{
			"ID": "20230426230643-9li7uqm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-9li7uqm",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "就可以看到结果了.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126170433.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126170433.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-lr7vtoo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-lr7vtoo",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意"
				},
				{
					"Type": "NodeText",
					"Data": ": URL 中的 PATH 分成两个部分, 其中  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": " HelloServlet"
				},
				{
					"Type": "NodeText",
					"Data": "​ 为 Context Path,"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "hello"
				},
				{
					"Type": "NodeText",
					"Data": "​ 为Servlet Path\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126170549.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126170549.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-aui5nxh",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230426230643-aui5nxh",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "更方便的部署方式"
				}
			]
		},
		{
			"ID": "20230426230643-rf6pznb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-rf6pznb",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "手动拷贝 war 包到 Tomcat 的过程比较麻烦. 我们还有更方便的办法."
				}
			]
		},
		{
			"ID": "20230426230643-kf0zewz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-kf0zewz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此处我们使用 IDEA 中的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Smart Tomcat 插件"
				},
				{
					"Type": "NodeText",
					"Data": "完成这个工作."
				}
			]
		},
		{
			"ID": "20230426230643-6b356j2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-6b356j2",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "安装 Smart Tomcat 插件"
				}
			]
		},
		{
			"ID": "20230426230643-gllpy4j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-gllpy4j",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1) 菜单 -\u0026gt; 文件 -\u0026gt; Settings"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126183224.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126183224.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-zqb2fs6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-zqb2fs6",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2) 选择 Plugins, 选择 Marketplace, 搜索 \u0026quot;tomcat\u0026quot;, 点击 \u0026quot;Install\u0026quot;."
				},
				{
					"Type": "NodeText",
					"Data": "\n![[Pasted image 20221126183325.png]]"
				}
			]
		},
		{
			"ID": "20230426230643-v04bs9s",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-v04bs9s",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-9qs6qni",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-9qs6qni",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意: 安装过程必须要联网."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-07wnss9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-07wnss9",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "3) 安装完毕之后, 会提示 \u0026quot;重启 IDEA\u0026quot;"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126183358.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126183358.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-fdwarj1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-fdwarj1",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "配置 Smart Tomcat 插件"
				}
			]
		},
		{
			"ID": "20230426230643-hw983uf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-hw983uf",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1) 点击右上角的 \u0026quot;Add Configuration\u0026quot;"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Uploading file...yal5d"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-kwsfdcq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-kwsfdcq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2) 选择左侧的 \u0026quot;Smart Tomcat\u0026quot;"
				},
				{
					"Type": "NodeText",
					"Data": "\n![[Pasted image 20221126184114.png]]"
				}
			]
		},
		{
			"ID": "20230426230643-2zfsu3a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-2zfsu3a",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "3) 在   Name 这一栏填写一个名字(可以随便写)"
				},
				{
					"Type": "NodeText",
					"Data": "\n在 Tomcat Server 这一栏选择 Tomcat 所在的目录. 其他的选项不必做出修改.\n![[Pasted image 20221126184227.png]]"
				}
			]
		},
		{
			"ID": "20230426230643-dlksoq2",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-dlksoq2",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-8xasfj3",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-8xasfj3",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "其中   Context Path 默认填写的值是项目名称.\n![[Pasted image 20221126184521.png]]\n这会影响到后面咱们的访问页面."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-nextskv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-nextskv",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "4) 点击 OK 之后, 右上角变成了"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126183848.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-nddj0kz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-nddj0kz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "点击绿色的三角号, IDEA 就会自动进行编译, 部署, 启动 Tomcat 的过程.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126184623.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126184623.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-j24ov7d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-j24ov7d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时 Tomcat 日志就会输出在 IDEA 的控制台中, 可以看到现在就"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "不再乱码"
				},
				{
					"Type": "NodeText",
					"Data": "了."
				}
			]
		},
		{
			"ID": "20230426230643-b5pgdhk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-b5pgdhk",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "5) 访问页面."
				},
				{
					"Type": "NodeText",
					"Data": "\n在浏览器中使用 http://127.0.0.1:8080/ServletHelloWorld/hello 访问页面.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126184824.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126184824.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-0a8sr6d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-0a8sr6d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意路径的对应关系.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126184841.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126184841.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-dbcq9in",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-dbcq9in",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-qyrb6jp",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-qyrb6jp",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "使用 Smart Tomcat 部署的时候, 我们发现 Tomcat 的 webapps 内部并没有被拷贝一个 war 包, 也没有看到解压缩的内容.\nSmart Tomcat 相当于是在 Tomcat 启动的时候直接引用了项目中的 webapp 和 target 目录.\n​"
						},
						{
							"Type": "NodeImage",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeBang"
								},
								{
									"Type": "NodeOpenBracket"
								},
								{
									"Type": "NodeLinkText",
									"Data": "Pasted image 20221126184934.png"
								},
								{
									"Type": "NodeCloseBracket"
								},
								{
									"Type": "NodeOpenParen"
								},
								{
									"Type": "NodeLinkDest",
									"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126184934.png"
								},
								{
									"Type": "NodeCloseParen"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "​"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-73nd7c5",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230426230643-73nd7c5",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "访问出错怎么办?"
				}
			]
		},
		{
			"ID": "20230426230643-eluzgfz",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-eluzgfz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "出现 404"
				}
			]
		},
		{
			"ID": "20230426230643-5q4t6wq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-5q4t6wq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "404 表示用户访问的资源不存在. 大概率是 URL 的路径写的不正确."
				}
			]
		},
		{
			"ID": "20230426230643-amj039h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-amj039h",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "错误实例1"
				},
				{
					"Type": "NodeText",
					"Data": ": 少写了 Context Path\n通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/hello"
				},
				{
					"Type": "NodeText",
					"Data": "​ 访问服务器\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126185052.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126185052.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-zqu7aap",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-zqu7aap",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "错误实例2"
				},
				{
					"Type": "NodeText",
					"Data": ": 少写了 Servlet Path\n通过   /ServletHelloWorld 访问服务器\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126185148.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126185148.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-enghrct",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-enghrct",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "错误实例3"
				},
				{
					"Type": "NodeText",
					"Data": ": Servlet Path 写的和 URL 不匹配\n修改 @WebServlet 注解的路径\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126185218.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126185218.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-o9systa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-o9systa",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重启 Tomcat 服务器."
				}
			]
		},
		{
			"ID": "20230426230643-l4jyeww",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-l4jyeww",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-9iqhz7f",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-9iqhz7f",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "URL 中的路径写作 \""
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "/hello"
						},
						{
							"Type": "NodeText",
							"Data": "​\" , 而代码中写作的 Servlet Path 为 \""
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "/helloServlet"
						},
						{
							"Type": "NodeText",
							"Data": "​\", 两者不匹配."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-nxpd3fm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-nxpd3fm",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "错误实例4"
				},
				{
					"Type": "NodeText",
					"Data": ": web.xml 写错了\n清除 web.xml 中的内容\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126185331.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126185331.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-0ufeul5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-0ufeul5",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重启 Tomcat 服务器.\n通过浏览器访问 URL, 可以看到:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126185402.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126185402.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-cz91eir",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-cz91eir",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-oobuuls",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-oobuuls",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在 Tomcat 启动的时候也有相关的错误提示\n​"
						},
						{
							"Type": "NodeImage",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeBang"
								},
								{
									"Type": "NodeOpenBracket"
								},
								{
									"Type": "NodeLinkText",
									"Data": "Pasted image 20221126185418.png"
								},
								{
									"Type": "NodeCloseBracket"
								},
								{
									"Type": "NodeOpenParen"
								},
								{
									"Type": "NodeLinkDest",
									"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126185418.png"
								},
								{
									"Type": "NodeCloseParen"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "​"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-769ljpg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-769ljpg",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "出现 405"
				}
			]
		},
		{
			"ID": "20230426230643-9o92n2f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-9o92n2f",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "405 表示对应的 HTTP 请求方法没有实现."
				}
			]
		},
		{
			"ID": "20230426230643-9o8ukwk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-9o8ukwk",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "错误实例: 没有实现 doGet 方法."
				}
			]
		},
		{
			"ID": "20230426230643-86wr6j5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-86wr6j5",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/hello\")\npublic class HelloServlet extends HttpServlet { \n\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-q2ug8vb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-q2ug8vb",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重启 Tomcat 服务器.\n在浏览器中访问, 可以看到:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126185616.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126185616.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-aawvz9b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-aawvz9b",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在浏览器地址栏直接输入 URL , 会发送一个 HTTP "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "GET"
				},
				{
					"Type": "NodeText",
					"Data": " 请求.\n此时就会根据   "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/ServletHelloWorld/hello"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这个路径找到   "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HelloServlet"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这个类. 并且尝试调用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HelloServlet"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "doGet"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法.\n但是如果没有实现 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "doGet"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法, 就会出现上述现象."
				}
			]
		},
		{
			"ID": "20230426230643-7bpyd4t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-7bpyd4t",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "出现 500"
				}
			]
		},
		{
			"ID": "20230426230643-r6fxla0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-r6fxla0",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "往往是 Servlet 代码中抛出异常导致的."
				}
			]
		},
		{
			"ID": "20230426230643-terb431",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-terb431",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "错误实例:"
				},
				{
					"Type": "NodeText",
					"Data": "\n修改代码"
				}
			]
		},
		{
			"ID": "20230426230643-96z17l8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-96z17l8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/hello\")\npublic class HelloServlet extends HttpServlet { \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String s = null;\n        resp.getWriter().write(s.length()); \n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-uss5no9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-uss5no9",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重启 Tomcat 服务器.\n重新访问页面, 可以看到:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126185815.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126185815.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-8eoeeuh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-8eoeeuh",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在页面上已经有具体的异常调用栈."
				}
			]
		},
		{
			"ID": "20230426230643-l6zris4",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-l6zris4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-3nvlbq6",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-3nvlbq6",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "异常信息里已经提示了出现异常的代码是 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "HelloServlet.java"
						},
						{
							"Type": "NodeText",
							"Data": "​ 的第 13 行."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-84p8rx6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-84p8rx6",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "resp.getWriter().write(s.length());\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-5db63xn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-5db63xn",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "仔细检查这里的代码就可以看到空指针异常."
				}
			]
		},
		{
			"ID": "20230426230643-sfzb2bw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-sfzb2bw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "出现 \"空白页面\""
				}
			]
		},
		{
			"ID": "20230426230643-n01df27",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-n01df27",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "错误实例:\n修改代码, 去掉 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "resp.getWritter().write()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 操作."
				}
			]
		},
		{
			"ID": "20230426230643-0n1nurz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-0n1nurz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/hello\")\npublic class HelloServlet extends HttpServlet { \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"hello\"); \n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-dp7sqvq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-dp7sqvq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重启服务器,\n访问服务器, 可以看到一个空白页面:\n!["
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126190028.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126190028.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-fifcaj1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-fifcaj1",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抓包可以看到, 响应 body 中的内容就是 \"空数据\"\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126190041.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126190041.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-799okrn",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-799okrn",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "出现 \"无法访问此网站\""
				}
			]
		},
		{
			"ID": "20230426230643-fnpuf8p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-fnpuf8p",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般是 Tomcat 启动就失败了.\n错误实例: Servlet Path 写错了.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126190101.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126190101.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-ihed0go",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-ihed0go",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-nbbj1n8",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-nbbj1n8",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "应该写作 \""
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "/hello"
						},
						{
							"Type": "NodeText",
							"Data": "​\", Tomcat 在启动的时候已经提示了相关的错误.\nTomcat 启动的日志里面报错信息可能比较多, 需要耐心观察, 找到关键的提示."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-l4yyst6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-l4yyst6",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126190150.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126190150.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-5iy81x8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-5iy81x8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "看到的现象:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221126190209.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221126190209.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-wuk2hat",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-wuk2hat",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "小结"
				}
			]
		},
		{
			"ID": "20230426230643-6ywtk63",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-6ywtk63",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "初学 Servlet, 遇到的这类问题会非常多. 我们不光要学习 Servlet 代码的基本写法, 也要学习"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "排查错误的思路"
				},
				{
					"Type": "NodeText",
					"Data": "."
				}
			]
		},
		{
			"ID": "20230426230643-9ew2ubw",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-9ew2ubw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-68d1yob",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-68d1yob",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "程序猿调试 BUG 如同医生诊病.\n一个有经验的程序猿和一个新手程序猿相比, 最大的优势往往不是代码写的多好, 而是调试效率有多高. 同一个问题可能新手花了几天都无法解决的, 但是有经验的程序猿可能几分钟就搞定了."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-7pw2cmi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-7pw2cmi",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "熟悉 HTTP 协议能够让我们调试问题事半功倍."
				}
			]
		},
		{
			"ID": "20230426230643-2aak0r1",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-2aak0r1",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-137pce6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-137pce6",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-j9kyjzg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-j9kyjzg",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "4xx 的状态码表示路径不存在, 往往需要检查 URL 是否正确, 和代码中设定的 Context Path 以及 Servlet Path 是否一致."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-0r44ezz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-0r44ezz",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-oq78qci",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-oq78qci",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "5xx 的状态码表示服务器出现错误, 往往需要观察页面提示的内容和 Tomcat 自身的日志, 观察是否存在报错."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-mu4zy65",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-mu4zy65",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-j3r56am",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-j3r56am",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "出现连接失败往往意味着 Tomcat 没有正确启动, 也需要观察 Tomcat 的自身日志是否有错误提示."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-ozbmw5y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-ozbmw5y",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-3jn1276",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-3jn1276",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "空白页面这种情况则需要我们使用抓包工具来分析 HTTP 请求响应的具体交互过程."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-p4lve1o",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-p4lve1o",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-csg02uk",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-csg02uk",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "观察日志是调试程序的重要途径. Tomcat 的日志往往很多, 需要同学们耐心阅读, 经常阅读, 熟练了就能更快速的找到问题了."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-s19dp43",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230426230643-s19dp43",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Servlet 运行原理"
				}
			]
		},
		{
			"ID": "20230426230643-no4w2ev",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-no4w2ev",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Servlet 的代码中我们并没有写 main 方法, 那么对应的 doGet 代码是如何被调用的呢? 响应又是如何\n返回给浏览器的?"
				}
			]
		},
		{
			"ID": "20230426230643-cou4myy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-cou4myy",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Tomcat 的定位"
				}
			]
		},
		{
			"ID": "20230426230643-cvm70so",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-cvm70so",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们自己的实现是在 Tomcat 基础上运行的。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127151649.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127151649.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-6yqb8ql",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-6yqb8ql",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当浏览器给服务器发送请求的时候, Tomcat 作为 HTTP 服务器, 就可以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "接收到这个请求"
				},
				{
					"Type": "NodeText",
					"Data": ".\nHTTP 协议作为一个应用层协议, 需要底层协议栈来支持工作. 如下图所示:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127184912.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127184912.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-mz1y4v6",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-mz1y4v6",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-nac0oin",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-nac0oin",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Tomcat其实是一个应用程序.运行在用户态的普通进程(Tomcat其实也是一个Java进程)\n用户写的代码(根据请求计算相应)，通过Servlet和Tomcat进行交互\nTomcat进一步的和浏览器之间的网络传输,仍然是走的咱们之前学过的网络原理中的那一套(封装和分用)"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-8ls0bfu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-8ls0bfu",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "更详细的交互过程可以参考下图:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127185055.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127185055.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-abde7xr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-abde7xr",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1) 接收请求"
				},
				{
					"Type": "NodeText",
					"Data": ":"
				}
			]
		},
		{
			"ID": "20230426230643-kg7ei27",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-kg7ei27",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-f42afjs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-f42afjs",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-awypbn0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-awypbn0",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用户在浏览器输入一个 URL, 此时浏览器就会构造一个 HTTP 请求."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-b1bakbg",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-b1bakbg",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-gcouq6z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-gcouq6z",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这个 HTTP 请求会经过网络协议栈逐层进行  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "封装"
								},
								{
									"Type": "NodeText",
									"Data": "  成二进制的 bit 流, 最终通过物理层的硬件设备转换成光信号/电信号传输出去."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-lgbl5hq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-lgbl5hq",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-iszlct4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-iszlct4",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这些承载信息的光信号/电信号通过互联网上的一系列网络设备, 最终到达目标主机(这个过程也需要网络层和数据链路层参与)."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-8ds826g",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-8ds826g",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-cz88ync",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-cz88ync",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "服务器主机收到这些光信号/电信号, 又会通过网络协议栈逐层进行  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "分用"
								},
								{
									"Type": "NodeText",
									"Data": ", 层层解析, 最终还原成HTTP 请求. 并交给 Tomcat 进程进行处理(根据端口号确定进程)"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-io7jqw6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-io7jqw6",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-l0um8os",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-l0um8os",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tomcat 通过 Socket 读取到这个请求(一个字符串), 并按照 HTTP 请求的格式来解析这个请求, "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "根据请求中的 Context Path 确定一个 webapp, 再通过 Servlet Path 确定一个具体的  类"
								},
								{
									"Type": "NodeText",
									"Data": ". 再根据当前请求的方法 ("
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "GET"
								},
								{
									"Type": "NodeText",
									"Data": "​/"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "POST"
								},
								{
									"Type": "NodeText",
									"Data": "​/...), 决定调用这个类的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "doGet"
								},
								{
									"Type": "NodeText",
									"Data": "​ 或者 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "doPost"
								},
								{
									"Type": "NodeText",
									"Data": "​ 等方法. 此时我们的代码中的"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "doGet / doPost"
								},
								{
									"Type": "NodeText",
									"Data": "​ 方法的第一个参数 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServletRequest"
								},
								{
									"Type": "NodeText",
									"Data": "​ 就包含了这个 HTTP 请求的详细信息."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-v2f99ap",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-v2f99ap",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2) 根据请求计算响应:"
				}
			]
		},
		{
			"ID": "20230426230643-lrckvho",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-lrckvho",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-tx5u4ey",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-tx5u4ey",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-fgq74s3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-fgq74s3",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在我们的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "doGet / doPost"
								},
								{
									"Type": "NodeText",
									"Data": "​ 方法中, 就执行到了我们自己的代码. 我们自己的代码会根据请求中的一些信息, 来给 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServletResponse"
								},
								{
									"Type": "NodeText",
									"Data": "​ 对象设置一些属性. 例如"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "状态码"
								},
								{
									"Type": "NodeText",
									"Data": ", "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "header"
								},
								{
									"Type": "NodeText",
									"Data": ", "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "body"
								},
								{
									"Type": "NodeText",
									"Data": " 等."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-1f756tp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-1f756tp",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "3) 返回响应:"
				}
			]
		},
		{
			"ID": "20230426230643-o6qs9a6",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-o6qs9a6",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-f5ngj1s",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-f5ngj1s",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-xvvqj9e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-xvvqj9e",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "我们的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "doGet / doPost"
								},
								{
									"Type": "NodeText",
									"Data": "​ 执行完毕后, Tomcat 就会自动把 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServletResponse"
								},
								{
									"Type": "NodeText",
									"Data": "​ 这个我们刚设置好的对象转换成一个符合 HTTP 协议的字符串, 通过 Socket 把这个响应发送出去."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-dk94lir",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-dk94lir",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-ums60xq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-ums60xq",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "此时响应数据在服务器的主机上通过网络协议栈层层  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "封装"
								},
								{
									"Type": "NodeText",
									"Data": ", 最终又得到一个二进制的 bit 流, 通过物理层硬件设备转换成光信号/电信号传输出去."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-tl1dxdd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-tl1dxdd",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-h373nvc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-h373nvc",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这些承载信息的光信号/电信号通过互联网上的一系列网络设备, 最终到达浏览器所在的主机(这个过程也需要网络层和数据链路层参与)."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-1ktx0a3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-1ktx0a3",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-xg8el6r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-xg8el6r",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "浏览器主机收到这些光信号/电信号, 又会通过网络协议栈逐层进行  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "分用"
								},
								{
									"Type": "NodeText",
									"Data": ", 层层解析, 最终还原成HTTP 响应, 并交给浏览器处理."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-78mvz0f",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-78mvz0f",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-lxu2igy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-lxu2igy",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "浏览器也通过 Socket 读到这个响应(一个字符串), 按照 HTTP 响应的格式来解析这个响应. 并且把body 中的数据按照一定的格式显示在浏览器的界面上."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-rnis8dh",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-rnis8dh",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-fhdp9bv",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-fhdp9bv",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark",
							"TextMarkTextContent": "浏览器和服务器之间交互数据,这个过程中是否会涉及到TCP三次握手，确认应答...，是否会涉及到IP的分包组包.…是否会涉及到以太网的MTU 呢..."
						},
						{
							"Type": "NodeText",
							"Data": "\n都是会的！"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-xtqcr3e",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-xtqcr3e",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Tomcat 的伪代码"
				}
			]
		},
		{
			"ID": "20230426230643-9xukmjn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-9xukmjn",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面的代码通过 \"伪代码\" 的形式描述了 Tomcat 初始化/处理请求  两部分核心逻辑."
				}
			]
		},
		{
			"ID": "20230426230643-tn3cjk5",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-tn3cjk5",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-1nfzi66",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-1nfzi66",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "所谓 \"伪代码\", 并不是一些语法严谨, 功能完备的代码, 只是通过这种形式来大概表达某种逻辑."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-nw0p2cj",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-nw0p2cj",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1. Tomcat 初始化流程"
				}
			]
		},
		{
			"ID": "20230426230643-hsrw3ai",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-hsrw3ai",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Tomcat {\n\t// 用来存储所有的 Servlet 对象\n\tprivate List\u003cServlet\u003e instanceList = new ArrayList\u003c\u003e(); \n\tpublic void start() {\n        // 根据约定，读取 WEB-INF/web.xml 配置文件; \n        // 并解析被 @WebServlet 注解修饰的类\n        \n        // 假定这个数组里就包含了我们解析到的所有被 @WebServlet 注解修饰的类. \n        Class\u003cServlet\u003e[] allServletClasses = ...;\n        \n        // 这里要做的的是实例化出所有的 Servlet 对象出来; \n        for (Class\u003cServlet\u003e cls : allServletClasses) { \n            // 这里是利用 java 中的反射特性做的\n            // 实际上还得涉及一个类的加载问题，因为我们的类字节码文件，是按照约定的 \n            // 方式（全部在 WEB-INF/classes 文件夹下）存放的，所以 tomcat 内部是 \n            // 实现了一个自定义的类加载器(ClassLoader)用来负责这部分工作。\n        \n\t\t\tServlet ins = cls.newInstance(); \n            instanceList.add(ins);\n        }\n        \n        // 调用每个 Servlet 对象的 init() 方法，这个方法在对象的生命中只会被调用这一次; \n        for (Servlet ins : instanceList) {\n            ins.init(); \n        }\n        \n        // 利用我们之前学过的知识，启动一个 HTTP 服务器 \n        // 并用线程池的方式分别处理每一个 Request\n        ServerSocket serverSocket = new ServerSocket(8080);\n        // 实际上 tomcat 不是用的固定线程池，这里只是为了说明情况\n        ExecuteService pool = Executors.newFixedThreadPool(100); \n        \n        while (true) {\n            Socket socket = ServerSocket.accept();\n            // 每个请求都是用一个线程独立支持，这里体现了我们 Servlet 是运行在多线程环境下的 \n            pool.execute(new Runnable() {\n               doHttpRequest(socket); \n            });\n        }\n        \n        // 调用每个 Servlet 对象的 destroy() 方法，这个方法在对象的生命中只会被调用这一次; \n        for (Servlet ins : instanceList) {\n            ins.destroy(); \n        }\n    }\n    \n    public static void main(String[] args) { \n        new Tomcat().start();\n    } \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-260ndg4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-260ndg4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1) 让Tomcat先从指定的目录中找到所有要加载的 Servlet类"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127190222.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127190222.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-m74yl9c",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-m74yl9c",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2) 根据刚才类加载的结果,给这些类创建Servlet 实例"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127190315.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127190315.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-dn5niex",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-dn5niex",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "3) 实例创建好之后,就可以调用当前Servlet 实例的init方法了"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127190437.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127190437.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-48u6r2m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-48u6r2m",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "4) 创建TCPsocket,监听8080端口,等待有客户端来连接"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127190544.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127190544.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-04yhv1h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-04yhv1h",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "5) 如果循环退出了，Tomcat 也要结束了.就会依次循环调用每个Servlet的destroy方法"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127190737.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127190737.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-ljqza01",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ljqza01",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "小结"
				}
			]
		},
		{
			"ID": "20230426230643-seauk8w",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-seauk8w",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-yzfxmzs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-yzfxmzs",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-uw1yl8u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-uw1yl8u",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tomcat 的代码中 内置了 main 方法. 当我们启动 Tomcat 的时候, 就是从 Tomcat 的 main 方法开始执行的."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-s5fifn3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-s5fifn3",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-ucco2p8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-ucco2p8",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "被 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@WebServlet"
								},
								{
									"Type": "NodeText",
									"Data": "​注解修饰的类会在 Tomcat 启动的时候就被获取到, 并集中管理."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-zbwmrt5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-zbwmrt5",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-2j692sc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-2j692sc",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tomcat 通过  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "反射"
								},
								{
									"Type": "NodeText",
									"Data": "  这样的语法机制来创建被   "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@WebServlet"
								},
								{
									"Type": "NodeText",
									"Data": "​ 注解修饰的类的实例."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-9l2juft",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-9l2juft",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-25v8tj8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-25v8tj8",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这些实例被创建完了之后, 会点调用其中的 init 方法进行初始化. (这个方法是 HttpServlet 自带的, 我们自己写的类可以重写 init)"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-drverci",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-drverci",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-2jakh16",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-2jakh16",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这些实例被销毁之前, 会调用其中的 destory 方法进行收尾工作. (这个方法是 HttpServlet 自带的, 我们自己写的类可以重写 destory)"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-qj1jvc8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-qj1jvc8",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-svdsjkt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-svdsjkt",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tomcat 内部也是通过 Socket API 进行网络通信."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-anio7kt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-anio7kt",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-otw989o",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-otw989o",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tomcat 为了能同时相应多个 HTTP 请求, 采取了多线程的方式实现. 因此 Servlet 是运行在  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "多线程环境"
								},
								{
									"Type": "NodeText",
									"Data": "  下的."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-sve5pa4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-sve5pa4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2. Tomcat 处理请求流程"
				}
			]
		},
		{
			"ID": "20230426230643-0sgt511",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-0sgt511",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Tomcat {\n    void doHttpRequest(Socket socket) {\n        // 参照我们之前学习的 HTTP 服务器类似的原理，进行 HTTP 协议的请求解析，和响应构建 \n        HttpServletRequest req = HttpServletRequest.parse(socket);\n        HttpServletRequest resp = HttpServletRequest.build(socket);\n        \n        // 判断 URL 对应的文件是否可以直接在我们的根路径上找到对应的文件，如果找到，就是静态内容\n        // 直接使用我们学习过的 IO 进行内容输出 \n        if (file.exists()) {\n            // 返回静态内容 \n            return;\n        }\n        // 走到这里的逻辑都是动态内容了\n        \n        // 根据我们在配置中说的，按照 URL -\u003e servlet-name -\u003e Servlet 对象的链条 \n        // 最终找到要处理本次请求的 Servlet 对象\n        Servlet ins = findInstance(req.getURL()); \n        \n        // 调用 Servlet 对象的 service 方法\n        // 这里就会最终调用到我们自己写的 HttpServlet 的子类里的方法了 \n        try {\n\t\t\tins.service(req, resp);\n        } catch (Exception e) {\n            // 返回 500 页面，表示服务器内部错误 \n        }\n    } \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-kfwlvqj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-kfwlvqj",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "小结"
				}
			]
		},
		{
			"ID": "20230426230643-aosihne",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-aosihne",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-2skwnmx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-2skwnmx",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-vx9ca1t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-vx9ca1t",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tomcat 从 Socket 中读到的 HTTP 请求是一个字符串, 然后会按照 HTTP 协议的格式解析成一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServletRequest"
								},
								{
									"Type": "NodeText",
									"Data": "​ 对象."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-ecfhgkb",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-ecfhgkb",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-gasynrc",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-gasynrc",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-lpvv7qw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-lpvv7qw",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tomcat 会根据 URL 中的 path 判定这个请求是请求一个静态资源还是动态资源. 如果是静态资源, 直接找到对应的文件把文件的内容通过 Socket 返回. 如果是动态资源, 才会执行到 Servlet 的相关逻辑."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-7un4et5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-7un4et5",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-c57agot",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-c57agot",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Tomcat 会根据 URL 中的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Context Path"
								},
								{
									"Type": "NodeText",
									"Data": " 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Servlet Path"
								},
								{
									"Type": "NodeText",
									"Data": " 确定要调用哪个 Servlet 实例的 service方法."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-qkss2jn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-qkss2jn",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-8lj1qma",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-8lj1qma",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过 service 方法, 就会进一步调用到我们之前写的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "doGet"
								},
								{
									"Type": "NodeText",
									"Data": " 或者 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "doPost"
								},
								{
									"Type": "NodeText",
									"Data": "\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221127191153.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127191153.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-b7z4ss1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-b7z4ss1",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3. Servlet 的 service 方法的实现"
				}
			]
		},
		{
			"ID": "20230426230643-reol2h9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-reol2h9",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class Servlet {\n    public void service(HttpServletRequest req, HttpServletResponse resp) { \n        String method = req.getMethod();\n        if (method.equals(\"GET\")) { \n            doGet(req, resp);\n        } else if (method.equals(\"POST\")) { \n            doPost(req, resp);\n        } else if (method.equals(\"PUT\")) { \n            doPut(req, resp);\n        } else if (method.equals(\"DELETE\")) { \n            doDelete(req, resp);\n        }\n        ...... \n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-ch1hc8z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ch1hc8z",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "小结"
				}
			]
		},
		{
			"ID": "20230426230643-6nlxlto",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-6nlxlto",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-gqmhcmu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-gqmhcmu",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-7h3788r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-7h3788r",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Servlet 的 service 方法内部会根据当前请求的方法, 决定调用其中的某个 doXXX 方法."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-i537okb",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-i537okb",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-bfgb60q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-bfgb60q",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在调用 doXXX 方法的时候, 就会触发  多态  机制, 从而执行到我们自己写的子类中的 doXXX 方法."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-0jg5a7k",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-0jg5a7k",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-3eozkum",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-3eozkum",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "理解此处的  多态"
						}
					]
				},
				{
					"ID": "20230426230643-su5iy2u",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230426230643-su5iy2u",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-ynrfvqc",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-ynrfvqc",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-3u4pwej",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-3u4pwej",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "我们前面自己写的 HelloServlet 类, 继承自 HttpServlet 类. 而 HttpServlet 又继承自 Servlet. 相当于 HelloServlet 就是 Servlet 的子类."
										}
									]
								}
							]
						},
						{
							"ID": "20230426230643-lvhi06n",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-lvhi06n",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-hob9b7o",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-hob9b7o",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "接下来, 在 Tomcat 启动阶段, Tomcat 已经根据注解的描述, 创建了 HelloServlet 的实例, 然后把这个实例放到了 Servlet 数组中."
										}
									]
								}
							]
						},
						{
							"ID": "20230426230643-m7mftag",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-m7mftag",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-nkyim1o",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-nkyim1o",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "后面我们根据请求的 URL 从数组中获取到了该 HelloServlet 实例, 但是我们是通过   "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "Servlet ins"
										},
										{
											"Type": "NodeText",
											"Data": "​ 这样的父类引用来获取到 HelloServlet 实例的."
										}
									]
								}
							]
						},
						{
							"ID": "20230426230643-6l3hj0x",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-6l3hj0x",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-56quw7t",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-56quw7t",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "最后, 我们通过   "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "ins.doGet()"
										},
										{
											"Type": "NodeText",
											"Data": "​ 这样的代码调用 doGet 的时候, 正是 \"父类引用指向子类对象\", 此时就会触发多态机制, 从而调用到我们之前在 HelloServlet 中所实现的 doGet 方法\n等价代码:"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-6fblipw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-6fblipw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Servlet ins = new HelloServlet(); \nins.doGet(req, resp);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-z64mqy4",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-z64mqy4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总结"
				}
			]
		},
		{
			"ID": "20230426230643-h1phvc0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-h1phvc0",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在讨论到上面这整套流程过程中，涉及到了关于Servlet的关键方法,主要有三个."
				}
			]
		},
		{
			"ID": "20230426230643-2w6oi1q",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-2w6oi1q",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-3z239rz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-3z239rz",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-mcyjyo0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-mcyjyo0",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "init"
								},
								{
									"Type": "NodeText",
									"Data": "​:初始化阶段，对象创建好了之后,就会执行到.用户可以重写这个方法,来执行一些初始化逻辑."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-oftoxjj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-oftoxjj",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-3v81c8f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-3v81c8f",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "service"
								},
								{
									"Type": "NodeText",
									"Data": "​:在处理请求阶段来调用.每次来个请求都要调用一次service"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-zw85025",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-zw85025",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-av2yy51",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-av2yy51",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "destroy"
								},
								{
									"Type": "NodeText",
									"Data": "​:退出主循环, tomcat结束之前会调用,用来释放资源"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-2lwqghy",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230426230643-2lwqghy",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Servlet API 详解"
				}
			]
		},
		{
			"ID": "20230426230643-e1imbzr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-e1imbzr",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里主要掌握 Servlet 提供的三个类："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "HttpServlet"
				},
				{
					"Type": "NodeText",
					"Data": " ，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "HttpServeltRequest"
				},
				{
					"Type": "NodeText",
					"Data": " ， "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "HttpServletResponse"
				}
			]
		},
		{
			"ID": "20230426230643-2opt5h1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-2opt5h1",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HttpServlet"
				}
			]
		},
		{
			"ID": "20230426230643-obahdxf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-obahdxf",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们写 Servlet 代码的时候, 首先第一步就是先创建类, 继承自 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "HttpServlet"
				},
				{
					"Type": "NodeText",
					"Data": ", 并重写其中的某些方法."
				}
			]
		},
		{
			"ID": "20230426230643-wle8lmb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-wle8lmb",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心方法"
				}
			]
		},
		{
			"ID": "20230426230643-g43aa1v",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-g43aa1v",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127192246.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127192246.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-b3j59zo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-b3j59zo",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们实际开发的时候主要重写"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": " doXXX"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法, 很少会重写 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "init / destory / service"
				},
				{
					"Type": "NodeText",
					"Data": "​ ."
				}
			]
		},
		{
			"ID": "20230426230643-togy9mt",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-togy9mt",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-0ksaiti",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-0ksaiti",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "这些方法的调用时机, 就称为 \"Servlet 生命周期\". (也就是描述了一个 Servlet 实例从生到死的过程).\n​"
						},
						{
							"Type": "NodeImage",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeBang"
								},
								{
									"Type": "NodeOpenBracket"
								},
								{
									"Type": "NodeLinkText",
									"Data": "Pasted image 20221127192325.png"
								},
								{
									"Type": "NodeCloseBracket"
								},
								{
									"Type": "NodeOpenParen"
								},
								{
									"Type": "NodeLinkDest",
									"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127192325.png"
								},
								{
									"Type": "NodeCloseParen"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "​"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-0unk9vg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-0unk9vg",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意"
				},
				{
					"Type": "NodeText",
					"Data": ": HttpServlet 的实例只是在程序启动时创建一次. 而不是每次收到 HTTP 请求都重新创建实例."
				}
			]
		},
		{
			"ID": "20230426230643-mm6pgg3",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-mm6pgg3",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例: 处理 GET 请求"
				}
			]
		},
		{
			"ID": "20230426230643-zeh0nc7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-zeh0nc7",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 MethodServlet.java, 创建 doGet 方法"
				}
			]
		},
		{
			"ID": "20230426230643-fm76g9b",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-fm76g9b",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/method\")\npublic class MethodServlet extends HttpServlet { \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) \nthrows ServletException, IOException {\n        resp.getWriter().write(\"GET response\"); \n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-zwc3yfg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-zwc3yfg",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 testMethod.html, 放到 webapp 目录中, 形如\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127194450.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127194450.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-kal2i6s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-kal2i6s",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个 Servlet 程序中可以同时部署静态文件. 静态文件就放到 webapp 目录中即可."
				}
			]
		},
		{
			"ID": "20230426230643-f77m5nw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-f77m5nw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cbutton onclick=\"sendGet()\"\u003e发送 GET 请求\u003c/button\u003e\n\n    \u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003cscript\u003e\n        $.ajax({\n            type: 'get',\n            url: 'method',\n            success: function (body) {\n                console.log(body);\n            }\n        })\n\n        function ajax(args) {\n            var xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = function () {\n                // 0: 请求未初始化\n                // 1: 服务器连接已建立\n                // 2: 请求已接收\n                // 3: 请求处理中\n                // 4: 请求已完成，且响应已就绪\n                if (xhr.readyState == 4) {\n                    args.callback(xhr.responseText, xhr.status)\n                }\n            }\n            xhr.open(args.method, args.url);\n            if (args.contentType) {\n                xhr.setRequestHeader('Content-type', args.contentType);\n            }\n            if (args.body) {\n                xhr.send(args.body);\n            } else {\n                xhr.send();\n            }\n        }\n    \u003c/script\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-xmle221",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-xmle221",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重新部署程序, 使用 URL "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://127.0.0.1:8080/ServletHelloWorld/testMethod.html"
				},
				{
					"Type": "NodeText",
					"Data": "​访问页面.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127194647.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127194647.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-tmlqr0y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-tmlqr0y",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "点击 \"发送 GET 请求\" 按钮, 即可在控制台看到响应内容.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127194702.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127194702.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-fqenmfb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-fqenmfb",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过 Fiddler 抓包, 可以看到"
				}
			]
		},
		{
			"ID": "20230426230643-udecl6d",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-udecl6d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-c63ibjd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-c63ibjd",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-9l572ya",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-9l572ya",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当浏览器中输入 URL 之后, 浏览器先给服务器发送了一个 HTTP GET 请求\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221127194750.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127194750.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-dte0r47",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-dte0r47",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-g1ykty6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-g1ykty6",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当点击 \"发送 GET 请求\" 按钮, 浏览器又通过 ajax 给服务器发送了一个 HTTP GET 请求\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221127194757.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127194757.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-jr9pyua",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-jr9pyua",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-cxl1euu",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-cxl1euu",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意这个 ajax 请求的 URL 路径. 代码中写的 URL"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": " url: 'method'"
						},
						{
							"Type": "NodeText",
							"Data": "​, 为一个相对路径, 最终真实发送的请求的 URL 路径为   "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "/ServletHelloWorld/method"
						},
						{
							"Type": "NodeText",
							"Data": "​"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-60dnc98",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-60dnc98",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于乱码问题"
				}
			]
		},
		{
			"ID": "20230426230643-pvi5599",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-pvi5599",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果我们在响应代码中写入中文, 例如"
				}
			]
		},
		{
			"ID": "20230426230643-hddd2mc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-hddd2mc",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "resp.getWriter().write(\"GET 响应\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-t6kwhn2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-t6kwhn2",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时在浏览器访问的时候, 会看到 \"乱码\" 的情况.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127194954.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127194954.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-o936rqh",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-o936rqh",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-jfdhpdu",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-jfdhpdu",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark",
							"TextMarkTextContent": "关于 \u0026quot;乱码\u0026quot;:"
						},
						{
							"Type": "NodeText",
							"Data": "\n中文的编码方式有很多种. 其中最常见的就是 utf-8 .\n如果没有显式的指定编码方式, 则浏览器不能正确识别编码, 就会出现乱码的情况."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-kytgf8u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-kytgf8u",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以在代码中, 通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "resp.setContentType(\u0026quot;text/html; charset=utf-8\u0026quot;);"
				},
				{
					"Type": "NodeText",
					"Data": "​ 显式的指定编码方式.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127195103.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127195103.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-ii3ts16",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ii3ts16",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时通过抓包可以看到, 当加上了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "resp.setContentType(\u0026quot;text/html; charset=utf-8\u0026quot;);"
				},
				{
					"Type": "NodeText",
					"Data": "​ 代码之后, 响应中多了 Content-Type 字段, 内部指定了编码方式. 浏览器看到这个字段就能够正确解析中文了.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127195134.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127195134.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-nxa2vcx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-nxa2vcx",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例: 处理 POST 请求"
				}
			]
		},
		{
			"ID": "20230426230643-02t1byx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-02t1byx",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "处理Post请求，一般使用以下三个"
				}
			]
		},
		{
			"ID": "20230426230643-zevkc0u",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230426230643-zevkc0u",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-xbhjn3b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230426230643-xbhjn3b",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-g6kakpx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-g6kakpx",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "form"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-7mjv3vx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230426230643-7mjv3vx",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-0wafvgn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-0wafvgn",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ajax"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-q5kdctp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230426230643-q5kdctp",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-34xngps",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-34xngps",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "postman"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-zu115r8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-zu115r8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "下面主要使用ajax"
				}
			]
		},
		{
			"ID": "20230426230643-lhcsi4i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-lhcsi4i",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "MethodServlet.java"
				},
				{
					"Type": "NodeText",
					"Data": " 中, 新增 doPost 方法."
				}
			]
		},
		{
			"ID": "20230426230643-bjfggee",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-bjfggee",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Override\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws \nServletException, IOException {\n    resp.setContentType(\"text/html; charset=utf-8\"); \n    resp.getWriter().write(\"POST 响应\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-meh3jhv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-meh3jhv",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "testMethod.html"
				},
				{
					"Type": "NodeText",
					"Data": " 中, 新增一个按钮, 和对应的点击事件处理函数"
				}
			]
		},
		{
			"ID": "20230426230643-xu08o5s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-xu08o5s",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cbutton onclick=\"sendPost()\"\u003e发送 POST 请求\u003c/button\u003e \n\u003cscript\u003e\n    function sendPost() { \n        ajax({\n            method: 'POST', \n            url: 'method',\n            callback: function (body, status) { \n                console.log(body);\n            } \n        }) \n    }\n\u003c/script\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-1bn5ize",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-1bn5ize",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重新部署程序，使用URL"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": " http://127.0.0.1:8080/ServletHelloWor1d/testMethod.html"
				},
				{
					"Type": "NodeText",
					"Data": "​访问页面.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127202308.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n点击 \"发送 POST 请求\" 按钮, 可以在控制台中看到结果\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127202319.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127202319.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-nkcdjpu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-nkcdjpu",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过类似的方式还可以验证 doPut, doDelete 等方法. 此处不再一一演示."
				}
			]
		},
		{
			"ID": "20230426230643-tqsmyrk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-tqsmyrk",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HttpServletRequest"
				}
			]
		},
		{
			"ID": "20230426230643-z1zl4y6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-z1zl4y6",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当 Tomcat 通过 Socket API 读取 HTTP 请求(字符串), 并且按照 HTTP 协议的格式把字符串解析成 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "HttpServletRequest"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象."
				}
			]
		},
		{
			"ID": "20230426230643-vp4qkdb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-vp4qkdb",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心方法"
				}
			]
		},
		{
			"ID": "20230426230643-v8v5x5v",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230426230643-v8v5x5v",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getProtocol()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回请求协议的名称和版本。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getMethod()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getRequestURI()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getContextPath()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回指示请求上下文的请求 URI 部分。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getQueryString()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回包含在路径后的请求 URL 中的查询字符串。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Enumeration getParameterNames()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回一个 String 对象的枚举，包含在该请求中包含的参数的名称。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getParameter(String name)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String[] getParameterValues(String name)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回 null。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Enumeration getHeaderNames()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回一个枚举，包含在该请求中包含的所有的头名。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getHeader(String name)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "以字符串形式返回指定的请求头的值。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getCharacterEncoding()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回请求主体中使用的字符编码的名称。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getContentType()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回请求主体的 MIME 类型，如果不知道类型则返回 null。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "int getContentLength()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "InputStream getInputStream()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于读取请求的 body 内容. 返回一个 InputStream 对象."
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过这些方法可以获取到一个请求中的各个方面的信息."
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-mzoisnx",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-mzoisnx",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-42i8a3w",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-42i8a3w",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意: 请求对象是服务器收到的内容, 不应该修改. 因此上面的方法也都只是 \"读\" 方法, 而不是 \"写\" 方法."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-vsnw7sv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-vsnw7sv",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127212102.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127212102.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-fw3i0f2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-fw3i0f2",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127212110.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127212110.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-ryd13rb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ryd13rb",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127212119.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127212119.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-il014fl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-il014fl",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127212127.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127212127.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-t2ec5vd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-t2ec5vd",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例: 打印请求信息"
				}
			]
		},
		{
			"ID": "20230426230643-ukk068n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ukk068n",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 ShowRequest 类"
				}
			]
		},
		{
			"ID": "20230426230643-wg1vzdw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-wg1vzdw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/showRequest\")\npublic class ShowRequest extends HttpServlet { \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) \nthrows ServletException, IOException {\n        resp.setContentType(\"text/html; charset=utf-8\");\n        StringBuilder respBody = new StringBuilder();\n        respBody.append(req.getProtocol());\n        respBody.append(\"\u003cbr\u003e\");\n        respBody.append(req.getMethod());\n        respBody.append(\"\u003cbr\u003e\");\n        respBody.append(req.getRequestURI());\n        respBody.append(\"\u003cbr\u003e\");\n        respBody.append(req.getContextPath());\n        respBody.append(\"\u003cbr\u003e\");\n        respBody.append(req.getQueryString());\n        respBody.append(\"\u003cbr\u003e\");\n        \n        respBody.append(\"\u003ch3\u003eheaders:\u003c/h3\u003e\");\n        Enumeration\u003cString\u003e headerNames = req.getHeaderNames(); \n        while (headerNames.hasMoreElements()) {\n            String headerName = headerNames.nextElement();\n            respBody.append(headerName + \" \");\n            respBody.append(req.getHeader(headerName));\n            respBody.append(\"\u003cbr\u003e\"); \n        }\n        resp.getWriter().write(respBody.toString()); \n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-xbo34kd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-xbo34kd",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "部署程序.\n在浏览器通过 URL"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://127.0.0.1:8080/ServletHelloWorld/showRequest"
				},
				{
					"Type": "NodeText",
					"Data": "​ 访问, 可以看到\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127205448.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127205448.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-ck46www",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-ck46www",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例: 获取 GET 请求中的参数"
				}
			]
		},
		{
			"ID": "20230426230643-1dtl4oo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-1dtl4oo",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "GET 请求中的参数一般都是通过 query string 传递给服务器的. 形如\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "https://v.bitedu.vip/personInf/student?userId=1111\u0026amp;classId=100"
				},
				{
					"Type": "NodeText",
					"Data": "​\n此时浏览器通过 query string 给服务器传递了两个参数, userId 和 classId, 值分别是 1111 和 100\n在服务器端就可以通过   "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "getParameter"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来获取到参数的值."
				}
			]
		},
		{
			"ID": "20230426230643-6b4wqa5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-6b4wqa5",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建   GetParameter 类"
				}
			]
		},
		{
			"ID": "20230426230643-u58ujfw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-u58ujfw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/getParameter\")\npublic class GetParameter extends HttpServlet { \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) \nthrows ServletException, IOException {\n        resp.setContentType(\"text/html; charset=utf-8\");\n         \n        String userId = req.getParameter(\"userId\");\n        String classId = req.getParameter(\"classId\");\n        resp.getWriter().write(\"userId: \" + userId + \", \" + \"classId: \" + classId);\n    } \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-cokydk4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-cokydk4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重新部署程序, 在浏览器中通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://127.0.0.1:8080/ServletHelloWorld/getParameter"
				},
				{
					"Type": "NodeText",
					"Data": "​ 访问,可以看到\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127210414.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127210414.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-axwm8sk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-axwm8sk",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当没有 query string的时候, getParameter 获取的值为 null."
				}
			]
		},
		{
			"ID": "20230426230643-edjr1ko",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-edjr1ko",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果通过 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://127.0.0.1:8080/ServletHelloWorld/getParameter?userId=123\u0026amp;classId=45"
				},
				{
					"Type": "NodeText",
					"Data": "​ 访问, 可以看到。"
				}
			]
		},
		{
			"ID": "20230426230643-ie0ox5g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ie0ox5g",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时说明服务器已经获取到客户端传递过来的参数."
				}
			]
		},
		{
			"ID": "20230426230643-uk2oj7m",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-uk2oj7m",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-e7l4ogi",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-e7l4ogi",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "​"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "getParameter"
						},
						{
							"Type": "NodeText",
							"Data": "​ 的返回值类型为 String. 必要的时候需要手动把 String 转成 int."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-r5wv5l8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-r5wv5l8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例:获取 POST 请求中的参数"
				}
			]
		},
		{
			"ID": "20230426230643-t5ed7ye",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-t5ed7ye",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "POST 请求的参数一般通过 body 传递给服务器. body 中的数据格式有很多种. 如果是采用 form 表单的形式, 仍然可以通过   "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "getParameter"
				},
				{
					"Type": "NodeText",
					"Data": "​ 获取参数的值."
				}
			]
		},
		{
			"ID": "20230426230643-waphdu3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-waphdu3",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Postq请求body格式目前主流的三种方法"
				}
			]
		},
		{
			"ID": "20230426230643-7jqsro6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230426230643-7jqsro6",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-5f8uny5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230426230643-5f8uny5",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-lpwh2ty",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-lpwh2ty",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建类   PostParameter"
								}
							]
						},
						{
							"ID": "20230426230643-uwabxni",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230426230643-uwabxni",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-v8071h4",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-v8071h4",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-wkznwpn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-wkznwpn",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果请求是这种格式,服务器如何获取参数呢? 获取参数的方式和GET 一样,也是getParameter!!!"
												}
											]
										}
									]
								},
								{
									"ID": "20230426230643-4avvizd",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-4avvizd",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-x0js6cn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-x0js6cn",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用form表单"
												}
											]
										}
									]
								},
								{
									"ID": "20230426230643-za83pm9",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-za83pm9",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-gt2z0kj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-gt2z0kj",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用postman"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-ygam4fm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230426230643-ygam4fm",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-a5p0wzv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-a5p0wzv",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "form-data"
								}
							]
						},
						{
							"ID": "20230426230643-s32tgbk",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230426230643-s32tgbk",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-l9rco8i",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-l9rco8i",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-4qpyl6r",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-4qpyl6r",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "后面会讲"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-gach4sg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230426230643-gach4sg",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-7mhwycz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-7mhwycz",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JSON"
								}
							]
						},
						{
							"ID": "20230426230643-wy8oo80",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230426230643-wy8oo80",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-5wihuif",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-5wihuif",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-jflkg1c",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-jflkg1c",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "手动处理比较麻烦，这里使用第三方库来直接处理json格式数据"
												}
											]
										}
									]
								},
								{
									"ID": "20230426230643-oakc71u",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-oakc71u",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-xfh0p1m",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-xfh0p1m",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "使用的是Jackson库(Spring官方推荐的库)"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-x9ij9fs",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230426230643-x9ij9fs",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方法一：创建类   PostParameter"
				}
			]
		},
		{
			"ID": "20230426230643-nds1bl3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-nds1bl3",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建类   PostParameter"
				}
			]
		},
		{
			"ID": "20230426230643-x4hd1a3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-x4hd1a3",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/postParameter\")\npublic class PostParameter extends HttpServlet { \n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) \nthrows ServletException, IOException {\n        resp.setContentType(\"text/html; charset=utf-8\"); \n        \n        String userId = req.getParameter(\"userId\");\n        String classId = req.getParameter(\"classId\");\n        resp.getWriter().write(\"userId: \" + userId + \", \" + \"classId: \" + classId);\n    } \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-vb5n9fr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-vb5n9fr",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 testPost.html, 放到 webapp 目录中"
				}
			]
		},
		{
			"ID": "20230426230643-jlewihd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-jlewihd",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "aHRtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cform action=\"postParameter\" method=\"POST\"\u003e \n    \u003cinput type=\"text\" name=\"userId\"\u003e\n    \u003cinput type=\"text\" name=\"classId\"\u003e \n    \u003cinput type=\"submit\" value=\"提交\"\u003e \n\u003c/form\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-cf60de7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-cf60de7",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "重新部署程序, 通过 URL "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://127.0.0.1:8080/ServletHelloWorld/testPost.html"
				},
				{
					"Type": "NodeText",
					"Data": "​ 访问, 可以看到 HTML\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127214005.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127214005.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-kveu22d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-kveu22d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在输入框中输入内容, 点击提交\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127214019.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127214019.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-1fe94s4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-1fe94s4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到跳转到了新的页面, 并显示出了刚刚传入的数据.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127214031.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127214031.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-rw07jfz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-rw07jfz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时通过抓包可以看到, form 表单构造的 body 数据的格式为:"
				}
			]
		},
		{
			"ID": "20230426230643-frt442o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-frt442o",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "POST http://127.0.0.1:8080/ServletHelloWorld/postParameter HTTP/1.1 \nHost: 127.0.0.1:8080\nConnection: keep-alive \nContent-Length: 22 \nCache-Control: max-age=0\nsec-ch-ua: \" Not;A Brand\";v=\"99\", \"Google Chrome\";v=\"91\", \"Chromium\";v=\"91\"\nsec-ch-ua-mobile: ?0 \nUpgrade-Insecure-Requests: 1 \nOrigin: http://127.0.0.1:8080\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36\nAccept:\ntext/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nReferer: http://127.0.0.1:8080/ServletHelloWorld/testPost.html \nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8 \n\nuserId=123\u0026classId=456\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-d1s0uy8",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-d1s0uy8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-9r1w65o",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-9r1w65o",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Content-Type: application/x-www-form-urlencoded, 对应的 body 数据格式就形如\nuserId=123\u0026classId=456"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-truqyqx",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230426230643-truqyqx",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "方法二：JSON"
				}
			]
		},
		{
			"ID": "20230426230643-jryoa2o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-jryoa2o",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先把jackson库引入到项目中,这里使用的是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2.13.4.2"
				},
				{
					"Type": "NodeText",
					"Data": "版本\n将下面代码复制到"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "pox.xml"
				},
				{
					"Type": "NodeText",
					"Data": " 文件中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "\u0026lt;dependencies\u0026gt;"
				},
				{
					"Type": "NodeText",
					"Data": "​标签中"
				}
			]
		},
		{
			"ID": "20230426230643-y9zkluq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-y9zkluq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cdependency\u003e  \n    \u003cgroupId\u003ecom.fasterxml.jackson.core\u003c/groupId\u003e  \n    \u003cartifactId\u003ejackson-databind\u003c/artifactId\u003e  \n    \u003cversion\u003e2.13.4.2\u003c/version\u003e  \n\u003c/dependency\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-8482c0l",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-8482c0l",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 PostParameterJson 类"
				}
			]
		},
		{
			"ID": "20230426230643-mehqil9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-mehqil9",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import com.fasterxml.jackson.databind.ObjectMapper;  \n  \nimport javax.servlet.ServletException;  \nimport javax.servlet.annotation.WebServlet;  \nimport javax.servlet.http.HttpServlet;  \nimport javax.servlet.http.HttpServletRequest;  \nimport javax.servlet.http.HttpServletResponse;  \nimport java.io.IOException;  \n  \nclass User{  \n    public int userId;  \n    public int classId;  \n}  \n  \n@WebServlet(\"/postJson\")  \npublic class PostJsonServlet extends HttpServlet {  \n    private ObjectMapper objectMapper = new ObjectMapper();  \n  \n    @Override  \n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {  \n        User user = objectMapper.readValue(req.getInputStream(), User.class);  \n        resp.getWriter().write(\"userId: \" + user.userId + \", classId: \" + user.classId);  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-a0vrgnw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-a0vrgnw",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 testPostJson.html"
				}
			]
		},
		{
			"ID": "20230426230643-2hovzrc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-2hovzrc",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "aHRtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cinput type=\"text\" id=\"userId\"\u003e  \n\u003cinput type=\"text\" id=\"classId\"\u003e  \n\u003cinput type=\"button\" value=\"提交\" id=\"submit\"\u003e  \n  \n\u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js\"\u003e\u003c/script\u003e  \n\u003cscript\u003e  \n    let userIdInput = document.querySelector(\"#userId\");  \n    let classIdInput = document.querySelector(\"#classId\");  \n    let button = document.querySelector(\"#submit\");  \n    button.onclick=function (){  \n        $.ajax({  \n            type:'post',  \n            url:'postJson',  \n            contentType:'applicaion/json',  \n            data:JSON.stringify({  \n                userId:userIdInput.value,  \n                classId:classIdInput.value  \n            }),  \n            success:function (body){  \n                console.log(body);  \n            }  \n        })  \n    }  \n\u003c/script\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-69gy66k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-69gy66k",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127221001.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127221001.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-3st9ypk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-3st9ypk",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127221059.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127221059.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-y2dl2nx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-y2dl2nx",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "结果："
				},
				{
					"Type": "NodeText",
					"Data": "\n在浏览器中通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://127.0.0.1:8080/ServletHelloWorld/testPostJson.html"
				},
				{
					"Type": "NodeText",
					"Data": "​访问, 可以看到\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127220647.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127220647.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-qkts52q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-qkts52q",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在控制台中可以看到\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127220723.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127220723.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-fvwkhvp",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-fvwkhvp",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-t0jxo11",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-t0jxo11",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意：\nJsonData 这个类用来表示解析之后生成的 JSON 对象. 这个类的属性的名字和类型要和 JSON 字符串的 key 相对应."
						}
					]
				},
				{
					"ID": "20230426230643-n2u2d7a",
					"Type": "NodeList",
					"ListData": {},
					"Properties": {
						"id": "20230426230643-n2u2d7a",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-y4s1m2r",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-y4s1m2r",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-ad88548",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-ad88548",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "Jackson 库的核心类为 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "ObjectMapper"
										},
										{
											"Type": "NodeText",
											"Data": "​. 其中的 "
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "readValue"
										},
										{
											"Type": "NodeText",
											"Data": "​ 方法把一个 JSON 字符串转成 Java 对象. 其中的 writeValueAsString 方法把一个 Java 对象转成 JSON 格式字符串."
										}
									]
								}
							]
						},
						{
							"ID": "20230426230643-gismx9n",
							"Type": "NodeListItem",
							"ListData": {
								"BulletChar": 42,
								"Marker": "Kg=="
							},
							"Properties": {
								"id": "20230426230643-gismx9n",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-alrwhhh",
									"Type": "NodeParagraph",
									"Properties": {
										"id": "20230426230643-alrwhhh",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"Type": "NodeText",
											"Data": "​"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "code",
											"TextMarkTextContent": "readValue"
										},
										{
											"Type": "NodeText",
											"Data": "​ 的第二个参数为 JsonData 的  类对象. 通过这个类对象, 在 readValue 的内部就可以借助"
										},
										{
											"Type": "NodeTextMark",
											"TextMarkType": "strong",
											"TextMarkTextContent": "反射机制"
										},
										{
											"Type": "NodeText",
											"Data": "来构造出 JsonData 对象, 并且根据 JSON 中key 的名字, 把对应的 value 赋值给JsonData 的对应字段."
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-efjng6u",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-efjng6u",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HttpServletResponse"
				}
			]
		},
		{
			"ID": "20230426230643-6nmh543",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-6nmh543",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Servlet 中的 doXXX 方法的目的就是根据请求计算得到相应, 然后把响应的数据设置到HttpServletResponse 对象中."
				}
			]
		},
		{
			"ID": "20230426230643-7wgod29",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-7wgod29",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "然后 Tomcat 就会把这个  HttpServletResponse 对象按照 HTTP 协议的格式, 转成一个字符串, 并通过\nSocket 写回给浏览器."
				}
			]
		},
		{
			"ID": "20230426230643-zhy2kan",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230426230643-zhy2kan",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void setStatus(int sc)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为该响应设置状态码。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void setHeader(String name, String value)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置一个带有给定的名称和值的 header. 如果 name 已经存在, 则覆盖旧的值."
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void addHeader(String name, String value)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "添加一个带有给定的名称和值的 header. 如果 name 已经存在, 不覆盖旧的值, 并列添加新的键值对"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void setContentType(String type)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置被发送到客户端的响应的内容类型。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void setCharacterEncoding(String charset)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置被发送到客户端的响应的字符编码（MIME 字符集）例如，UTF-8。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void sendRedirect(String location)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用指定的重定向位置 URL 发送临时重定向响应到客户端。"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "PrintWriter getWriter()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于往 body 中写入文本格式数据."
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "OutputStream getOutputStream()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "用于往 body 中写入二进制格式数据"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221127222323.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127222323.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-trbexn3",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-trbexn3",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-13klc4n",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-13klc4n",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "注意"
						},
						{
							"Type": "NodeText",
							"Data": ": 响应对象是服务器要返回给浏览器的内容, 这里的重要信息都是程序猿设置的. 因此上面的方法都是 \"写\" 方法.\n"
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "strong",
							"TextMarkTextContent": "注意:"
						},
						{
							"Type": "NodeText",
							"Data": " 对于状态码/响应头的设置要放到 getWriter / getOutputStream 之前. 否则可能设置失效."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-kyb19c0",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-kyb19c0",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例: 设置状态码"
				}
			]
		},
		{
			"ID": "20230426230643-reilmik",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-reilmik",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现一个程序, 用户在浏览器通过参数指定要返回响应的状态码."
				}
			]
		},
		{
			"ID": "20230426230643-ioqe9ew",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ioqe9ew",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 StatusServlet 类"
				}
			]
		},
		{
			"ID": "20230426230643-9wbf48e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-9wbf48e",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/statusServlet\")\npublic class StatusServlet extends HttpServlet { \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String statusString = req.getParameter(\"status\"); \n        \n        if (statusString != null) {\n            resp.setStatus(Integer.parseInt(statusString)); \n        }\n        \n        resp.getWriter().write(\"status: \" + statusString); \n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-y0imivg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-y0imivg",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "部署程序, 在浏览器中通过 URL "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://127.0.0.1:8080/ServletHelloWorld/statusServlet?status=200"
				},
				{
					"Type": "NodeText",
					"Data": "​访问, 可以看到\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127222817.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127222817.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-lnoe8ls",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-lnoe8ls",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抓包结果:"
				}
			]
		},
		{
			"ID": "20230426230643-vl4zqwa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-vl4zqwa",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "HTTP/1.1 200 \nContent-Length: 11\nDate: Mon, 21 Jun 2021 08:05:37 GMT \nKeep-Alive: timeout=20\nConnection: keep-alive \n\nstatus: 200\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-026nasc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-026nasc",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "变换不同的 status 的值, 就可以看到不同的响应结果."
				}
			]
		},
		{
			"ID": "20230426230643-gys8esv",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-gys8esv",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例: 自动刷新"
				}
			]
		},
		{
			"ID": "20230426230643-qvn33lx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-qvn33lx",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现一个程序, 让浏览器每秒钟自动刷新一次. 并显示当前的时间戳."
				}
			]
		},
		{
			"ID": "20230426230643-3ekbc5p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-3ekbc5p",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 AutoRefreshServlet 类"
				}
			]
		},
		{
			"ID": "20230426230643-x63jmf4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-x63jmf4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/autoRefreshServlet\")\npublic class AutoRefreshServlet extends HttpServlet { \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) \nthrows ServletException, IOException {\n        resp.setHeader(\"Refresh\", \"1\");\n        resp.getWriter().write(\"timeStamp: \" + System.currentTimeMillis());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-4j4o4s1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-4j4o4s1",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过 HTTP 响应报头中的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Refresh"
				},
				{
					"Type": "NodeText",
					"Data": "​字段, 可以控制浏览器自动刷新的时机."
				}
			]
		},
		{
			"ID": "20230426230643-a845a47",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-a845a47",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "部署程序, 通过 URL "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://127.0.0.1:8080/ServletHelloWorld/autoRefreshServlet"
				},
				{
					"Type": "NodeText",
					"Data": "​ 访问, 可以看到浏览器每秒钟自动刷新一次.\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127223315.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127223315.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-lio91nj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-lio91nj",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抓包结果"
				}
			]
		},
		{
			"ID": "20230426230643-nxjjw0m",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-nxjjw0m",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "HTTP/1.1 200 \nRefresh: 1\nContent-Length: 24\nDate: Mon, 21 Jun 2021 08:14:29 GMT \nKeep-Alive: timeout=20\nConnection: keep-alive \n\ntimeStamp: 1624263269995\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-b34srid",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-b34srid",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例: 重定向"
				}
			]
		},
		{
			"ID": "20230426230643-ogt3lkp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ogt3lkp",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现一个程序, 返回一个重定向 HTTP 响应, 自动跳转到另外一个页面."
				}
			]
		},
		{
			"ID": "20230426230643-spfiwo6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-spfiwo6",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建 RedirectServlet 类"
				}
			]
		},
		{
			"ID": "20230426230643-rcd2n0d",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-rcd2n0d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@WebServlet(\"/redirectServlet\") \npublic class RedirectServlet extends HttpServlet {  \n    @Override  \n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {  \n        // 在这里返回一个 302 重定向响应, 让浏览器, 自动跳转到 搜狗 主页  \n        //resp.setStatus(302);  \n        //resp.setHeader(\"Location\", \"https://www.sogou.com\");  \n    \n        // Servlet 提供了一个更简便的实现重定向的写法. sendedirect方法  \n        resp.sendRedirect(\"https://www.sogou.com\");  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-1tzolia",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-1tzolia",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "部署程序, 通过 URL "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://127.0.0.1:8080/ServletHelloWorld/redirectServlet"
				},
				{
					"Type": "NodeText",
					"Data": "​ 访问, 可以看\n到, 页面自动跳转到  搜狗主页  了."
				}
			]
		},
		{
			"ID": "20230426230643-q6q8j9k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-q6q8j9k",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抓包结果\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221127223527.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221127223527.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-g8qd7np",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-g8qd7np",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "HTTP/1.1 302\nLocation: http://www.sogou.com \nContent-Length: 0\nDate: Mon, 21 Jun 2021 08:17:26 GMT \nKeep-Alive: timeout=20\nConnection: keep-alive\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-7zjw3b3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-7zjw3b3",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例: 服务器版表白墙"
				}
			]
		},
		{
			"ID": "20230426230643-wfsdktr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-wfsdktr",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "结合上述 API, 我们可以把之前实现的表白墙程序修改成服务器版本. 这样即使页面关闭, 表白墙的内容也不会丢失."
				}
			]
		},
		{
			"ID": "20230426230643-vdid1dm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230426230643-vdid1dm",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-b3ybfkn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230426230643-b3ybfkn",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-scocmqo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-scocmqo",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "告诉服务器,当前留言了一条啥样的数据\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221129130743.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129130743.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-dbiyesc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230426230643-dbiyesc",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-lxgfrtt",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-lxgfrtt",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "从服务器获取到,当前都有哪些留言数据\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221129130941.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129130941.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-f66zcr7",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-f66zcr7",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "必知点"
				}
			]
		},
		{
			"ID": "20230426230643-onfxj1d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-onfxj1d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129131404.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129131404.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-mmj7fao",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-mmj7fao",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-222qqf6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-222qqf6",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-k1sizlv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-k1sizlv",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ObjectMapper 的 readValue 方法也能直接从一个 InputStream 对象读取数据."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-b63p3pi",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-b63p3pi",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-we5f821",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-we5f821",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ObjectMapper 的 writeValueAsString 方法也能把一个对象数组直接转成 JSON 格式的字符串."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-3daeuvz",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230426230643-3daeuvz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象和JSON字符串之间的转换"
				}
			]
		},
		{
			"ID": "20230426230643-ch9dbod",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ch9dbod",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Java"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "objectMapper.readValue"
				},
				{
					"Type": "NodeText",
					"Data": "​把 json字符串转成对象\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "objectMapper.writeValueAsString"
				},
				{
					"Type": "NodeText",
					"Data": "​ 把对象转成json字符串"
				}
			]
		},
		{
			"ID": "20230426230643-zr6m5mm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-zr6m5mm",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "JS"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "JSON.parse"
				},
				{
					"Type": "NodeText",
					"Data": "​把 json字符串转成对象\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "JSON.stringify"
				},
				{
					"Type": "NodeText",
					"Data": "​把对象转成json字符串"
				}
			]
		},
		{
			"ID": "20230426230643-bbsp8rz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-bbsp8rz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "项目代码"
				}
			]
		},
		{
			"ID": "20230426230643-vdmqb7e",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-vdmqb7e",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-h7usaf6",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-h7usaf6",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-m7yqwr4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-m7yqwr4",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "新建一个项目：message_wall"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-k3owa2b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-k3owa2b",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-05u2jaa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-05u2jaa",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "pox.xml 文件配置"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-ndgfyaz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-ndgfyaz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e  \n\u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\"  \n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e  \n    \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e  \n  \n    \u003cgroupId\u003eorg.example\u003c/groupId\u003e  \n    \u003cartifactId\u003emessage_wall\u003c/artifactId\u003e  \n    \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e  \n  \n    \u003cproperties\u003e    \n\t    \u003cmaven.compiler.source\u003e8\u003c/maven.compiler.source\u003e  \n        \u003cmaven.compiler.target\u003e8\u003c/maven.compiler.target\u003e  \n    \u003c/properties\u003e  \n    \u003cdependencies\u003e    \n\t    \u003cdependency\u003e        \n\t\t    \u003cgroupId\u003ejavax.servlet\u003c/groupId\u003e  \n            \u003cartifactId\u003ejavax.servlet-api\u003c/artifactId\u003e  \n            \u003cversion\u003e3.1.0\u003c/version\u003e  \n            \u003cscope\u003eprovided\u003c/scope\u003e  \n        \u003c/dependency\u003e    \n    \n        \u003cdependency\u003e        \n\t        \u003cgroupId\u003ecom.fasterxml.jackson.core\u003c/groupId\u003e  \n            \u003cartifactId\u003ejackson-databind\u003c/artifactId\u003e  \n            \u003cversion\u003e2.13.0\u003c/version\u003e  \n        \u003c/dependency\u003e  \n    \n        \u003cdependency\u003e        \n\t        \u003cgroupId\u003emysql\u003c/groupId\u003e  \n            \u003cartifactId\u003emysql-connector-java\u003c/artifactId\u003e  \n            \u003cversion\u003e8.0.28\u003c/version\u003e  \n        \u003c/dependency\u003e  \n    \u003c/dependencies\u003e  \n\u003c/project\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-lwjddzy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-lwjddzy",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "表白墙：love_wall.html"
				},
				{
					"Type": "NodeText",
					"Data": "\n在文件中加入ajax代码来与服务器进行交互。"
				}
			]
		},
		{
			"ID": "20230426230643-peftsbp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-peftsbp",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "aHRtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c!DOCTYPE html\u003e  \n\u003chtml lang=\"en\"\u003e  \n  \n\u003chead\u003e  \n    \u003cmeta charset=\"UTF-8\"\u003e  \n    \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e  \n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e  \n    \u003ctitle\u003e表白墙\u003c/title\u003e  \n\u003c/head\u003e  \n  \n\u003cbody\u003e  \n\u003cstyle\u003e  \n    * {  \n        margin: 0;  \n        padding: 0;  \n        box-sizing: border-box;  \n    }  \n  \n    .container {  \n        width: 100%;  \n    }  \n  \n    h3 {  \n        text-align: center;  \n        padding: 30px 0;  \n        font-size: 24px;  \n    }  \n  \n    p {  \n        text-align: center;  \n        color: #999;  \n        padding: 10px 0;  \n    }  \n  \n    .row {  \n        width: 400px;  \n        height: 50px;  \n        margin: 0 auto;  \n  \n        display: flex;  \n        justify-content: center;  \n        align-items: center;  \n    }  \n  \n    .row span {  \n        width: 60px;  \n        font-size: 20px;  \n    }  \n  \n    .row input {  \n        width: 300px;  \n        height: 40px;  \n        line-height: 40px;  \n        font-size: 20px;  \n        text-indent: 0.5em;  \n        /* 去掉输入框的轮廓线 */        outline: none;  \n    }  \n  \n    .row #submit {  \n        width: 300px;  \n        height: 40px;  \n        font-size: 20px;  \n        line-height: 40px;  \n        margin: 0 auto;  \n  \n        color: white;  \n        background-color: orange;  \n        /* 去掉边框 */        border: none;  \n  \n        border-radius: 10px;  \n    }  \n  \n    .row #submit:active {  \n        background-color: gray;  \n    }  \n\u003c/style\u003e  \n\u003cdiv class=\"container\"\u003e  \n    \u003ch3\u003e表白墙\u003c/h3\u003e  \n    \u003cp\u003e输入后点击提交, 会将信息显示在表格中\u003c/p\u003e  \n    \u003cdiv class=\"row\"\u003e  \n        \u003cspan\u003e谁: \u003c/span\u003e  \n        \u003cinput type=\"text\"\u003e  \n    \u003c/div\u003e    \u003cdiv class=\"row\"\u003e  \n        \u003cspan\u003e对谁: \u003c/span\u003e  \n        \u003cinput type=\"text\"\u003e  \n    \u003c/div\u003e    \u003cdiv class=\"row\"\u003e  \n        \u003cspan\u003e说: \u003c/span\u003e  \n        \u003cinput type=\"text\"\u003e  \n    \u003c/div\u003e    \u003cdiv class=\"row\"\u003e  \n        \u003cbutton id=\"submit\"\u003e提交\u003c/button\u003e  \n    \u003c/div\u003e\u003c/div\u003e  \n  \n\u003cscript src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js\"\u003e\u003c/script\u003e  \n\u003cscript\u003e  \n    // 加入ajax的代码，此处加入导入逻辑有两个部分  \n    // 点击按钮提交的时候，ajax要构造数据发给服务器  \n    // 页面加载时，从服务器获取消息列表， 并在界面上直接显示  \n    function getMessages() {  \n        $.ajax({  \n            type: \"get\",  \n            url: \"message\",  \n            success: function (body) {  \n                // 当前body以及是一个js对象的数组了，ajax会根据响应的content type来自动进行解析  \n                // 如果服务器返回的content-type 已经是 application/json 了， ajax就会把body自动转成js的对象  \n                // 如果客户端没有自动转换，也可以通过 JSON.parse() 这个函数来手动转换  \n  \n                let container = document.querySelector('.container');  \n                for (let message of body) {  \n                    let div = document.createElement('div');  \n                    div.innerHTML = message.from + ' 对 ' + message.to + ' 说 ' + message.message;  \n                    div.className = 'row';  \n                    container.appendChild(div);  \n                }  \n            }  \n        });  \n    }  \n  \n    getMessages();  \n    // 当用户点击 submit, 就会获取到 input 中的内容, 从而把内容构造成一个 div, 插入到页面末尾.  \n    let submitBtn = document.querySelector('#submit');  \n    submitBtn.onclick = function () {  \n        // 1. 获取到 3 个 input 中的内容.  \n        let inputs = document.querySelectorAll('input');  \n        let from = inputs[0].value;  \n        let to = inputs[1].value;  \n        let msg = inputs[2].value;  \n        if (from == '' || to == '' || msg == '') {  \n            // 用户还没填写完, 暂时先不提交数据.  \n            return;  \n        }  \n        // 2. 生成一个新的 div, 内容就是 input 里的内容. 把这个新的 div 加到页面中.  \n        let div = document.createElement('div');  \n        div.innerHTML = from + ' 对 ' + to + ' 说: ' + msg;  \n        div.className = 'row';  \n        let container = document.querySelector('.container');  \n        container.appendChild(div);  \n        // 3. 清空之前输入框的内容.  \n        for (let i = 0; i \u003c inputs.length; i++) {  \n            inputs[i].value = '';  \n        }  \n  \n        //4. 把当前获取到的输入框的内容，构造成一个HTTP Post请求，通过ajax发个服务器  \n        let body = {  \n            from: from,  \n            to: to,  \n            message: msg  \n        };  \n  \n        $.ajax({  \n            type: \"post\",  \n            url: \"message\",  \n            contentType: \"application/json; charset=utf8\",  \n            data: JSON.stringify(body),  \n            success: function (body) {  \n                alert(\"消息提交成功\");  \n            },  \n            error: function () {  \n                alert(\"消息提交失败\");  \n            }  \n        });  \n    }  \n  \n  \n\u003c/script\u003e  \n\u003c/body\u003e  \n  \n\u003c/html\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-3ek1cym",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-3ek1cym",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "创建 MessageServlet 类"
				},
				{
					"Type": "NodeText",
					"Data": "\n其中包含了 Message类， Message类就是每一条数据的格式"
				}
			]
		},
		{
			"ID": "20230426230643-al0x1rs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-al0x1rs",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import com.fasterxml.jackson.databind.ObjectMapper;  \n  \nimport javax.servlet.ServletException;  \nimport javax.servlet.annotation.WebServlet;  \nimport javax.servlet.http.HttpServlet;  \nimport javax.servlet.http.HttpServletRequest;  \nimport javax.servlet.http.HttpServletResponse;  \nimport java.io.IOException;  \nimport java.sql.Connection;  \nimport java.sql.PreparedStatement;  \nimport java.sql.ResultSet;  \nimport java.sql.SQLException;  \nimport java.util.ArrayList;  \nimport java.util.List;  \n  \n  \nclass Message {  \n    public String from;  \n    public String to;  \n    public String message;  \n}  \n  \n@WebServlet(\"/message\")  \npublic class MessageServlet extends HttpServlet {  \n    private ObjectMapper objectMapper = new ObjectMapper();  \n  \n    // 改成数据库, 就不需要这个变量了  \n    // private List\u003cMessage\u003e messages = new ArrayList\u003c\u003e();  \n  \n    @Override  \n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {  \n        // 处理提交消息请求  \n        Message message = objectMapper.readValue(req.getInputStream(), Message.class);  \n        // 最简单的保存方法就是保存到内存中.  \n        // messages.add(message);        // 通过 ContentType 来告知页面, 返回的数据是 json 格式.  \n        // 有了这样的声明, 此时 jquery ajax 就会自动的帮我们把字符串转成 js 对象.  \n        // 如果没有, jquery ajax 就只是当成字符串来处理的~~  \n        save(message);  \n        resp.setContentType(\"application/json; charset=utf8\");  \n        resp.getWriter().write(\"{ \\\"ok\\\": true }\");  \n    }  \n  \n    @Override  \n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {  \n        // 获取到消息列表. 只要把消息列表中的内容整个的都返回给客户端即可  \n        // 此处需要使用 ObjectMapper 把 Java 对象, 转成 JSON 格式字符串~  \n        List\u003cMessage\u003e messages = load();  \n        String jsonString = objectMapper.writeValueAsString(messages);  \n        System.out.println(\"jsonString: \" + jsonString);  \n        resp.setContentType(\"application/json; charset=utf8\");  \n        resp.getWriter().write(jsonString);  \n    }  \n  \n    private void save(Message message) {  \n        // 把一条消息保存到数据库中  \n        Connection connection = null;  \n        PreparedStatement statement = null;  \n        try {  \n            // 1. 和数据库建立连接  \n            connection = DBUtil.getConnection();  \n            // 2. 构造 SQL        \n            String sql = \"insert into message values(?, ?, ?)\";  \n            statement = connection.prepareStatement(sql);  \n            statement.setString(1, message.from);  \n            statement.setString(2, message.to);  \n            statement.setString(3, message.message);  \n            // 3. 执行 SQL            statement.executeUpdate();  \n        } catch (SQLException e) {  \n            e.printStackTrace();  \n        } finally {  \n            DBUtil.close(connection, statement, null);  \n        }  \n    }  \n  \n    private List\u003cMessage\u003e load() {  \n        // 从数据库中获取到所有的消息  \n        List\u003cMessage\u003e messages = new ArrayList\u003c\u003e();  \n        Connection connection = null;  \n        PreparedStatement statement = null;  \n        ResultSet resultSet = null;  \n        try {  \n            connection = DBUtil.getConnection();  \n            String sql = \"select * from message\";  \n            statement = connection.prepareStatement(sql);  \n            resultSet = statement.executeQuery();  \n            while (resultSet.next()) {  \n                Message message = new Message();  \n                message.from = resultSet.getString(\"from\");  \n                message.to = resultSet.getString(\"to\");  \n                message.message =  resultSet.getString(\"message\");  \n                messages.add(message);  \n            }  \n        } catch (SQLException throwables) {  \n            throwables.printStackTrace();  \n        } finally {  \n            DBUtil.close(connection, statement, resultSet);  \n        }  \n        return messages;  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-3bupfc5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-3bupfc5",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "DBUtil类"
				},
				{
					"Type": "NodeText",
					"Data": "\n这里我在mysql中创建了一个message_wall库,在库中创建了message表"
				}
			]
		},
		{
			"ID": "20230426230643-vt8sbqm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-vt8sbqm",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "c3Fs"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "create database message_wall;\n\nuse message_wall;\n\ncreate table message(`from` varchar(100) , `to` varchar(100) , to text);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-8iea4mr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-8iea4mr",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "from 和 to是sql中的关键字.当关键字作为表名/列名的时候,需要加上反引号"
				}
			]
		},
		{
			"ID": "20230426230643-mjyz0j9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-mjyz0j9",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import com.mysql.cj.jdbc.MysqlDataSource;  \n  \nimport javax.sql.DataSource;  \nimport java.sql.Connection;  \nimport java.sql.PreparedStatement;  \nimport java.sql.ResultSet;  \nimport java.sql.SQLException;  \n  \npublic class DBUtil {  \n    private static final String URL = \"jdbc:mysql://127.0.0.1:3306/message_wall?characterEncoding=utf8\u0026useSSL=false\";  \n    private static final String USERNAME = \"root\";  \n    private static final String PASSWORD = \"back7671773\";  \n  \n    private volatile static DataSource dataSource = null;  \n  \n    private static DataSource getDataSource() {   // getConnection 是在多线程环境下执行的，所以有线程安全问题，所以在这里使用了双判定\n        if (dataSource == null) {  \n            synchronized (DBUtil.class) {  \n                if (dataSource == null) {  \n                    dataSource = new MysqlDataSource();  \n                    ((MysqlDataSource)dataSource).setUrl(URL);  \n                    ((MysqlDataSource)dataSource).setUser(USERNAME);  \n                    ((MysqlDataSource)dataSource).setPassword(PASSWORD);  \n                }  \n            }  \n        }  \n        return dataSource;  \n    }  \n  \n    public static Connection getConnection() throws SQLException {  \n        return getDataSource().getConnection();  \n    }  \n  \n    public static void close(Connection connection, PreparedStatement statement, ResultSet resultSet) {  \n        if (resultSet != null) {  \n            try {  \n                resultSet.close();  \n            } catch (SQLException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n        if (statement != null) {  \n            try {  \n                statement.close();  \n            } catch (SQLException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n        if (connection != null) {  \n            try {  \n                connection.close();  \n            } catch (SQLException e) {  \n                e.printStackTrace();  \n            }  \n        }  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-agpd28d",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-agpd28d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "小结"
				}
			]
		},
		{
			"ID": "20230426230643-c0iht5a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-c0iht5a",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "开发 一个表白墙网站的基本步骤"
				}
			]
		},
		{
			"ID": "20230426230643-vabv7gm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230426230643-vabv7gm",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-4mrnm3j",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230426230643-4mrnm3j",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-xejc2s7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-xejc2s7",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "约定前后端交互的接口"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-mhvooyd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230426230643-mhvooyd",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-tr3vkg3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-tr3vkg3",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "开发服务器代码"
								}
							]
						},
						{
							"ID": "20230426230643-lp0ap4h",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230426230643-lp0ap4h",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-obs4v56",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230426230643-obs4v56",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-zmw9k3v",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-zmw9k3v",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "先编写 Servlet能够处理前端发来的请求"
												}
											]
										}
									]
								},
								{
									"ID": "20230426230643-2qe6ocj",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230426230643-2qe6ocj",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-k9t83a1",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-k9t83a1",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "编写数据库代码 ， 来存储/获取关键数据"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-x8zapz8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230426230643-x8zapz8",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-wrnqf6c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-wrnqf6c",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "开发客户端代码"
								}
							]
						},
						{
							"ID": "20230426230643-o2wmlqe",
							"Type": "NodeList",
							"ListData": {
								"Typ": 1
							},
							"Properties": {
								"id": "20230426230643-o2wmlqe",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-0hghl4e",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "MS4=",
										"Num": 1
									},
									"Properties": {
										"id": "20230426230643-0hghl4e",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-md7hpqw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-md7hpqw",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "基于ajax能够构造请求以及解析响应"
												}
											]
										}
									]
								},
								{
									"ID": "20230426230643-s5h0pcf",
									"Type": "NodeListItem",
									"ListData": {
										"Typ": 1,
										"Delimiter": 46,
										"Marker": "Mi4=",
										"Num": 2
									},
									"Properties": {
										"id": "20230426230643-s5h0pcf",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-u5l6urn",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-u5l6urn",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "能够响应用户的操作(点击按钮之后,触发给服务器发送请求的行为)"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-mlgid8m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-mlgid8m",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "其实也就是MVC (Model , View , Controller)"
				}
			]
		},
		{
			"ID": "20230426230643-quuoxvu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-quuoxvu",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Controller(控制器,处理请求之后的关键逻辑)\nModel(操作数据存取的逻辑)\nView(给用户展示的界面)"
				}
			]
		},
		{
			"ID": "20230426230643-fldiy8o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-fldiy8o",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129132402.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129132402.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-30eogdj",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230426230643-30eogdj",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Cookie 和 Session"
				}
			]
		},
		{
			"ID": "20230426230643-ssct9z5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-ssct9z5",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "回顾 Cookie"
				}
			]
		},
		{
			"ID": "20230426230643-pbw8lyt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-pbw8lyt",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HTTP 协议自身是属于 \"无状态\" 协议."
				}
			]
		},
		{
			"ID": "20230426230643-4xiz86h",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-4xiz86h",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-3vh4uei",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-3vh4uei",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeTextMark",
							"TextMarkType": "mark",
							"TextMarkTextContent": "\u0026quot;无状态\u0026quot; 的含义指的是"
						},
						{
							"Type": "NodeText",
							"Data": ":\n默认情况下 HTTP 协议的客户端和服务器之间的这次通信, 和下次通信之间没有直接的联系."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-tj7yfqv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-tj7yfqv",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是实际开发中, 我们很多时候是需要知道请求之间的关联关系的."
				}
			]
		},
		{
			"ID": "20230426230643-6zyc2d2",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-6zyc2d2",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-rzbwayg",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-rzbwayg",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "例如登陆网站成功后, 第二次访问的时候服务器就能知道该请求是否是已经登陆过了.\n​"
						},
						{
							"Type": "NodeImage",
							"Data": "span",
							"Children": [
								{
									"Type": "NodeBang"
								},
								{
									"Type": "NodeOpenBracket"
								},
								{
									"Type": "NodeLinkText",
									"Data": "Pasted image 20221129134254.png"
								},
								{
									"Type": "NodeCloseBracket"
								},
								{
									"Type": "NodeOpenParen"
								},
								{
									"Type": "NodeLinkDest",
									"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129134254.png"
								},
								{
									"Type": "NodeCloseParen"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "​"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-a2nblpx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-a2nblpx",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "图中的 \"令牌\" 通常就存储在 Cookie 字段中.\n回忆之前的例子:"
				}
			]
		},
		{
			"ID": "20230426230643-vhe91sm",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230426230643-vhe91sm",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-6okfe6w",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230426230643-6okfe6w",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-jifg92w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-jifg92w",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "到了医院先挂号. 挂号时候需要提供身份证, 同时得到了一张 \"就诊卡\", 这个就诊卡就相当于患者的 \"令牌\"."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-xf8qpxg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230426230643-xf8qpxg",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-uanhpdk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-uanhpdk",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "后续去各个科室进行检查, 诊断, 开药等操作, 都不必再出示身份证了, 只要凭就诊卡即可识别 出当前患者的身份."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-v5weqxe",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230426230643-v5weqxe",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-hnurr75",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-hnurr75",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "看完病了之后, 不想要就诊卡了, 就可以注销这个卡. 此时患者的身份和就诊卡的关联就销毁了. (类似于网站的注销操作)"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-bpaevaq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230426230643-bpaevaq",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-vacxo4c",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-vacxo4c",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "又来看病, 可以办一张新的就诊卡, 此时就得到了一个新的 \"令牌\"此时在服务器这边就需要记录令牌信息, 以及令牌对应的用户信息, 这个就是 Session 机制所做的工作."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-0xdzjrd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-0xdzjrd",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时在服务器这边就需要记录令牌信息, 以及令牌对应的用户信息, 这个就是 Session 机制所做的工作."
				}
			]
		},
		{
			"ID": "20230426230643-2bbadab",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-2bbadab",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "理解会话机制 (Session)"
				}
			]
		},
		{
			"ID": "20230426230643-jz6k1j4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-jz6k1j4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "服务器同一时刻收到的请求是很多的. 服务器需要清楚的区分每个请求是从属于哪个用户, 就需要在 服务器这边记录每个用户令牌以及用户的信息的对应关系."
				}
			]
		},
		{
			"ID": "20230426230643-y8l6tni",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-y8l6tni",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-fmfb5w9",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-fmfb5w9",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在上面的例子中, 就诊卡就是一张 \"令牌\". 要想让这个令牌能够生效, 就需要医院这边通过系统记录每个就诊卡和患者信息之间的关联关系."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-h0kpghz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-h0kpghz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "会话的本质就是一个 \"哈希表\", 存储了一些键值对结构. key 就是令牌的 ID(token/sessionId), value 就是用户信息(用户信息可以根据需求灵活设计)."
				}
			]
		},
		{
			"ID": "20230426230643-sjlqtcn",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-sjlqtcn",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-wew64ig",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-wew64ig",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "sessionId 是由服务器生成的一个 \"唯一性字符串\", 从 session 机制的角度来看, 这个唯一性字符串称为 \"sessionId\". 但是站在整个登录流程中看待, 也可以把这个唯一性字符串称为 \"token\"."
						}
					]
				},
				{
					"ID": "20230426230643-zaxlyxg",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-zaxlyxg",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "sessionId 和 token 就可以理解成是同一个东西的不同叫法(不同视角的叫法)."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-3qeirgt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-3qeirgt",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129134607.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129134607.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-z8h2chs",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-z8h2chs",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-1c4s6k9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-1c4s6k9",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-tlx2vkd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-tlx2vkd",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "当用户登陆的时候, 服务器在 Session 中新增一个新记录, 并把 sessionId / token 返回给客户端. (例如通过 HTTP 响应中的 Set-Cookie 字段返回)."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-hew5fy3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-hew5fy3",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-xgluskd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-xgluskd",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "客户端后续再给服务器发送请求的时候, 需要在请求中带上 sessionId/ token. (例如通过 HTTP 请求中的 Cookie 字段带上)."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-gf45dn4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-gf45dn4",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-m68d930",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-m68d930",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "服务器收到请求之后, 根据请求中的 sessionId / token 在 Session 信息中获取到对应的用户信息, 再进行后续操作."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-oci6j1f",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-oci6j1f",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-wehdpuq",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-wehdpuq",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "Servlet 的 Session 默认是保存在内存中的. 如果重启服务器则 Session 数据就会丢失."
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-vzdr3pk",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-vzdr3pk",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Cookie 和 Session 的区别"
				}
			]
		},
		{
			"ID": "20230426230643-i8d756m",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-i8d756m",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-f9vv1u1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-f9vv1u1",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-akhh20w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-akhh20w",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Cookie 是客户端的机制. Session 是服务器端的机制."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-imvizss",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-imvizss",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-f3yxger",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-f3yxger",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Cookie 和 Session 经常会在一起配合使用. 但是不是必须配合."
								}
							]
						},
						{
							"ID": "20230426230643-wnz3jl5",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230426230643-wnz3jl5",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-hpvhtvg",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-hpvhtvg",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-4zw5171",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-4zw5171",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "完全可以用 Cookie 来保存一些数据在客户端. 这些数据不一定是用户身份信息, 也不一定是 token / sessionId"
												}
											]
										}
									]
								},
								{
									"ID": "20230426230643-qh418gi",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-qh418gi",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-hwwdbku",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-hwwdbku",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "Session 中的 token / sessionId 也不需要非得通过 Cookie / Set-Cookie 传递."
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-kalhn8x",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-kalhn8x",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心方法"
				}
			]
		},
		{
			"ID": "20230426230643-pvzoaqx",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-pvzoaqx",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HttpServletRequest 类中的相关方法"
				}
			]
		},
		{
			"ID": "20230426230643-dycwjrp",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230426230643-dycwjrp",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpSession getSession()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在服务器中获取会话. 参数如果为 true, 则当不存在会话时新建会话; 参数如果为 false, 则当不存在会话时返回 null"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Cookie[] getCookies()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "返回一个数组, 包含客户端发送该请求的所有的 Cookie 对象. 会自动把 Cookie 中的格式解析成键值对."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-c14kpy1",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230426230643-c14kpy1",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "调用getSession的时候具体要做的事情"
				}
			]
		},
		{
			"ID": "20230426230643-vky2ifb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-vky2ifb",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "getSession"
				},
				{
					"Type": "NodeText",
					"Data": "​方法，既能用于获取到服务器上的会话,也能用于创建会话.具体行为，取决于参数."
				}
			]
		},
		{
			"ID": "20230426230643-75wqce0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-75wqce0",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-b777wwh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-b777wwh",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-satdbau",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-satdbau",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果参数为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "true"
								},
								{
									"Type": "NodeText",
									"Data": ":"
								}
							]
						},
						{
							"ID": "20230426230643-axhy6dt",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230426230643-axhy6dt",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-lb3eq7a",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-lb3eq7a",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-33vpyq8",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-33vpyq8",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "会话不存在,则创建"
												}
											]
										}
									]
								},
								{
									"ID": "20230426230643-cfuna1p",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-cfuna1p",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-h2le4l2",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-h2le4l2",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "会话存在,则获取"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-nfl6gi7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-nfl6gi7",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-9lxa3qh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-9lxa3qh",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果参数为"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "false"
								},
								{
									"Type": "NodeText",
									"Data": ":"
								}
							]
						},
						{
							"ID": "20230426230643-k05sdbo",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230426230643-k05sdbo",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"ID": "20230426230643-jryewpz",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-jryewpz",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-ylrcntj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-ylrcntj",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "会话不存在,则返回null"
												}
											]
										}
									]
								},
								{
									"ID": "20230426230643-xka5cin",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230426230643-xka5cin",
										"updated": "20230426230643"
									},
									"Children": [
										{
											"ID": "20230426230643-hglh8ix",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230426230643-hglh8ix",
												"updated": "20230426230643"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "会话存在,则获取"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-uswp42i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-uswp42i",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1. 创建会话"
				},
				{
					"Type": "NodeText",
					"Data": "\n首先先获取到请求中cookie里面的sessionld字段(相当于会话的身份标识)判定这个sessionld是否在当前服务器上存在, 如果不存在,则进入创建会话逻辑"
				}
			]
		},
		{
			"ID": "20230426230643-0e1p8wp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-0e1p8wp",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "创建会话,会创建一个HttpSession对象,并且生成一个sessionld (是一个很长的数字，通常是用十六进制来表示,能够保证唯一性)\n接下来就会把这个sessionld 作为 key,把这个HttpSession对象，作为 value,把这个键值对,给保存到服务器内存的一个\"哈希表”这样的结构中"
				}
			]
		},
		{
			"ID": "20230426230643-pbjgyhl",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230426230643-pbjgyhl",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230426230643-kzh1fcf",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230426230643-kzh1fcf",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "实际的实现不一定真是Hash表,但是一定是类似的能够存储键值对的结构并且这个数据是在内存中的!!"
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-f45d9c8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-f45d9c8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "再然后,服务器就会返回一个HTTP响应，把 sessionld通过Set-Cookie 字段返回给浏览器.\n浏览器就可以保存这个sessionld 到Cookie中了."
				}
			]
		},
		{
			"ID": "20230426230643-fcmszqq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-fcmszqq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2.获取会话"
				},
				{
					"Type": "NodeText",
					"Data": "\n先获取到请求中的cookie里面的sessionld字段(也就是会话的身份标识)\n判定这个sessionld是否在当前服务器上存在(也就是在这个哈希表中是否有)\n如果有,就直接查询出这个HttpSession对象，并且通过返回值返回回去"
				}
			]
		},
		{
			"ID": "20230426230643-v5h5pmq",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20230426230643-v5h5pmq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "调用getCookie的时候具体要做的事情"
				}
			]
		},
		{
			"ID": "20230426230643-tsghtzh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-tsghtzh",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129141415.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129141415.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-rykoyyq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-rykoyyq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HttpServletResponse 类中的相关方法"
				}
			]
		},
		{
			"ID": "20230426230643-9aekpud",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230426230643-9aekpud",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void addCookie(Cookie cookie)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "把指定的 cookie 添加到响应中."
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "响应中就可以根据addCookie这个方法,来添加一个Cookie信息到响应报文中."
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "这里添加进来的键值对,就会作为HTTP响应中的Set-Cookie字段来表示"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-4qk2s3c",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-4qk2s3c",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HttpSession 类中的相关方法"
				}
			]
		},
		{
			"ID": "20230426230643-ojni79x",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230426230643-ojni79x",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "一个 HttpSession 对象里面包含多个键值对. 我们可以往 HttpSession 中存任何我们需要的信息."
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1
								}
							]
						},
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Object getAttribute(String name)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "该方法返回在该 session 会话中具有指定名称的对象，如果没有指定名称的对象，则返回 null."
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void setAttribute(String name, Object value)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "该方法使用指定的名称绑定一个对象到该 session 会话"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "boolean isNew()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "判定当前是否是新创建出的会话"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-5e62i8u",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-5e62i8u",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Cookie 类中的相关方法"
				}
			]
		},
		{
			"ID": "20230426230643-iph7k0h",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230426230643-iph7k0h",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "每个 Cookie 对象就是一个键值对."
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1
								}
							]
						},
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getName()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "该方法返回 cookie 的名称。名称在创建后不能改变。(这个值是 Set-Cooke 字段设置给浏览器的)"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getValue()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "该方法获取与 cookie 关联的值"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void setValue(String newValue)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "该方法设置与 cookie 关联的值。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-ifjvndy",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-ifjvndy",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-stk43tn",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-stk43tn",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-wxb2m4r",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-wxb2m4r",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "HTTP 的 Cooke 字段中存储的实际上是多组键值对. 每个键值对在 Servlet 中都对应了一个 Cookie对象."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-ismrk24",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-ismrk24",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-fzao1vh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-fzao1vh",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServletRequest.getCookies()"
								},
								{
									"Type": "NodeText",
									"Data": "​获取到"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "请求中"
								},
								{
									"Type": "NodeText",
									"Data": "的一系列 Cookie 键值对."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-a8vru7n",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-a8vru7n",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-gumg1wp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-gumg1wp",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "HttpServletResponse.addCookie()"
								},
								{
									"Type": "NodeText",
									"Data": "​可以向"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "响应中"
								},
								{
									"Type": "NodeText",
									"Data": "添加新的 Cookie 键值对."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-aie8g48",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-aie8g48",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例: 网页登陆"
				}
			]
		},
		{
			"ID": "20230426230643-monjnic",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-monjnic",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "实现逻辑"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129141747.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129141747.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-fpor2h3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-fpor2h3",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "登录交互"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129141852.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129141852.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-vn6w0wi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-vn6w0wi",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "LoginServlet类"
				}
			]
		},
		{
			"ID": "20230426230643-5aie0ml",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-5aie0ml",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import javax.servlet.ServletException;  \nimport javax.servlet.annotation.WebServlet;  \nimport javax.servlet.http.HttpServlet;  \nimport javax.servlet.http.HttpServletRequest;  \nimport javax.servlet.http.HttpServletResponse;  \nimport javax.servlet.http.HttpSession;  \nimport java.io.IOException;  \n  \n@WebServlet(\"/login\")  \npublic class LoginServlet extends HttpServlet {  \n    @Override  \n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {  \n        // 处理用户请求  \n        String username = req.getParameter(\"username\");  \n        String password = req.getParameter(\"password\");  \n    \n        // 判定用户名或者密码是否正确~~  \n        // 正常来说这个判定操作是要放到数据库中进行存取的.  \n        // 此处为了简单, 就直接在代码里写死了. 假设有效的用户名和密码是 \"fmy\", \"123\"    \n        if (\"fmy\".equals(username) \u0026\u0026 \"123\".equals(password)) {  \n            // 登录成功!  \n            // 创建会话, 并保存必要的身份信息.  \n            HttpSession httpSession = req.getSession(true);  \n            // 往会话中存储键值对. 必要的身份信息  \n            httpSession.setAttribute(\"username\", username);  \n            // 初始情况下, 把登录次数设为 0        \n            httpSession.setAttribute(\"count\", 0);  //这里会将 0 自动装箱为Integer\n            resp.sendRedirect(\"index\");  \n        } else {  \n            // 登录失败!  \n            resp.getWriter().write(\"login failed!\");  \n        }  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-5ltrev5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-5ltrev5",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "IndexServlet类"
				}
			]
		},
		{
			"ID": "20230426230643-7yovo3s",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-7yovo3s",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import javax.servlet.ServletException;  \nimport javax.servlet.annotation.WebServlet;  \nimport javax.servlet.http.HttpServlet;  \nimport javax.servlet.http.HttpServletRequest;  \nimport javax.servlet.http.HttpServletResponse;  \nimport javax.servlet.http.HttpSession;  \nimport java.io.IOException;  \n  \n@WebServlet(\"/index\")  \npublic class IndexServlet extends HttpServlet {  \n    @Override  \n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {  \n        // 返回一个主页. (主页就是一个简单的 html 片段)  \n        // 此处需要得到用户名是啥, 从 HttpSession 中就能拿到.  \n        // 此处 getSession 的参数必须是 false. 前面在登录过程中, 已经创建过会话了. 此处是要直接获取到之前的会话.  \n        HttpSession session = req.getSession(false);  \n        String username = (String) session.getAttribute(\"username\");  \n        // 还从会话中取出 count.    \n        Integer count = (Integer) session.getAttribute(\"count\");  \n        count += 1;  \n    \n        // 把自增之后的值写回到会话中.  \n        session.setAttribute(\"count\", count);  \n  \n        resp.setContentType(\"text/html;charset=utf8\");  \n        resp.getWriter().write(\"\u003ch3\u003e欢迎你! \" + username + \" 这是第 \" + count + \" 次访问主页 \u003c/h3\u003e\");  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-uvboh0d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-uvboh0d",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "login.html"
				}
			]
		},
		{
			"ID": "20230426230643-wwvixfa",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-wwvixfa",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "aHRtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eDocument\u003c/title\u003e\n\u003c/head\u003e\n\n\u003cbody\u003e\n    \u003cform action=\"login\" method=\"post\"\u003e\n        \u003cinput type=\"text\" name=\"username\"\u003e\n        \u003cinput type=\"password\" name=\"password\"\u003e\n        \u003cinput type=\"submit\" value=\"登录\"\u003e\n    \u003c/form\u003e\n\n\u003c/body\u003e\n\n\u003c/html\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-gx255h5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-gx255h5",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "action"
				},
				{
					"Type": "NodeText",
					"Data": "的值就是构造请求的路径.\n如果值是"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/login"
				},
				{
					"Type": "NodeText",
					"Data": "​表示这是一个绝对路径\n直接把"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/login"
				},
				{
					"Type": "NodeText",
					"Data": "​ 作为请求中的路径了~~\n正确的做法,应该是在这里使用相对路径没有"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/"
				},
				{
					"Type": "NodeText",
					"Data": "​，光是一个"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "login"
				},
				{
					"Type": "NodeText",
					"Data": "​\n路径这个写法,哪里要加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/"
				},
				{
					"Type": "NodeText",
					"Data": "​    哪里不加"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "/"
				},
				{
					"Type": "NodeText",
					"Data": "​一定要多加注意"
				}
			]
		},
		{
			"ID": "20230426230643-b0d0xli",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-b0d0xli",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://localhost:8080/ServletHelloWorld/login.html"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中输入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "fmy"
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "123"
				},
				{
					"Type": "NodeText",
					"Data": "\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129145506.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129145506.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-9g4f1ak",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-9g4f1ak",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129145520.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129145520.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-uyn7wr4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-uyn7wr4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129150247.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129150247.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-px89xbq",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230426230643-px89xbq",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上传文件"
				}
			]
		},
		{
			"ID": "20230426230643-1uhvjqk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-1uhvjqk",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上传文件也是日常开发中的一类常见需求. 在 Servlet 中也进行了支持."
				}
			]
		},
		{
			"ID": "20230426230643-pbfoans",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230426230643-pbfoans",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "核心方法"
				}
			]
		},
		{
			"ID": "20230426230643-1h8z46e",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-1h8z46e",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "HttpServletRequest 类方法"
				}
			]
		},
		{
			"ID": "20230426230643-cul9xkn",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230426230643-cul9xkn",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Part getPart(String name)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取请求中给定 name 的文件"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Collection\u0026lt;Part\u0026gt; getParts()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取所有的文件"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "上传文件的时候,在前端需要用到form表单"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "form表单中需要使用特殊的类型  "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "form-data"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-pfbv3am",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-pfbv3am",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时提交文件的时候,浏览器就会把文件内容以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "form-data"
				},
				{
					"Type": "NodeText",
					"Data": "​的格式构造到HTTP请求中.服务器就可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "getPart()"
				},
				{
					"Type": "NodeText",
					"Data": "​来获取了"
				}
			]
		},
		{
			"ID": "20230426230643-hk72z9l",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-hk72z9l",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Part 类方法"
				}
			]
		},
		{
			"ID": "20230426230643-4vx68t0",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				1
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230426230643-4vx68t0",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "方法"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 1,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "描述"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getSubmittedFileName()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取提交的文件名"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "String getContentType()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取提交的文件类型"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "long getSize()"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "获取文件的大小"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "void write(String path)"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 1,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "把提交的文件数据写入磁盘文件"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-ihvlsv4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-ihvlsv4",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一个HTTP请求,可以一次性的提交多个文件的"
				}
			]
		},
		{
			"ID": "20230426230643-892awff",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-892awff",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "每个文件都称为一个Part\n每个Part 都有一个name(身份标识)\n服务器代码中就可以根据name找到对应的Part\n基于这个Part就可以进一步的获取到文件信息,并进行下一阶段操作"
				}
			]
		},
		{
			"ID": "20230426230643-mgpcjua",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230426230643-mgpcjua",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码案例"
				}
			]
		},
		{
			"ID": "20230426230643-8iq4nul",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-8iq4nul",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现程序, 通过网页提交一个图片到服务器上."
				}
			]
		},
		{
			"ID": "20230426230643-h66hgtg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-h66hgtg",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "1. 创建 upload.html, 放到 webapp 目录中."
				}
			]
		},
		{
			"ID": "20230426230643-stx8nse",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-stx8nse",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "aHRtbA=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cform action=\"upload\" method=\"post\" enctype=\"multipart/form-data\"\u003e\n\t   \u003cinput type=\"file\" name=\"MyImage\"\u003e\n\t   \u003cinput type=\"submit\" value=\"提交图片\"\u003e\n\u003c/form\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-zk8o1vz",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-zk8o1vz",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-egjtk3b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-egjtk3b",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-ezfqf0i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-ezfqf0i",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "上传文件一般通过 POST 请求的表单实现."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-5hjqd11",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-5hjqd11",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-lmzromj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-lmzromj",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 form 中要加上   "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "multipart/form-data"
								},
								{
									"Type": "NodeText",
									"Data": "​ 字段."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-9rvhkwe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-9rvhkwe",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上传文件的时候,在前端需要用到form表单\nform表单中需要使用特殊的类型  "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "form-data"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-meecv9g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-meecv9g",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时提交文件的时候,浏览器就会把文件内容以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "form-data"
				},
				{
					"Type": "NodeText",
					"Data": "​的格式构造到HTTP请求中.服务器就可以通过"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "getPart()"
				},
				{
					"Type": "NodeText",
					"Data": "​来获取了"
				}
			]
		},
		{
			"ID": "20230426230643-sodzq1e",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-sodzq1e",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "2. 创建 UploadServlet 类"
				}
			]
		},
		{
			"ID": "20230426230643-nuqijik",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-nuqijik",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import javax.servlet.ServletException;\nimport javax.servlet.annotation.MultipartConfig;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Part;\nimport java.io.IOException;\n\n@MultipartConfig\n@WebServlet(\"/upload\")\npublic class UploadServlet extends HttpServlet {\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Part part = req.getPart(\"MyImage\");\n        System.out.println(part.getSubmittedFileName());\n        System.out.println(part.getContentType());\n        System.out.println(part.getSize());\n        part.write(\"S:\\images/123.png\");// 写到该目录中，可对文件进行修改，现在的文件名就是aaa.jpg\n        resp.setContentType(\"text/html; charset=utf8\");\n        resp.getWriter().write(\"上传成功!\");\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-ffpgv5f",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230426230643-ffpgv5f",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"ID": "20230426230643-6dwz6bx",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-6dwz6bx",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-uc39wya",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-uc39wya",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "需要给UploadServlet加上"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "@Multipartconfig"
								},
								{
									"Type": "NodeText",
									"Data": "​注解.否则服务器代码无法使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "getPart()"
								},
								{
									"Type": "NodeText",
									"Data": "​方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-smx1jzp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-smx1jzp",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-2fno2rh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-2fno2rh",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "getPart()"
								},
								{
									"Type": "NodeText",
									"Data": "​的参数需要和form中input标签的name属性对应."
								}
							]
						}
					]
				},
				{
					"ID": "20230426230643-bkv6is9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230426230643-bkv6is9",
						"updated": "20230426230643"
					},
					"Children": [
						{
							"ID": "20230426230643-pehc7ur",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230426230643-pehc7ur",
								"updated": "20230426230643"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "客户端一次可以提交多个文件.(使用多个input标签).此时服务器可以通过"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "getParts"
								},
								{
									"Type": "NodeText",
									"Data": "​ 获取所有的Part对象."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230426230643-8qljejt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-8qljejt",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129153506.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129153506.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-cupwmu8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-cupwmu8",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "部署程序, 在浏览器中通过 URL "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "http://localhost:8080/ServletHelloWorld/upload.html"
				},
				{
					"Type": "NodeText",
					"Data": "​ 访问\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129154213.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129154213.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-qzsmtst",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-qzsmtst",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129154318.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129154318.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-jy5d2mh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-jy5d2mh",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时可以看到服务器端的打印日志"
				}
			]
		},
		{
			"ID": "20230426230643-2fojywt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230426230643-2fojywt",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "df69b2b0f6d22f69a4698b7e7762e77.png\nimage/png\n2521596\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230426230643-92ko3qr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-92ko3qr",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同时在 s 盘中生成了 123.png\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129154557.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129154557.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230426230643-hmc1xn2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230426230643-hmc1xn2",
				"updated": "20230426230643"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抓包时可以发现\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221129154756.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221129154756.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		}
	]
}