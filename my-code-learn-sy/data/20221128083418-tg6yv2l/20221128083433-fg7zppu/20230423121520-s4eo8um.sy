{
	"ID": "20230423121520-s4eo8um",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230423121520-s4eo8um",
		"scroll": "{\u0026quot;startId\u0026quot;:\u0026quot;20230423122625-vemxb0u\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230423122625-v4ussvw\u0026quot;,\u0026quot;scrollTop\u0026quot;:6587,\u0026quot;focusId\u0026quot;:\u0026quot;20230423122625-m625ood\u0026quot;,\u0026quot;focusStart\u0026quot;:44,\u0026quot;focusEnd\u0026quot;:44}",
		"title": "类和对象",
		"updated": "20230423122625"
	},
	"Children": [
		{
			"ID": "20230423122625-vemxb0u",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423122625-vemxb0u",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类定义和使用"
				}
			]
		},
		{
			"ID": "20230423122625-0jvwh3z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-0jvwh3z",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类的定义格式"
				}
			]
		},
		{
			"ID": "20230423122625-jfgq7m2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-jfgq7m2",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在java中定义类时需要用到class关键字，具体语法如下"
				}
			]
		},
		{
			"ID": "20230423122625-3sepfmg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-3sepfmg",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 创建类\nclass ClassName{\n\tfield; // 字段(属性) 或者 成员变量\n\tmethod; // 行为 或者 成员方法\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-tdy1x9a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-tdy1x9a",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "class"
				},
				{
					"Type": "NodeText",
					"Data": "​为定义类的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "关键字"
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "ClassName"
				},
				{
					"Type": "NodeText",
					"Data": "​为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类的名字"
				},
				{
					"Type": "NodeText",
					"Data": "，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "{}"
				},
				{
					"Type": "NodeText",
					"Data": "​中为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类的主体"
				},
				{
					"Type": "NodeText",
					"Data": "。\n类中包含的内容称为类的成员。属性主要是用来描述类的，称之为类的成员属性或者类成员变量。方法主要说明类具有哪些功能，称为类的成员方法。"
				}
			]
		},
		{
			"ID": "20230423122625-asmp7jf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-asmp7jf",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class WashMachine{  \n    public String brand; // 品牌  \n    public String type; // 型号  \n    public double weight; // 重量  \n    public double lenght; // 长  \n    public double weidth; // 宽  \n    public double height; // 高  \n    public String color; // 颜色  \n    public void WashClothes(){ // 洗衣服  \n        System.out.println(\"洗衣功能\");  \n    }  \n    public void dryClothes(){ // 脱水  \n        System.out.println(\"脱水功能\");  \n    }  \n    public void SetTime(){ // 定时  \n        System.out.println(\"定时功能\");  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-26lgj5j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-26lgj5j",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "采用Java语言将洗衣机类在计算机中定义完成，经过javac编译之后形成.class文件，在JVM的基础上计算机就可以识别了。"
				}
			]
		},
		{
			"ID": "20230423122625-6kyk7tg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-6kyk7tg",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "注意事项"
				}
			]
		},
		{
			"ID": "20230423122625-s7cc3c9",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423122625-s7cc3c9",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-zp2bf4m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-zp2bf4m",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-h73nhvk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-h73nhvk",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类名注意采用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "大驼峰定义"
								},
								{
									"Type": "NodeText",
									"Data": "  如：PrintArray"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-wu60gjq",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423122625-wu60gjq",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类的实例化"
				}
			]
		},
		{
			"ID": "20230423122625-lox68vu",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-lox68vu",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么是实例化"
				}
			]
		},
		{
			"ID": "20230423122625-prckrrb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-prckrrb",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "定义了一个类，就相当于在计算机中定义了一种新的类型"
				},
				{
					"Type": "NodeText",
					"Data": "，与int，double类似，只不过int和double是java语言自带的内置类型，而类是用户自定义了一个新的类型，比如上述的：PetDog类和Student类。它们都是类(一种新定义的类型)有了这些自定义的类型之后，就可以使用这些类来定义实例(或者称为对象)。"
				}
			]
		},
		{
			"ID": "20230423122625-kkhius9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-kkhius9",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "用类类型创建对象的过程，称为类的实例化"
				},
				{
					"Type": "NodeText",
					"Data": "，在java中采用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "new"
				},
				{
					"Type": "NodeText",
					"Data": "​关键字，配合类名来实例化对象。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221204154852.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204154852.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-ueemvqp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-ueemvqp",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Main{  \n    public static void main(String[] args) {  \n        PetDog dogh = new PetDog(); //通过new实例化对象  \n        dogh.name = \"阿黄\";  \n        dogh.color = \"黑黄\";  \n        dogh.barks();  \n        dogh.wag();  \n        PetDog dogs = new PetDog();  \n        dogs.name = \"阿黄\";  \n        dogs.color = \"黑黄\";  \n        dogs.barks();  \n        dogs.wag();  \n    }  \n}\n\n//输出结果：\n阿黄: 旺旺旺~~~\n阿黄: 摇尾巴~~~\n赛虎: 旺旺旺~~~\n赛虎: 摇尾巴~~~\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-8ocjyf6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-8ocjyf6",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "注意事项"
				}
			]
		},
		{
			"ID": "20230423122625-n0fjq2u",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423122625-n0fjq2u",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-ifma8tl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-ifma8tl",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-8mgf1hi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-8mgf1hi",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "new"
								},
								{
									"Type": "NodeText",
									"Data": "​ 关键字用于创建一个对象的实例."
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-6xmqzpl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-6xmqzpl",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-decj7ys",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-decj7ys",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "使用 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "."
								},
								{
									"Type": "NodeText",
									"Data": "​ 来访问对象中的属性和方法."
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-7a8uvfs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-7a8uvfs",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-etahgly",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-etahgly",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同一个类可以创建多个实例."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-n4kt7qb",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-n4kt7qb",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "类和对象的说明"
				}
			]
		},
		{
			"ID": "20230423122625-czqhkt1",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-czqhkt1",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-zmd52lf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-zmd52lf",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-1qql5hq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-1qql5hq",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类只是一个"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "模型"
								},
								{
									"Type": "NodeText",
									"Data": "一样的东西，用来对一个实体进行描述，限定了类有哪些成员."
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-hqxpuz6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-hqxpuz6",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-rj8odrq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-rj8odrq",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类是一种自定义的类型"
								},
								{
									"Type": "NodeText",
									"Data": "，可以用来定义变量，但是在"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "java中用类定义出来的变量我们成为对象"
								},
								{
									"Type": "NodeText",
									"Data": "."
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-01ob4gm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-01ob4gm",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-n2rcnuu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-n2rcnuu",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一个类可以实例化出多个对象，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "实例化出的对象 占用实际的物理空间，存储类成员变量"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-nk1qb52",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-nk1qb52",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-6h2ebox",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-6h2ebox",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "做个比方。"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "类实例化出对象就像现实中使用建筑设计图建造出房子，类就像是设计图"
								},
								{
									"Type": "NodeText",
									"Data": "，只设计出需要什么东西，但是并没有实体的建筑存在，同样类也只是一个设计，实例化出的对象才能实际存储数据，占用物理空间\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221204155114.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204155114.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-m4j26h2",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423122625-m4j26h2",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "this 引用"
				}
			]
		},
		{
			"ID": "20230423122625-3v4p7op",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-3v4p7op",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "为什么要有this引用"
				}
			]
		},
		{
			"ID": "20230423122625-f7liccw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-f7liccw",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先看一个日期类的例子："
				}
			]
		},
		{
			"ID": "20230423122625-cs1y25k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-cs1y25k",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Date {  \n    public int year;  \n    public int month;  \n    public int day;  \n    public void setDay(int y, int m, int d){  \n        year = y;  \n        month = m;  \n        day = d;  \n    }  \n    public void printDate(){  \n        System.out.println(year + \"/\" + month + \"/\" + day);  \n    }  \n    public static void main(String[] args) {  \n        // 构造三个日期类型的对象 d1 d2 d3        Date d1 = new Date();  \n        Date d2 = new Date();  \n        Date d3 = new Date();  \n\n\t\t// 对d1，d2，d3的日期设置  \n        d1.setDay(2020,9,15);  \n        d2.setDay(2020,9,16);  \n        d3.setDay(2020,9,17);  \n\n\t\t// 打印日期中的内容  \n        d1.printDate();  \n        d2.printDate();  \n        d3.printDate();  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-rvwjxss",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-rvwjxss",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以上代码定义了一个日期类，然后main方法中创建了三个对象，并通过Date类中的成员方法对对象进行设置和打印，代码整体逻辑非常简单，没有任何问题。"
				}
			]
		},
		{
			"ID": "20230423122625-jwas85r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-jwas85r",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是细思之下有以下两个疑问："
				}
			]
		},
		{
			"ID": "20230423122625-8txmp1u",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-8txmp1u",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-39h75ih",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-39h75ih",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-3dt3mqe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-3dt3mqe",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "形参名不小心与成员变量名相同："
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-5k229an",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-5k229an",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public void setDay(int year, int month, int day){\nyear = year;\nmonth = month;\nday = day;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-l19rwje",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-l19rwje",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "那函数体中到底是谁给谁赋值？成员变量给成员变量？参数给参数？参数给成员变量？成员变量参数？估计\n自己都搞不清楚了。"
				}
			]
		},
		{
			"ID": "20230423122625-mb8qydu",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-mb8qydu",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-yo8hew2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-yo8hew2",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-m625ood",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-m625ood",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "三个对象都在调用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "setDate"
								},
								{
									"Type": "NodeText",
									"Data": "​和"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "printDate"
								},
								{
									"Type": "NodeText",
									"Data": "​函数，但是这两个函数中没有任何有关对象的说明，"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "setDate和printDate函数如何知道打印的是那个对象的数据呢？"
								},
								{
									"Type": "NodeText",
									"Data": "\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221204155506.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204155506.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n一切让this引用来揭开这层神秘的面纱。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-gx7oez7",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-gx7oez7",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "什么是this引用"
				}
			]
		},
		{
			"ID": "20230423122625-69irzk8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-69irzk8",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "java编译器给每个“成员方法“增加了一个隐藏的引用类型参数，该引用参数指向当前对象(成员方法运行时调用该成员方法的对象)，在成员方法中所有成员变量的操作，都是通过该引用去访问。"
				},
				{
					"Type": "NodeText",
					"Data": " 只不过所有的操作对用户是透明的，即用户不需要来传递，编译器自动完成。"
				}
			]
		},
		{
			"ID": "20230423122625-q2uoeui",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-q2uoeui",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Date {  \n    public int year;  \n    public int month;  \n    public int day;  \n    public void setDay(int year, int month, int day){  \n        this.year = year;  \n        this.month = month;  \n        this.day = day;  \n    }  \n    public void printDate(){  \n        System.out.println(this.year + \"/\" + this.month + \"/\" + this.day);  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-eqyq3wq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-eqyq3wq",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "this引用是编译器自动添加的，用户在实现代码时一般不需要显式给出。\n注意："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "this引用的是调用成员方法的对象"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423122625-igc64jn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-igc64jn",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\tDate d = new Date();\n\td.setDay(2020,9,15);\n\td.printDate();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-6dcnste",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-6dcnste",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221204155725.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204155725.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-v4ussvw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-v4ussvw",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "this引用的特性"
				}
			]
		},
		{
			"ID": "20230423122625-trna24j",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-trna24j",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-h9lntrg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-h9lntrg",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-zv31uab",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-zv31uab",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "this的类型：对应类类型引用，即哪个对象调用就是哪个对象的引用类型"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-vi87tql",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-vi87tql",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-ps2b3zc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-ps2b3zc",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "this只能在\"成员方法\"中使用"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-9cfcf8t",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-9cfcf8t",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-8pm76jx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-8pm76jx",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在\"成员方法\"中，this只能引用当前对象，不能再引用其他对象，具有final属性"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-d0wrg50",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-d0wrg50",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-oo91olg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-oo91olg",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "this是“成员方法”第一个隐藏的参数，编译器会自动传递，在成员方法执行时，编译器会负责将调用成员方法对象的引用传递给该成员方法，this负责来接收"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-8fyt8aq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-8fyt8aq",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在代码层面来简单演示    注意：下图右侧中的Date类也是可以通过编译的\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221204155808.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204155808.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-zg5jn3z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-zg5jn3z",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221204155838.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221204155838.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-nwc4vmt",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423122625-nwc4vmt",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象的构造及初始化"
				}
			]
		},
		{
			"ID": "20230423122625-vl4rmld",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-vl4rmld",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如何初始化对象"
				}
			]
		},
		{
			"ID": "20230423122625-z9878hk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-z9878hk",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "通过前面知识点的学习知道，在Java方法内部定义一个局部变量时，必须要初始化，否则会编译失败。"
				}
			]
		},
		{
			"ID": "20230423122625-stmhol9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-stmhol9",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\tDate d = new Date();\n\td.printDate();\n\td.setDate(2021,6,9);\n\td.printDate();\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-r9yix2x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-r9yix2x",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需要调用之前写的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "SetDate"
				},
				{
					"Type": "NodeText",
					"Data": "​方法才可以将具体的日期设置到对象中。通过上述例子发现两个问题："
				}
			]
		},
		{
			"ID": "20230423122625-ldzmryf",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-ldzmryf",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-zgv5rbk",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-zgv5rbk",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-55515v2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-55515v2",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "每次对象创建好后调用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "SetDate"
								},
								{
									"Type": "NodeText",
									"Data": "​方法设置具体日期，比较麻烦，那对象该如何初始化？"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-ynyomfu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-ynyomfu",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-szsqd1f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-szsqd1f",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "局部变量必须要初始化才能使用，为什么字段声明之后没有给值依然可以使用？"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-h3oro78",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-h3oro78",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "构造方法"
				}
			]
		},
		{
			"ID": "20230423122625-ah3sdec",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423122625-ah3sdec",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "概念"
				}
			]
		},
		{
			"ID": "20230423122625-r7gt3qn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-r7gt3qn",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "构造方法(也称为构造器)是一个特殊的成员方法，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "名字必须与类名相同，在创建对象时，由编译器自动调用，并且在整个对象的生命周期内只调用一次"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423122625-h82qlqh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-h82qlqh",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Date {\n\tpublic int year;\n\tpublic int month;\n\tpublic int day;\n\n\t// 构造方法：\n\t// 名字与类名相同，没有返回值类型，设置为void也不行\n\t// 一般情况下使用public修饰\n\t// 在创建对象时由编译器自动调用，并且在对象的生命周期内只调用一次\n\tpublic Date(int year, int month, int day){\n\t\tthis.year = year;\n\t\tthis.month = month;\n\t\tthis.day = day;\n\t\tSystem.out.println(\"Date(int,int,int)方法被调用了\");\n\t}\n\n\tpublic void printDate(){\n\t\tSystem.out.println(year + \"-\" + month + \"-\" + day);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// 此处创建了一个Date类型的对象，并没有显式调用构造方法\n\t\tDate d = new Date(2021,6,9); // 输出Date(int,int,int)方法被调用了\n\t\td.printDate(); // 2021-6-9\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-b5dcm5o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-b5dcm5o",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意：构造方法的作用就是对对象中的成员进行初始化，并不负责给对象开辟空间。"
				}
			]
		},
		{
			"ID": "20230423122625-yjayqdz",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423122625-yjayqdz",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "特性"
				}
			]
		},
		{
			"ID": "20230423122625-7mcdmet",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-7mcdmet",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-07me7rh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-07me7rh",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-dpyemt8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-dpyemt8",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "名字必须与类名相同"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-m1x8ey4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-m1x8ey4",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-53595qd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-53595qd",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "没有返回值类型，设置为void也不行"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-5z98itn",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-5z98itn",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-mi4he2p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-mi4he2p",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "创建对象时由编译器自动调用，并且在对象的生命周期内只调用一次(相当于人的出生，每个人只能出生一次)"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-h8rx9ue",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-h8rx9ue",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-jhioin6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-jhioin6",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造方法可以重载(用户根据自己的需求提供不同参数的构造方法)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-en62194",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-en62194",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Date {\n\tpublic int year;\n\tpublic int month;\n\tpublic int day;\n\n\t// 无参构造方法\n\tpublic Date(){\n\t\tthis.year = 1900;\n\t\tthis.month = 1;\n\t\tthis.day = 1;\n\t}\n\n\t// 带有三个参数的构造方法\n\tpublic Date(int year, int month, int day) {\n\t\tthis.year = year;\n\t\tthis.month = month;\n\t\tthis.day = day;\n\t}\n\n\tpublic void printDate(){\n\t\tSystem.out.println(year + \"-\" + month + \"-\" + day);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tDate d = new Date();\n\t\td.printDate();\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-r9x6538",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-r9x6538",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上述两个构造方法：名字相同，参数列表不同，因此构成了方法重载。"
				}
			]
		},
		{
			"ID": "20230423122625-7ymlhds",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-7ymlhds",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-4i7bp0u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423122625-4i7bp0u",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-zwlgdc5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-zwlgdc5",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果用户没有显式定义，编译器会生成一份默认的构造方法，生成的默认构造方法一定是无参的。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-wblzne4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-wblzne4",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Date {\n\tpublic int year;\n\tpublic int month;\n\tpublic int day;\n\tpublic void printDate(){\n\t\tSystem.out.println(year + \"-\" + month + \"-\" + day);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tDate d = new Date();\n\t\td.printDate();\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-ml0t305",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-ml0t305",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上述Date类中，没有定义任何构造方法，编译器会默认生成一个不带参数的构造方法。\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意"
				},
				{
					"Type": "NodeText",
					"Data": "：一旦用户定义，编译器则不再生成。"
				}
			]
		},
		{
			"ID": "20230423122625-195x179",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-195x179",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Date {\n\tpublic int year;\n\tpublic int month;\n\tpublic int day;\n\n\tpublic Date(int year, int month, int day) {\n\t\tthis.year = year;\n\t\tthis.month = month;\n\t\tthis.day = day;\n\t}\n\n\tpublic void printDate(){\n\t\tSystem.out.println(year + \"-\" + month + \"-\" + day);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// 如果编译器会生成，则生成的构造方法一定是无参的\n\t\t// 则此处创建对象是可以通过编译的\n\t\t// 但实际情况是：编译期报错\n\t\tDate d = new Date();\n\t\td.printDate();\n\t}\n}\n\n/*\nError:(26, 18) java: 无法将类 extend01.Date中的构造器 Date应用到给定类型;\n需要: int,int,int\n找到: 没有参数\n原因: 实际参数列表和形式参数列表长度不同\n*/\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-ylx0x8k",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-ylx0x8k",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-kigx7d0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230423122625-kigx7d0",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-xh1g30t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-xh1g30t",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造方法中，可以通过this调用其他构造方法来简化代码"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-tcowah6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-tcowah6",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Date {  \n    public int year;  \n    public int month;  \n    public int day;  \n  \n    // 无参构造方法--内部给各个成员赋值初始值，该部分功能与三个参数的构造方法重复  \n\t// 此处可以在无参构造方法中通过this调用带有三个参数的构造方法  \n\t// 但是this(1900,1,1);必须是构造方法中第一条语句  \n    public Date(){  \n\t\t//System.out.println(year); 注释取消掉，编译会失败  \n\n        this(1900, 1, 1);  \n\t\t//this.year = 1900;  \n\t\t//this.month = 1;  \n\t\t//this.day = 1;  \n    }  \n    // 带有三个参数的构造方法  \n    public Date(int year, int month, int day) {  \n        this.year = year;  \n        this.month = month;  \n        this.day = day;  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-yyi35hg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-yyi35hg",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意："
				}
			]
		},
		{
			"ID": "20230423122625-pyjrihd",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423122625-pyjrihd",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-pdpqcj3",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-pdpqcj3",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-bgelclu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-bgelclu",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "this(...)"
								},
								{
									"Type": "NodeText",
									"Data": "​必须是构造方法中第一条语句"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-pnqsq23",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-pnqsq23",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-onidrfz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-onidrfz",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不能形成环"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-m50fkjn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-m50fkjn",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public Date(){\n\tthis(1900,1,1);\n}\n\npublic Date(int year, int month, int day) {\n\tthis();\n}\n\n/*\n无参构造器调用三个参数的构造器，而三个参数构造器有调用无参的构造器，形成构造器的递归调用\n编译报错：Error:(19, 12) java: 递归构造器调用\n*/\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-883qjlw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-883qjlw",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-z87pfuw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ny4=",
						"Num": 7
					},
					"Properties": {
						"id": "20230423122625-z87pfuw",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-kc3x7am",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-kc3x7am",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "绝大多数情况下使用"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "public"
								},
								{
									"Type": "NodeText",
									"Data": "​来修饰，特殊场景下会被"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "private"
								},
								{
									"Type": "NodeText",
									"Data": "​修饰(后序讲单例模式时会遇到)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-aqhveul",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-aqhveul",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "默认初始化"
				}
			]
		},
		{
			"ID": "20230423122625-vwb604p",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-vwb604p",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上文中提出的第二个问题：为什么局部变量在使用时必须要初始化，而成员变量可以不用呢？"
				}
			]
		},
		{
			"ID": "20230423122625-3wabt3j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-3wabt3j",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Date {  \n    public int year;  \n    public int month;  \n    public int day;  \n    public Date(int year, int month, int day) {  \n\t\t// 成员变量在定义时，并没有给初始值, 为什么就可以使用呢？  \n        System.out.println(this.year);  \n        System.out.println(this.month);  \n        System.out.println(this.day);  \n    }  \n  \n    public static void main(String[] args) {  \n\t\t// 此处a没有初始化，编译时报错：  \n\t\t// Error:(24, 28) java: 可能尚未初始化变量a  \n\t\t// int a;  \n\t\t// System.out.println(a);  \n        Date d = new Date(2021,6,9);  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-r3gkbmb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-r3gkbmb",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221226155839.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226155839.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-80igstp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-80igstp",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "要搞清楚这个过程，就需要知道 new 关键字背后所发生的一些事情："
				}
			]
		},
		{
			"ID": "20230423122625-bwiihdu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-bwiihdu",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Date d = new Date(2021,6,9);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-wjj1vk6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-wjj1vk6",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在程序层面只是简单的一条语句，在JVM层面需要做好多事情，下面简单介绍下："
				}
			]
		},
		{
			"ID": "20230423122625-trrkwqa",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-trrkwqa",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-rbt70ka",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-rbt70ka",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-uqn81lf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-uqn81lf",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "检测对象对应的类是否加载了，如果没有加载则加载"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-lpjfp7u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-lpjfp7u",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-2brql7w",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-2brql7w",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "为对象分配内存空间"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-cla4upu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-cla4upu",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-wwqbyhx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-wwqbyhx",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "处理并发安全问题"
								}
							]
						},
						{
							"ID": "20230423122625-jd69qhz",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230423122625-jd69qhz",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"ID": "20230423122625-w4buq0c",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230423122625-w4buq0c",
										"updated": "20230423122625"
									},
									"Children": [
										{
											"ID": "20230423122625-i64rtfw",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230423122625-i64rtfw",
												"updated": "20230423122625"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "比如：多个线程同时申请对象，JVM要保证给对象分配的空间不冲突"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-f0ehlne",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-f0ehlne",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-wk2qyo2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-wk2qyo2",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "初始化所分配的空间"
								}
							]
						},
						{
							"ID": "20230423122625-0xrvxj7",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20230423122625-0xrvxj7",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"ID": "20230423122625-1v94ju4",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230423122625-1v94ju4",
										"updated": "20230423122625"
									},
									"Children": [
										{
											"ID": "20230423122625-xfukmjh",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230423122625-xfukmjh",
												"updated": "20230423122625"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "即：对象空间被申请好之后，对象中包含的成员已经设置好了初始值，比如："
												}
											]
										}
									]
								},
								{
									"ID": "20230423122625-begr3gj",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20230423122625-begr3gj",
										"updated": "20230423122625"
									},
									"Children": [
										{
											"ID": "20230423122625-k5h6zh4",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20230423122625-k5h6zh4",
												"updated": "20230423122625"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "​"
												},
												{
													"Type": "NodeImage",
													"Data": "span",
													"Children": [
														{
															"Type": "NodeBang"
														},
														{
															"Type": "NodeOpenBracket"
														},
														{
															"Type": "NodeLinkText",
															"Data": "Pasted image 20221226160111.png"
														},
														{
															"Type": "NodeCloseBracket"
														},
														{
															"Type": "NodeOpenParen"
														},
														{
															"Type": "NodeLinkDest",
															"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226160111.png"
														},
														{
															"Type": "NodeCloseParen"
														}
													]
												},
												{
													"Type": "NodeText",
													"Data": "​"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-nx0k0n4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423122625-nx0k0n4",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-pw924is",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-pw924is",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设置对象头信息(关于对象内存模型后面会介绍)"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-wgjt4r1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230423122625-wgjt4r1",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-txkpbmi",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-txkpbmi",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用构造方法\u003c\u003e，给对象中各个成员赋值"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-g32p782",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-g32p782",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "就地初始化"
				}
			]
		},
		{
			"ID": "20230423122625-j5uhla5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-j5uhla5",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在声明成员变量时，就直接给出了初始值。"
				}
			]
		},
		{
			"ID": "20230423122625-09ewf4w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-09ewf4w",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Date {  \n    public int year = 1900;  \n    public int month = 1;  \n    public int day = 1;  \n  \n    public Date(){  \n    }  \n  \n    public Date(int year, int month, int day) {  \n    }  \n  \n    public static void main(String[] args) {  \n        Date d1 = new Date(2021,6,9);  \n        Date d2 = new Date();  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-t2ajimc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-t2ajimc",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：代码编译完成后，编译器会将所有给成员初始化的这些语句添加到各个构造函数中"
				}
			]
		},
		{
			"ID": "20230423122625-orrq6zg",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423122625-orrq6zg",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "封装"
				}
			]
		},
		{
			"ID": "20230423122625-finz4qm",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-finz4qm",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "封装的概念"
				}
			]
		},
		{
			"ID": "20230423122625-p4xnllr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-p4xnllr",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "面向对象程序三大特性：封装、继承、多态。而类和对象阶段，主要研究的就是封装特性。何为封装呢？简单来说就是套壳屏蔽细节。"
				}
			]
		},
		{
			"ID": "20230423122625-r7yu3z2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-r7yu3z2",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "封装：将数据和操作数据的方法进行有机结合，隐藏对象的属性和实现细节，仅对外公开接口来和对象进行 交互"
				}
			]
		},
		{
			"ID": "20230423122625-xticq2n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-xticq2n",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "访问限定符"
				}
			]
		},
		{
			"ID": "20230423122625-sxysspa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-sxysspa",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java中主要通过类和访问权限来实现封装："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "类可以将数据以及封装数据的方法结合在一起"
				},
				{
					"Type": "NodeText",
					"Data": "，更符合人类对事物的认知，而"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "访问权限用来控制方法或者字段能否直接在类外使用"
				},
				{
					"Type": "NodeText",
					"Data": "。Java中提供了四种访问限定符：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221226160603.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226160603.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-0b1jgh7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-0b1jgh7",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如：\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​：可以理解为一个人的外貌特征，谁都可以看得到\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "default"
				},
				{
					"Type": "NodeText",
					"Data": "​: 对于自己家族中(同一个包中)不是什么秘密，对于其他人来说就是隐私了\n​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "private"
				},
				{
					"Type": "NodeText",
					"Data": "​：只有自己知道，其他人都不知道"
				}
			]
		},
		{
			"ID": "20230423122625-dgfs1zd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-dgfs1zd",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【说明】"
				}
			]
		},
		{
			"ID": "20230423122625-hpj4aqa",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423122625-hpj4aqa",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-3uv43d1",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-3uv43d1",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-i7bk9tq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-i7bk9tq",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "protected"
								},
								{
									"Type": "NodeText",
									"Data": "​主要是用在继承中，继承部分详细介绍"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-t23ji00",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-t23ji00",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-hqj7btl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-hqj7btl",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "default"
								},
								{
									"Type": "NodeText",
									"Data": "​权限指：什么都不写时的默认权限"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-uniddlh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-uniddlh",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-ryhbxdc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-ryhbxdc",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "访问权限除了可以限定类中成员的可见性，也可以控制类的可见性"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-m3nxb7c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-m3nxb7c",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Computer {  \n    private String cpu; // cpu  \n    private String memory; // 内存  \n    public String screen; // 屏幕  \n    String brand; // 品牌----\u003edefault属性  \n  \n    public Computer(String brand, String cpu, String memory, String screen) {  \n        this.brand = brand;  \n        this.cpu = cpu;  \n        this.memory = memory;  \n        this.screen = screen;  \n    }  \n  \n    public void Boot(){  \n        System.out.println(\"开机~~~\");  \n    }\n  \n    public void PowerOff(){  \n        System.out.println(\"关机~~~\");  \n    }  \n  \n    public void SurfInternet(){  \n        System.out.println(\"上网~~~\");  \n    }  \n}  \npublic class TestComputer {  \n    public static void main(String[] args) {  \n        Computer p = new Computer(\"HW\", \"i7\", \"8G\", \"13*14\");  \n        System.out.println(p.brand); // default属性：只能被本包中类访问  \n        System.out.println(p.screen); // public属性： 可以任何其他类访问  \n\t\t// System.out.println(p.cpu); // private属性：只能在Computer类中访问，不能被其他类访问  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-eguao6a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-eguao6a",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：一般情况下成员变量设置为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "private"
				},
				{
					"Type": "NodeText",
					"Data": "​，成员方法设置为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​。"
				}
			]
		},
		{
			"ID": "20230423122625-637vghw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-637vghw",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "封装扩展之包"
				}
			]
		},
		{
			"ID": "20230423122625-9tto5qf",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423122625-9tto5qf",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包的概念"
				}
			]
		},
		{
			"ID": "20230423122625-a5mg3f2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-a5mg3f2",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在面向对象体系中，提出了一个软件包的概念，即："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "为了更好的管理类，把多个类收集在一起成为一组，称为软件包"
				},
				{
					"Type": "NodeText",
					"Data": "。有点类似于目录。比如：为了更好的管理电脑中的歌曲，一种好的方式就是将相同属性的歌曲放在相同文件下，也可以对某个文件夹下的音乐进行更详细的分类。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221226161102.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226161102.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-jc5thcv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-jc5thcv",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Java中也引入了包，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "包是对类、接口等的封装机制的体现，是一种对类或者接口等的很好的组织方式"
				},
				{
					"Type": "NodeText",
					"Data": "，比如：一个包中的类不想被其他包中的类使用。包还有一个重要的作用："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在同一个工程中允许存在相同名称的类，只要处在不同的包中即可"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423122625-mtkkmzm",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423122625-mtkkmzm",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "导入包中的类"
				}
			]
		},
		{
			"ID": "20230423122625-uhf4fol",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-uhf4fol",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 中已经提供了很多现成的类供我们使用. 例如"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Date"
				},
				{
					"Type": "NodeText",
					"Data": "​类：可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "java.util.Date"
				},
				{
					"Type": "NodeText",
					"Data": "​ 导入 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "java.util"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这个包中的"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Date"
				},
				{
					"Type": "NodeText",
					"Data": "​类."
				}
			]
		},
		{
			"ID": "20230423122625-sz02vdn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-sz02vdn",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Test {\n\tpublic static void main(String[] args) {\n\t\tjava.util.Date date = new java.util.Date();\n\t\t// 得到一个毫秒级别的时间戳\n\t\tSystem.out.println(date.getTime());\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-4wbd6jw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-4wbd6jw",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是这种写法比较麻烦一些, 可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "import"
				},
				{
					"Type": "NodeText",
					"Data": "​语句导入包."
				}
			]
		},
		{
			"ID": "20230423122625-5akhcz5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-5akhcz5",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import java.util.Date;  \npublic class Test {  \n    public static void main(String[] args) {  \n        Date date = new Date();  \n\t\t// 得到一个毫秒级别的时间戳  \n        System.out.println(date.getTime());  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-2t1qeoq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-2t1qeoq",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果需要使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "java.util"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中的其他类, 可以使用 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "import java.util.*"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-640h40u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-640h40u",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import java.util.*;  \npublic class Test {  \n    public static void main(String[] args) {  \n        Date date = new Date();  \n\t\t// 得到一个毫秒级别的时间戳  \n        System.out.println(date.getTime());  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-h3618l2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-h3618l2",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "但是我们"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "更建议显式的指定要导入的类名. 否则还是容易出现冲突"
				},
				{
					"Type": "NodeText",
					"Data": "的情况."
				}
			]
		},
		{
			"ID": "20230423122625-0v5cv74",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-0v5cv74",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import java.util.*;\nimport java.sql.*;\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\t// util 和 sql 中都存在一个 Date 这样的类, 此时就会出现歧义, 编译出错\n\t\tDate date = new Date();\n\t\tSystem.out.println(date.getTime());\n\t}\n}\n\n// 编译出错\nError:(5, 9) java: 对Date的引用不明确\njava.sql 中的类 java.sql.Date 和 java.util 中的类 java.util.Date 都匹配\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-f3jival",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-f3jival",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这种情况下需要使用完整的类名"
				}
			]
		},
		{
			"ID": "20230423122625-01pjs1o",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-01pjs1o",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import java.util.*;\nimport java.sql.*;\n\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tjava.util.Date date = new java.util.Date();\n\t\tSystem.out.println(date.getTime());\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-7hfhiuh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-7hfhiuh",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "import static"
				},
				{
					"Type": "NodeText",
					"Data": "​导入包中静态的方法和字段。"
				}
			]
		},
		{
			"ID": "20230423122625-zb52716",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-zb52716",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import static java.lang.Math.*;  \n\npublic class Test {  \n    public static void main(String[] args) {  \n        double x = 30;  \n        double y = 40;  \n\n\t\t// 静态导入的方式写起来更方便一些.  \n\t\t// double result = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));  \n        double result = sqrt(pow(x, 2) + pow(y, 2));  \n        System.out.println(result);  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-929cmhg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-929cmhg",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意事项: "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "import"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 C++ 的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#include"
				},
				{
					"Type": "NodeText",
					"Data": "​差别很大. C++ 必须 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "#include"
				},
				{
					"Type": "NodeText",
					"Data": "​ 来引入其他文件内容, 但是 Java 不需要."
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "import"
				},
				{
					"Type": "NodeText",
					"Data": "​ 只是为了写代码的时候更方便. "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "import"
				},
				{
					"Type": "NodeText",
					"Data": "​ 更类似于 C++ 的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "namespace"
				},
				{
					"Type": "NodeText",
					"Data": "​ 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "using"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-9u5f28n",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423122625-9u5f28n",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自定义包"
				}
			]
		},
		{
			"ID": "20230423122625-for6qeo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-for6qeo",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "基本规则"
				}
			]
		},
		{
			"ID": "20230423122625-45grj47",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423122625-45grj47",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-cd7aixm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-cd7aixm",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-ejmxcgw",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-ejmxcgw",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在文件的最上方加上一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "package"
								},
								{
									"Type": "NodeText",
									"Data": "​ 语句指定该代码在哪个包中."
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-5ew2tyw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-5ew2tyw",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-x39ejbd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-x39ejbd",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "包名需要尽量指定成唯一的名字, 通常会用公司的域名的颠倒形式(例如 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "com.bit.demo1"
								},
								{
									"Type": "NodeText",
									"Data": "​ )."
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-aehdcuj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-aehdcuj",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-a7yhh2t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-a7yhh2t",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "包名要和代码路径相匹配. 例如创建 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "com.bit.demo1"
								},
								{
									"Type": "NodeText",
									"Data": "​ 的包, 那么会存在一个对应的路径 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "com/bit/demo1"
								},
								{
									"Type": "NodeText",
									"Data": "​ 来存储代码."
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-a5bqvb8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-a5bqvb8",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-z1jgvar",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-z1jgvar",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果一个类没有 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "package"
								},
								{
									"Type": "NodeText",
									"Data": "​ 语句, 则该类被放到一个默认包中."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-h7imt0b",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-h7imt0b",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "操作步骤"
				}
			]
		},
		{
			"ID": "20230423122625-jlgbiuc",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-jlgbiuc",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-am7l5nx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-am7l5nx",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-59erbz3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-59erbz3",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在 IDEA 中先新建一个包: 右键 src -\u003e 新建 -\u003e 包\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221226162113.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226162113.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-jqk5pnh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-jqk5pnh",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-9bbymjy",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-9bbymjy",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在弹出的对话框中输入包名, 例如"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": " com.bit.demo1"
								},
								{
									"Type": "NodeText",
									"Data": "​\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221226162133.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226162133.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-u7zdt26",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-u7zdt26",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-ldbb4yx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-ldbb4yx",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在包中创建类, 右键包名 -\u003e 新建 -\u003e 类, 然后输入类名即可.\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221226162147.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226162147.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-1to4btq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-1to4btq",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-3cu8viz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-3cu8viz",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "此时可以看到我们的磁盘上的目录结构已经被 IDEA 自动创建出来了\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221226162204.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226162204.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-jypisay",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423122625-jypisay",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-uilrv7v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-uilrv7v",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同时我们也看到了, 在新创建的 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "Test.java"
								},
								{
									"Type": "NodeText",
									"Data": "​ 文件的最上方, 就出现了一个 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "package"
								},
								{
									"Type": "NodeText",
									"Data": "​ 语句\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221226162218.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226162218.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-mvn5djr",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423122625-mvn5djr",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "包的访问权限控制举例"
				}
			]
		},
		{
			"ID": "20230423122625-dxb35op",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-dxb35op",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Computer"
				},
				{
					"Type": "NodeText",
					"Data": "​类位于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "com.bit.demo1"
				},
				{
					"Type": "NodeText",
					"Data": "​包中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "TestComputer"
				},
				{
					"Type": "NodeText",
					"Data": "​位置"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "com.bit.demo2"
				},
				{
					"Type": "NodeText",
					"Data": "​包中："
				}
			]
		},
		{
			"ID": "20230423122625-m4nt86u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-m4nt86u",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "package com.bit.demo1;  \npublic class Computer {  \n    private String cpu; // cpu  \n    private String memory; // 内存  \n    public String screen; // 屏幕  \n    String brand; // 品牌  \n    public Computer(String brand, String cpu, String memory, String screen) {  \n        this.brand = brand;  \n        this.cpu = cpu;  \n        this.memory = memory;  \n        this.screen = screen;  \n    }  \n    public void Boot(){  \n        System.out.println(\"开机~~~\");  \n    }  \n    public void PowerOff(){  \n        System.out.println(\"关机~~~\");  \n    }  \n    public void SurfInternet(){  \n        System.out.println(\"上网~~~\");  \n    }  \n}\n\n///////////////////////////////////////////////////////////////////////////  \npackage com.bite.demo2;  \nimport com.bite.demo1.Computer;  \npublic class TestComputer {  \n    public static void main(String[] args) {  \n        Computer p = new Computer(\"HW\", \"i7\", \"8G\", \"13*14\");  \n        System.out.println(p.screen);  \n\t\t// System.out.println(p.cpu); // 报错：cup是私有的，不允许被其他类访问  \n\t\t// System.out.println(p.brand); // 报错：brand是default，不允许被其他包中的类访问  \n    }  \n} \n// 注意：如果去掉Computer类之前的public修饰符，代码也会编译失败\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-ahqbtyn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423122625-ahqbtyn",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "常见的包"
				}
			]
		},
		{
			"ID": "20230423122625-2kkdt0t",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-2kkdt0t",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-q0m98wo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-q0m98wo",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-yt1h6ko",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-yt1h6ko",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java.lang"
								},
								{
									"Type": "NodeText",
									"Data": "​:系统常用基础类(String、Object),此包从JDK1.1后自动导入。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-deumhde",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-deumhde",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-kgo0zdp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-kgo0zdp",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java.lang.reflect"
								},
								{
									"Type": "NodeText",
									"Data": "​:java 反射编程包;"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-6qkfcod",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-6qkfcod",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-iqftvmn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-iqftvmn",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java.net"
								},
								{
									"Type": "NodeText",
									"Data": "​:进行网络编程开发包。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-sa2kfbw",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-sa2kfbw",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-dkwmwen",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-dkwmwen",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java.sql"
								},
								{
									"Type": "NodeText",
									"Data": "​:进行数据库开发的支持包。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-rp7vzs9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423122625-rp7vzs9",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-1rvmmyk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-1rvmmyk",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java.util"
								},
								{
									"Type": "NodeText",
									"Data": "​:是java提供的工具程序包。(集合类等) 非常重要"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-hd0ctui",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230423122625-hd0ctui",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-dfmgeh0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-dfmgeh0",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "java.io"
								},
								{
									"Type": "NodeText",
									"Data": "​:I/O编程开发包。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-v3g8tea",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423122625-v3g8tea",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "static成员"
				}
			]
		},
		{
			"ID": "20230423122625-jenbz58",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-jenbz58",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用前文中介绍的学生类实例化三个对象s1、s2、s3，每个对象都有自己特有的名字、性别，年龄，学分绩点等成员信息，这些信息就是对不同学生来进行描述的，如下所示："
				}
			]
		},
		{
			"ID": "20230423122625-dbitvr0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-dbitvr0",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Student {  \n    // ...  \n    public static void main(String[] args) {  \n        Student s1 = new Student(\"Li leilei\", \"男\", 18, 3.8);  \n        Student s2 = new Student(\"Han MeiMei\", \"女\", 19, 4.0);  \n        Student s3 = new Student(\"Jim\", \"男\", 18, 2.6);  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-dgsycv8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-dgsycv8",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221226164243.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226164243.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-vwb7qy4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-vwb7qy4",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "假设三个同学是同一个班的，那么他们上课肯定是在同一个教室，那既然在同一个教室，那能否给类中再加一个成员变量，来保存同学上课时的教室呢？答案是不行的。\n之前在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "Student类中定义的成员变量，每个对象中都会包含一份(称之为实例变量)"
				},
				{
					"Type": "NodeText",
					"Data": "，因为需要使用这些信息来描述具体的学生。而现在要表示学生上课的教室，这个教室的属性并不需要每个学生对象中都存储一份，而是需要让所有的学生来共享。"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在Java中，被static修饰的成员，称之为静态成员，也可以称为类成员，其不属于某个具体的对象，是所有对象所共享的"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423122625-vpa21ft",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-vpa21ft",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "static修饰成员变量"
				}
			]
		},
		{
			"ID": "20230423122625-gsdhhgr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-gsdhhgr",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "static"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "修饰的成员变量，称为静态成员变量"
				},
				{
					"Type": "NodeText",
					"Data": "，静态成员变量最大的特性："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "不属于某个具体的对象，是所有对象所共享的"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423122625-poq2j65",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-poq2j65",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【静态成员变量特性】"
				}
			]
		},
		{
			"ID": "20230423122625-2svmah6",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-2svmah6",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-xnm4wv2",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-xnm4wv2",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-v5jb4sf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-v5jb4sf",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不属于某个具体的对象，是类的属性，所有对象共享的，不存储在某个对象的空间中"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-vjwlagu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-vjwlagu",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-nsqcafu",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-nsqcafu",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "既可以通过对象访问，也可以通过类名访问，但一般更推荐使用类名访问"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-pqjjntp",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-pqjjntp",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-fne1eb3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-fne1eb3",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "JDK7及以前，HotSpot(Java虚拟机)中存储在方法区，JDK8及之后，类变量存储在Java堆中"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-lhx55gu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-lhx55gu",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-nkcm84f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-nkcm84f",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "类变量存储在方法区当中"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-nea1jek",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423122625-nea1jek",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-zaanyhe",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-zaanyhe",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "生命周期伴随类的一生(即：随类的加载而创建，随类的卸载而销毁)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-7lsvitk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-7lsvitk",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Student{  \n    public String name;  \n    public String gender;  \n    public int age;  \n    public double score;  \n    public static String classRoom = \"Bit306\";  \n    // ...  \n    public static void main(String[] args) {  \n\n\t\t// 静态成员变量可以直接通过类名访问  \n        System.out.println(Student.classRoom);  \n        Student s1 = new Student(\"Li leilei\", \"男\", 18, 3.8);  \n        Student s2 = new Student(\"Han MeiMei\", \"女\", 19, 4.0);  \n        Student s3 = new Student(\"Jim\", \"男\", 18, 2.6);  \n\n\t\t// 也可以通过对象访问：但是classRoom是三个对象共享的  \n        System.out.println(s1.classRoom);  \n        System.out.println(s2.classRoom);  \n        System.out.println(s3.classRoom);  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-92yxvmp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-92yxvmp",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "同学以调试方式运行上述代码，然后在监视窗口中可以看到，静态成员变量并没有存储到某个具体的对象中。"
				}
			]
		},
		{
			"ID": "20230423122625-1ms4mq9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-1ms4mq9",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "static修饰成员方法"
				}
			]
		},
		{
			"ID": "20230423122625-u1q4f6g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-u1q4f6g",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般类中的数据成员都设置为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "private"
				},
				{
					"Type": "NodeText",
					"Data": "​，而成员方法设置为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "public"
				},
				{
					"Type": "NodeText",
					"Data": "​，那设置之后，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Student类"
				},
				{
					"Type": "NodeText",
					"Data": "​中"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "classRoom"
				},
				{
					"Type": "NodeText",
					"Data": "​属性如何在类外访问呢？"
				}
			]
		},
		{
			"ID": "20230423122625-u2528za",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-u2528za",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Student{  \n    private String name;  \n    private String gender;  \n    private int age;  \n    private double score;  \n    private static String classRoom = \"Bit306\";  \n// ...  \n}  \n\npublic class TestStudent {  \n    public static void main(String[] args) {  \n        System.out.println(Student.classRoom);  \n    }  \n}  \n\n//编译失败：  \n        //Error:(10, 35) java: classRoom 在 extend01.Student 中是 private 访问控制\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-44hnkpj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-44hnkpj",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark",
					"TextMarkTextContent": "那static属性应该如何访问呢？"
				},
				{
					"Type": "NodeText",
					"Data": "\nJava中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "被static修饰的成员方法称为静态成员方法，是类的方法，不是某个对象所特有的"
				},
				{
					"Type": "NodeText",
					"Data": "。静态成员一般是通过静态方法来访问的。"
				}
			]
		},
		{
			"ID": "20230423122625-8i8u3ge",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-8i8u3ge",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Student{  \n    // ...  \n    private static String classRoom = \"Bit306\";  \n    // ...  \n    public static String getClassRoom(){  \n        return classRoom;  \n    }  \n}  \npublic class TestStudent {  \n    public static void main(String[] args) {  \n        System.out.println(Student.classRoom);  \n    }\n}\n\n输出：Bit306\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-f96wr4x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-f96wr4x",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【静态方法特性】"
				}
			]
		},
		{
			"ID": "20230423122625-3v91p5n",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-3v91p5n",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-oy1eqy3",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-oy1eqy3",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-d5jelf5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-d5jelf5",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不属于某个具体的对象，是类方法"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-v7e208s",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-v7e208s",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-9jm65il",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-9jm65il",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以通过对象调用，也可以通过类名.静态方法名(...)方式调用，更推荐使用后者"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-d9cgrwq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-d9cgrwq",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-w9snskq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-w9snskq",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态方法没有隐藏的this引用参数，因此不能在静态方法中访问任何非静态成员变量"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-cs7m47u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-cs7m47u",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static String getClassRoom(){  \n\tSystem.out.println(this);  \n\treturn classRoom;  \n}  \n\t// 编译失败：Error:(35, 28) java: 无法从静态上下文中引用非静态 变量 this\n\npublic static String getClassRoom(){  \n\tage += 1;  \n\treturn classRoom;  \n}  \n// 编译失败：Error:(35, 9) java: 无法从静态上下文中引用非静态 变量 age\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-v5wsrxa",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-v5wsrxa",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-voh8xcd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-voh8xcd",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-rytgz2z",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-rytgz2z",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态方法中不能调用任何非静态方法，因为非静态方法有this参数，在静态方法中调用时候无法传递this引用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-enjvo37",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-enjvo37",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static String getClassRoom(){\n\tdoClass();\n\treturn classRoom;\n}\n// 编译报错：Error:(35, 9) java: 无法从静态上下文中引用非静态 方法 doClass()\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-j0jiuc3",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-j0jiuc3",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-uwk5puj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423122625-uwk5puj",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-4n0rmei",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-4n0rmei",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态方法无法重写，不能用来实现多态"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-qec5axr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-qec5axr",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "static成员变量初始化"
				}
			]
		},
		{
			"ID": "20230423122625-3du7e7o",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-3du7e7o",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：静态成员变量一般不会放在构造方法中来初始化，构造方法中初始化的是与对象相关的实例属性\n静态成员变量的初始化分为两种："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "就地初始化"
				},
				{
					"Type": "NodeText",
					"Data": " 和 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "静态代码块初始化"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423122625-sjk8tcd",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-sjk8tcd",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-kdfph60",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-kdfph60",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-moxoccp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-moxoccp",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "就地初始化\n就地初始化指的是：在定义时直接给出初始值"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-492a9yt",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-492a9yt",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Student{  \n    private String name;  \n    private String gender;  \n    private int age;  \n    private double score;  \n    private static String classRoom = \"Bit306\";  \n\t// ...  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-69mb650",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-69mb650",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-lxzyrkd",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-lxzyrkd",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-n9ndu5y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-n9ndu5y",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态代码块初始化\n![[类和对象#静态代码块]]"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-xtvrql6",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423122625-xtvrql6",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码块"
				}
			]
		},
		{
			"ID": "20230423122625-trpaamw",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-trpaamw",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码块概念以及分类"
				}
			]
		},
		{
			"ID": "20230423122625-kc6xxk9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-kc6xxk9",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "使用"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong code",
					"TextMarkTextContent": "{}"
				},
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": " 定义的一段代码称为代码块"
				},
				{
					"Type": "NodeText",
					"Data": "。根据代码块定义的位置以及关键字，又可分为以下四种："
				}
			]
		},
		{
			"ID": "20230423122625-rjawfff",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423122625-rjawfff",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-7g31m0i",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-7g31m0i",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-wc547ax",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-wc547ax",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "普通代码块"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-7fuh1fz",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-7fuh1fz",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-8bxqnft",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-8bxqnft",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "构造块"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-sq4057r",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-sq4057r",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-gn8e2hm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-gn8e2hm",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态块"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-5wfy5rl",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-5wfy5rl",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-1ak8rw8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-1ak8rw8",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "同步代码块（后续讲解多线程部分再谈）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-ecjovt5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-ecjovt5",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "普通代码块"
				}
			]
		},
		{
			"ID": "20230423122625-6wwgxc2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-6wwgxc2",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "普通代码块：定义在方法中的代码块."
				}
			]
		},
		{
			"ID": "20230423122625-tmcqlek",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-tmcqlek",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Main{  \n    public static void main(String[] args) {  \n        { //直接使用{}定义，普通方法块  \n            int x = 10 ;  \n            System.out.println(\"x1 = \" +x);  \n        }  \n        int x = 100 ;  \n        System.out.println(\"x2 = \" +x);  \n    }  \n}  \n\n// 执行结果  \nx1 = 10  \nx2 = 100\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-5gz4r56",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-5gz4r56",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这种用法较少见"
				}
			]
		},
		{
			"ID": "20230423122625-439wvzg",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-439wvzg",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "构造代码块"
				}
			]
		},
		{
			"ID": "20230423122625-9idtu9d",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-9idtu9d",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "构造块：定义在类中的代码块(不加修饰符)。也叫：实例代码块。构造代码块一般用于初始化实例成员变量。"
				}
			]
		},
		{
			"ID": "20230423122625-y2xaz6f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-y2xaz6f",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Student{  \n    //实例成员变量  \n    private String name;  \n    private String gender;  \n    private int age;  \n    private double score;  \n    public Student() {  \n        System.out.println(\"I am Student init()!\");  \n    }  \n    //实例代码块  \n    {  \n        this.name = \"bit\";  \n        this.age = 12;  \n        this.sex = \"man\";  \n        System.out.println(\"I am instance init()!\");  \n    }  \n    public void show(){  \n        System.out.println(\"name: \"+name+\" age: \"+age+\" sex: \"+sex);  \n    }  \n}  \n\npublic class Main {  \n    public static void main(String[] args) {  \n        Person p1 = new Person();  \n        p1.show();  \n    }  \n}\n\n// 运行结果\nI am instance init()!\nI am Person init()!\nname: bit age: 12 sex: man\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-f9t4wuy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-f9t4wuy",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【注意事项 】"
				},
				{
					"Type": "NodeText",
					"Data": "\n实例代码块优先于构造方法执行，因为编译完成后，编译器会将实例代码块中的代码拷贝到每个构造方法第一条语句前。\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221226165620.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226165620.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-xuqgfhv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-xuqgfhv",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态代码块"
				}
			]
		},
		{
			"ID": "20230423122625-63cipbp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-63cipbp",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用static定义的代码块称为静态代码块。一般用于"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "初始化静态成员变量"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423122625-jqq30qi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-jqq30qi",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Student{  \n    private String name;  \n    private String gender;  \n    private int age;  \n    private double score;  \n    private static String classRoom;  \n    //实例代码块  \n    {  \n        this.name = \"bit\";  \n        this.age = 12;  \n        this.gender = \"man\";  \n        System.out.println(\"I am instance init()!\");  \n    }  \n  \n    // 静态代码块  \n    static {  \n        classRoom = \"bit306\";  \n        System.out.println(\"I am static init()!\");  \n    }  \n    public Student(){  \n        System.out.println(\"I am Student init()!\");  \n    }  \n    public static void main(String[] args) {  \n        Student s1 = new Student();  \n        Student s2 = new Student();  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-je0uemr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-je0uemr",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意事项"
				}
			]
		},
		{
			"ID": "20230423122625-d5gfrlf",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423122625-d5gfrlf",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-allp0qu",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-allp0qu",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-aik433q",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-aik433q",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态代码块不管生成多少个对象，其只会执行一次"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-qry01i9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-qry01i9",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-iel8c48",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-iel8c48",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态成员变量是类的属性，因此是在JVM加载类时开辟空间并初始化的"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-9qrdz1z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-9qrdz1z",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java代码在经过编译器编译之后，如果要运行必须先要经过类加载子系统加载到JVM中才能运行。在加载阶\n段：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221226170006.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226170006.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423122625-6g2ajcx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-6g2ajcx",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在链接阶段第二步准备中会给静态成员变量开辟空间，并设置为默认值，在初始化阶段，会执行静态代码块\n中的代码。(了解：关于类加载过程后序JVM中会详细讲解)"
				}
			]
		},
		{
			"ID": "20230423122625-3qhiqog",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423122625-3qhiqog",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-jx7sn54",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-jx7sn54",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-pfqt6vn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-pfqt6vn",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果一个类中包含多个静态代码块，在编译代码时，编译器会按照定义的先后次序依次合并，最终放在生成\n的\u003c\u003e方法中，该方法在类加载时调用，并且只调用一次。\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221226170111.png"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/Pasted%20image%2020221226170111.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-qlnlekd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423122625-qlnlekd",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-uam9ay8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-uam9ay8",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实例代码块只有在创建对象时才会执行。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-vlg9zsr",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423122625-vlg9zsr",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内部类"
				}
			]
		},
		{
			"ID": "20230423122625-oukw5rk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-oukw5rk",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部的完整的结构又只为外部事物提供服务，那么整个内部的完整结构最好使用内部类。在 Java 中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "可以将一个类定义在另一个类或者一个方法的内部，前者称为内部类，后者称为外部类"
				},
				{
					"Type": "NodeText",
					"Data": "。内部类也是封装的一种体现。"
				}
			]
		},
		{
			"ID": "20230423122625-st2pw1u",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-st2pw1u",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class OutClass { // OutClass是外部类\n\tclass InnerClass{// InnerClass是内部类\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-ao9coax",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-ao9coax",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "【注意事项】"
				}
			]
		},
		{
			"ID": "20230423122625-bbdukxs",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-bbdukxs",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-f35gh7q",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-f35gh7q",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-k17g2js",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-k17g2js",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "定义在class 类名"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong code",
									"TextMarkTextContent": "{}"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "花括号外部的，即使是在一个文件里，都不能称为内部类"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-j6av2q4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-j6av2q4",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-akvwg6g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-akvwg6g",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "内部类和外部类共用同一个java源文件，但是经过编译之后，内部类会形成单独的字节码文件"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-n2zd1dd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-n2zd1dd",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内部类的分类"
				}
			]
		},
		{
			"ID": "20230423122625-vr47vau",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-vr47vau",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "先来看下，内部类都可以在一个类的那些位置进行定义"
				}
			]
		},
		{
			"ID": "20230423122625-0lq1n93",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-0lq1n93",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class OutClass {  \n    // 成员位置定义：未被static修饰 ---\u003e 普通内部类  \n    public class InnerClass1{  \n    }\n  \n    // 成员位置定义：被static修饰 ---\u003e 静态内部类  \n    static class InnerClass2{  \n    }  \n  \n    public void method(){  \n\t\t// 方法中也可以定义内部类 ---\u003e 局部内部类：几乎不用  \n        class InnerClass5{  \n        }  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-o2yspi8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-o2yspi8",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "根据内部类定义的位置不同，一般可以分为以下几种形式："
				}
			]
		},
		{
			"ID": "20230423122625-qca3b2u",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-qca3b2u",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-bozn2p5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-bozn2p5",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-qtoznvn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-qtoznvn",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "成员内部类"
								},
								{
									"Type": "NodeText",
									"Data": "("
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "普通内部类"
								},
								{
									"Type": "NodeText",
									"Data": "：未static修饰的成员内部类 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "静态内部类"
								},
								{
									"Type": "NodeText",
									"Data": "：被static修饰的成员内部类)"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-1kyqecc",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-1kyqecc",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-bwp4ho8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-bwp4ho8",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "局部内部类"
								},
								{
									"Type": "NodeText",
									"Data": "(不谈修饰符)、匿名内部类\n注意：内部类其实日常开发中使用并不是非常多，大家在看一些库中的代码时候可能会遇到的比较多，日常开始中使用最多的是匿名内部类。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-yr66tpl",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-yr66tpl",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "成员内部类"
				}
			]
		},
		{
			"ID": "20230423122625-r2u7nyd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-r2u7nyd",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在外部类中，内部类定义位置与外部类成员所处的位置相同，因此称为成员内部类。"
				}
			]
		},
		{
			"ID": "20230423122625-tbz2hij",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423122625-tbz2hij",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "普通内部类"
				}
			]
		},
		{
			"ID": "20230423122625-20vyv9k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-20vyv9k",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "即未被static修饰的成员内部类。"
				}
			]
		},
		{
			"ID": "20230423122625-m3xw20e",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-m3xw20e",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class OutClass {  \n    private int a;  \n    static int b;  \n    int c;  \n    public void methodA(){  \n        a = 10;  \n        System.out.println(a);  \n    }  \n    public static void methodB(){  \n        System.out.println(b);  \n    }  \n  \n    // 成员内部类：未被static修饰  \n    class InnerClass{  \n        int c;  \n        public void methodInner(){  \n        // 在内部类中可以直接访问外部类中：任意访问限定符修饰的成员  \n            a = 100;  \n            b =200;  \n            methodA();  \n            methodB();  \n            // 如果外部类和内部类中具有相同名称成员时，优先访问的是内部类自己的  \n            c = 300;  \n            System.out.println(c);  \n            // 如果要访问外部类同名成员时候，必须：外部类名称.this.同名成员名字  \n            OutClass.this.c = 400;  \n            System.out.println(OutClass.this.c);  \n        }  \n    }  \n  \n    public static void main(String[] args) {  \n        // 外部类：对象创建 以及 成员访问  \n        OutClass outClass = new OutClass();  \n        System.out.println(outClass.a);  \n        System.out.println(OutClass.b);  \n        System.out.println(outClass.c);  \n        outClass.methodA();  \n        outClass.methodB();  \n    \n        System.out.println(\"=============内部类的访问=============\");  \n        // 要访问普通内部类中成员，必须要创建普通内部类的对象  \n        // 而普通内部类定义与外部类成员定义位置相同，因此创建普通内部类对象时必须借助外部类  \n        // 创建内部类对象  \n        OutClass.InnerClass innerClass1 = new OutClass().new InnerClass();  \n    \n        // 上述语法比较怪异，也可以先将外部类对象先创建出来，然后再创建内部类对象  \n        OutClass.InnerClass innerClass2 = outClass.new InnerClass();  \n        innerClass2.methodInner();  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-6ync2fe",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-6ync2fe",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行结果"
				}
			]
		},
		{
			"ID": "20230423122625-cuflymn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-cuflymn",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "0\n0\n0\n10\n0\n=============内部类的访问=============\n10\n200\n300\n400\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-m4h2kx2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-m4h2kx2",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "【注意事项】"
				}
			]
		},
		{
			"ID": "20230423122625-ezl2xpd",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-ezl2xpd",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-m4boudh",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-m4boudh",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-3rbx91j",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-3rbx91j",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "外部类中的任何成员都可以被在普通内部类方法中直接访问"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-xyo4lzq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-xyo4lzq",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-qvtxout",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-qvtxout",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "普通内部类所处的成员与外部类成员位置相同，因此也受public、private等访问限定符的约束"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-3kkamjj",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-3kkamjj",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-fuovyde",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-fuovyde",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "在内部类方法中访问同名的成员时，优先访问自己的，如果要访问外部类同名的成员，必须："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "外部类名称.this.同名成员"
								},
								{
									"Type": "NodeText",
									"Data": "​ 来访问"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-bkto8i9",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-bkto8i9",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-jxgae9t",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-jxgae9t",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "普通内部类对象必须在先有外部类对象前提下才能创建"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-51u5r2x",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423122625-51u5r2x",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-ungtape",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-ungtape",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "普通内部类的非静态方法中包含了一个指向外部类对象的引用"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-2b2lpj8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Ni4=",
						"Num": 6
					},
					"Properties": {
						"id": "20230423122625-2b2lpj8",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-rvcpmwl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-rvcpmwl",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "外部类中，不能直接访问内部类中的成员，如果要访问必须先要创建外部类的对象。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-t811m40",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423122625-t811m40",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "静态内部类"
				}
			]
		},
		{
			"ID": "20230423122625-ggggz75",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-ggggz75",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "被static修饰的内部成员类称为静态内部类。"
				}
			]
		},
		{
			"ID": "20230423122625-yxkwlz5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-yxkwlz5",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class OutClass {  \n    private int a;  \n    static int b;  \n    public void methodA(){  \n        a = 10;  \n        System.out.println(a);  \n    }  \n    public static void methodB(){  \n        System.out.println(b);  \n    }  \n  \n    // 静态内部类：被static修饰的成员内部类  \n    static class InnerClass{  \n        public void methodInner(){  \n\t\t\t// 在内部类中只能访问外部类的静态成员  \n\t\t\t// a = 100; // 编译失败，因为a不是类成员变量  \n            b =200;  \n\t\n\t\t\t// methodA(); // 编译失败，因为methodA()不是类成员静态方法  \n            methodB();  \n        }  \n    }  \n  \n    public static void main(String[] args) {  \n\t\t// 静态内部类对象创建 \u0026 成员访问  \n        OutClass.InnerClass innerClass = new OutClass.InnerClass();  \n        innerClass.methodInner();  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-tviy9sq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-tviy9sq",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong mark",
					"TextMarkTextContent": "【注意事项】"
				}
			]
		},
		{
			"ID": "20230423122625-jrqfx1j",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-jrqfx1j",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-hmgpgmy",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-hmgpgmy",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-7s0xa0s",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-7s0xa0s",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "在内部类中只能访问外部类中的静态成员"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-z49wzgg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-z49wzgg",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-u4o3f49",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-u4o3f49",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "创建内部类对象时，不需要先创建外部类对象"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-ua9sf7v",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-ua9sf7v",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-20uf6p7",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-20uf6p7",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "成员内部类，经过编译之后会生成独立的字节码文件，命名格式为："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "code",
									"TextMarkTextContent": "外部类名称$内部类名称"
								},
								{
									"Type": "NodeText",
									"Data": "​"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-6qwptvv",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-6qwptvv",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "局部内部类"
				}
			]
		},
		{
			"ID": "20230423122625-5j1yb8j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-5j1yb8j",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "定义在外部类的方法体或者"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "{}"
				},
				{
					"Type": "NodeText",
					"Data": "​中，该种内部类只能在其定义的位置使用，一般使用的非常少，此处简单了解下语法格式。"
				}
			]
		},
		{
			"ID": "20230423122625-3y749rf",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-3y749rf",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class OutClass {  \n    int a = 10;  \n    public void method(){  \n        int b = 10;  \n\t\t// 局部内部类：定义在方法体内部  \n\t\t// 不能被public、static等访问限定符修饰  \n        class InnerClass{  \n            public void methodInnerClass(){  \n                System.out.println(a);  \n                System.out.println(b);  \n            }  \n        }  \n\t\t// 只能在该方法体内部使用，其他位置都不能用  \n        InnerClass innerClass = new InnerClass();  \n        innerClass.methodInnerClass();  \n    }  \n    public static void main(String[] args) {  \n\t// OutClass.InnerClass innerClass = null; 编译失败  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-2fe3qck",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-2fe3qck",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "【注意事项】"
				}
			]
		},
		{
			"ID": "20230423122625-4gzjzvw",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423122625-4gzjzvw",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"ID": "20230423122625-83dehej",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423122625-83dehej",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-qf5niu9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-qf5niu9",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "局部内部类只能在所定义的方法体内部使用"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-ys9mu2u",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423122625-ys9mu2u",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-kg5fvc2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-kg5fvc2",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "不能被public、static等修饰符修饰"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-zrpqpci",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423122625-zrpqpci",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-wdjoumr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-wdjoumr",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "编译器也有自己独立的字节码文件，命名格式：外部类名字$x内部类名字.class，x是一个整数。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423122625-lag3qo0",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423122625-lag3qo0",
						"updated": "20230423122625"
					},
					"Children": [
						{
							"ID": "20230423122625-sxe6d8e",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423122625-sxe6d8e",
								"updated": "20230423122625"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "几乎不会使用"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423122625-lfta2f9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423122625-lfta2f9",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "匿名内部类"
				}
			]
		},
		{
			"ID": "20230423122625-yplvv8i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-yplvv8i",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在 Java 中，匿名内部类指的是没有显式地声明其名称或类型的内部类。它通常用于创建一个仅需要被使用一次的类，并且该类不会被其他代码所继承或重复使用。通过使用匿名内部类，可以使代码更加简洁和易读。"
				}
			]
		},
		{
			"ID": "20230423122625-ksgutth",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-ksgutth",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Example {\n  public void doSomething() {\n    Runnable runnable = new Runnable() {\n      @Override\n      public void run() {\n        System.out.println(\"Hello, world!\");\n      }\n    };\n\n    Thread thread = new Thread(runnable);\n    thread.start();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-e4t1m8f",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-e4t1m8f",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在这个示例中，我们创建了一个名为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Example"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的类，该类包含一个名为 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "doSomething()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 的方法。方法中创建了一个实现了 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "Runnable"
				},
				{
					"Type": "NodeText",
					"Data": "​ 接口的匿名内部类，并将其赋值给一个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "runnable"
				},
				{
					"Type": "NodeText",
					"Data": "​ 变量。然后我们将 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "runnable"
				},
				{
					"Type": "NodeText",
					"Data": "​ 对象传递给一个新建的线程，并启动它。当线程运行时，它将调用我们在匿名内部类中重写的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "run()"
				},
				{
					"Type": "NodeText",
					"Data": "​ 方法来输出一条消息。"
				}
			]
		},
		{
			"ID": "20230423122625-zku6kw7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-zku6kw7",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意，在匿名内部类中使用到的变量必须是 final 类型的，或者实际上是 final 类型的（即不能被重新赋值）。这是因为匿名内部类可以访问外部类的成员变量和方法，但是如果这些变量没有被标记为 final，那么它们可能会在匿名内部类中被修改，这是不允许的。"
				}
			]
		},
		{
			"ID": "20230423122625-hq1jbsr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-hq1jbsr",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "总之，匿名内部类在编写一次性使用的类时非常有用，并且可以使代码更加简洁和易读。"
				}
			]
		},
		{
			"ID": "20230423122625-d75ryis",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423122625-d75ryis",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "对象的打印"
				}
			]
		},
		{
			"ID": "20230423122625-j5r4nov",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-j5r4nov",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果想要默认打印对象中内如该如何处理呢？答案："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "重写toString方法"
				},
				{
					"Type": "NodeText",
					"Data": "即可。"
				}
			]
		},
		{
			"ID": "20230423122625-iheaqbs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-iheaqbs",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Person {  \n    String name;  \n    String gender;  \n    int age;  \n  \n    public Person(String name, String gender, int age) {  \n        this.name = name;  \n        this.gender = gender;  \n        this.age = age;  \n    }  \n  \n    @Override  \n    public String toString() {   //这个就是重写的toString方法，需要写在我们需要打印的类中\n        return \"[\" + name + \",\" + gender + \",\" + age + \"]\";  \n    }  \n    public static void main(String[] args) {  \n        Person person = new Person(\"Alex\",\"男\", 18);  \n        System.out.println(person);  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423122625-x62lwtj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423122625-x62lwtj",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行结果"
				}
			]
		},
		{
			"ID": "20230423122625-b0bnvmk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423122625-b0bnvmk",
				"updated": "20230423122625"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "[Alex,男,18]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}