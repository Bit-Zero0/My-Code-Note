{
	"ID": "20221204153830-bbpbivp",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221204153830-bbpbivp",
		"title": "数组",
		"updated": "20221204154224"
	},
	"Children": [
		{
			"ID": "20221204153837-v5x52x8",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221204153837-v5x52x8",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的基本概念"
				}
			]
		},
		{
			"ID": "20221204153837-or7d1qk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-or7d1qk",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的创建及初始化"
				}
			]
		},
		{
			"ID": "20221204153837-sfc60q5",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221204153837-sfc60q5",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的创建"
				}
			]
		},
		{
			"ID": "20221204153837-n6wq1c4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-n6wq1c4",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "T[] 数组名    = new T[N];\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-v2lxrgu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-v2lxrgu",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "T"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "：表示数组中存放元素的类型\n"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "T[]"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "：表示数组的类型\n"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "N"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "：表示数组的长度"
				}
			]
		},
		{
			"ID": "20221204153843-6o0nmgo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153843-6o0nmgo"
			}
		},
		{
			"ID": "20221204153837-isxpm1l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-isxpm1l",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array1 = new int[10];       // 创建一个可以容纳10个int类型元素的数组 \ndouble[] array2 = new double[5];  // 创建一个可以容纳5个double类型元素的数组 \nString[] array3 = new double[3];  // 创建一个可以容纳3个字符串元素的数组\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153841-tp5mkul",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153841-tp5mkul"
			}
		},
		{
			"ID": "20221204153837-43bo4w9",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221204153837-43bo4w9",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的初始化"
				}
			]
		},
		{
			"ID": "20221204153837-h0ayril",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-h0ayril",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的初始化主要分为动态初始化以及静态初始化。"
				}
			]
		},
		{
			"ID": "20221204153837-ywz8iih",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221204153837-ywz8iih",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"ID": "20221204153837-o5mojy8",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221204153837-o5mojy8",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-dna80ww",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-dna80ww",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "动态初始化：在创建数组时，直接指定数组中元素的个数"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-l0ir5m0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-l0ir5m0",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array = new int[10];\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-exlqjsv",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221204153837-exlqjsv",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"ID": "20221204153837-o3wdl49",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221204153837-o3wdl49",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-oi8oelb",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-oi8oelb",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态初始化：在创建数组时不直接指定数据元素个数，而直接将具体的数据内容进行指定\n语法格式："
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "T[] 数组名称    = {data1, data2, data3, ..., datan};"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-xxmfo7z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-xxmfo7z",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array1 = new int[]{0,1,2,3,4,5,6,7,8,9};\ndouble[] array2 = new double[]{1.0, 2.0, 3.0, 4.0, 5.0}; \nString[] array3 = new String[]{\"hell\", \"Java\", \"!!!\"};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-wm36gz5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-wm36gz5",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "【注意事项】"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-pxnfo77",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221204153837-pxnfo77",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"ID": "20221204153837-48985ss",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-48985ss",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-2w4g9s4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-2w4g9s4",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态初始化虽然没有指定数组的长度，编译器在编译时会根据"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "{}"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "中元素个数来确定数组的长度。"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-s8to9tq",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-s8to9tq",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-ee4y0s3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-ee4y0s3",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态初始化时, "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "{}"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "中数据类型必须与"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "[]"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "前数据类型一致。"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-2cyws9y",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-2cyws9y",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-6gwqi1h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-6gwqi1h",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态初始化可以简写，省去后面的"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "new T[]"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153851-jou8orc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153851-jou8orc",
				"updated": "20221204153853"
			}
		},
		{
			"ID": "20221204153837-hae0a0p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-hae0a0p",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 注意：虽然省去了new T[], 但是编译器编译代码时还是会还原 \nint[] array1 = {0,1,2,3,4,5,6,7,8,9};\ndouble[] array2 = {1.0, 2.0, 3.0, 4.0, 5.0}; \nString[] array3 = {\"hell\", \"Java\", \"!!!\"};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153900-x9qa485",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153900-x9qa485",
				"updated": "20221204153901"
			}
		},
		{
			"ID": "20221204153900-jyfrrdg",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221204153900-jyfrrdg",
				"updated": "20221204153900"
			},
			"Children": [
				{
					"ID": "20221204153837-3uajk31",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-3uajk31",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-yoywdwg",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-yoywdwg",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数组也可以按照如下C语言个数创建，不推荐"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-743ygv5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-743ygv5",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "/*\n该种定义方式不太友好，容易造成数组的类型就是int的误解\n[]如果在类型之后，就表示数组类型，因此int[]结合在一块写意思更清晰 \n*/\nint arr[] = {1, 2, 3};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153905-v1yxjjj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153905-v1yxjjj",
				"updated": "20221204153905"
			}
		},
		{
			"ID": "20221204153905-dx3ftj3",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221204153905-dx3ftj3",
				"updated": "20221204153905"
			},
			"Children": [
				{
					"ID": "20221204153837-e9gn5da",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-e9gn5da",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-rb3fg71",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-rb3fg71",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果不确定数组当中内容时，使用动态初始化，否则建议使用静态态初始化。"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-uc2hn92",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-uc2hn92",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-aphpnn2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-aphpnn2",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "静态和动态初始化也可以分为两步，但是省略格式不可以。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-1skhd00",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-1skhd00",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array1;\narray1 = new int[10]; \n\nint[] array2;\narray2 = new int[]{10, 20, 30}; \n\n// 注意省略格式不可以拆分, 否则编译失败\n// int[] array3;\n// array3 = {1, 2, 3};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-9w23far",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221204153837-9w23far",
				"updated": "20221204153946"
			},
			"Children": [
				{
					"ID": "20221204153837-d61fz6o",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-d61fz6o",
						"updated": "20221204153946"
					},
					"Children": [
						{
							"ID": "20221204153837-v1q4i9g",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-v1q4i9g",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果没有对数组进行初始化，数组中元素有其默认值"
								}
							]
						},
						{
							"ID": "20221204153837-p5cvmmm",
							"Type": "NodeList",
							"ListData": {},
							"Properties": {
								"id": "20221204153837-p5cvmmm",
								"updated": "20221204153946"
							},
							"Children": [
								{
									"ID": "20221204153837-gb13qvt",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20221204153837-gb13qvt",
										"updated": "20221204153837"
									},
									"Children": [
										{
											"ID": "20221204153837-tr8zpmj",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221204153837-tr8zpmj",
												"updated": "20221204153837"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果数组中存储元素类型为基类类型，默认值为基类类型对应的默认值，比如："
												}
											]
										}
									]
								},
								{
									"ID": "20221204153837-s57ip1v",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20221204153837-s57ip1v",
										"updated": "20221204153946"
									},
									"Children": [
										{
											"ID": "20221204153837-tf5den3",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221204153837-tf5den3",
												"updated": "20221204153946"
											},
											"Children": [
												{
													"Type": "NodeImage",
													"Data": "span",
													"Children": [
														{
															"Type": "NodeBang"
														},
														{
															"Type": "NodeOpenBracket"
														},
														{
															"Type": "NodeLinkText",
															"Data": "Pasted image 20221203224705"
														},
														{
															"Type": "NodeCloseBracket"
														},
														{
															"Type": "NodeOpenParen"
														},
														{
															"Type": "NodeLinkDest",
															"Data": "assets/Pasted image 20221203224705-20221204153946-kf3fkc6.png"
														},
														{
															"Type": "NodeCloseParen"
														}
													]
												}
											]
										}
									]
								},
								{
									"ID": "20221204153837-oks90cc",
									"Type": "NodeListItem",
									"ListData": {
										"BulletChar": 42,
										"Marker": "Kg=="
									},
									"Properties": {
										"id": "20221204153837-oks90cc",
										"updated": "20221204153837"
									},
									"Children": [
										{
											"ID": "20221204153837-xpp20kp",
											"Type": "NodeParagraph",
											"Properties": {
												"id": "20221204153837-xpp20kp",
												"updated": "20221204153837"
											},
											"Children": [
												{
													"Type": "NodeText",
													"Data": "如果数组中存储元素类型为引用类型，默认值为"
												},
												{
													"Type": "NodeCodeSpan",
													"Data": "code",
													"Children": [
														{
															"Type": "NodeCodeSpanOpenMarker"
														},
														{
															"Type": "NodeCodeSpanContent",
															"Data": "null"
														},
														{
															"Type": "NodeCodeSpanCloseMarker"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153949-sda6mr6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153949-sda6mr6"
			}
		},
		{
			"ID": "20221204153837-rp97d2l",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-rp97d2l",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组是使用"
				}
			]
		},
		{
			"ID": "20221204153837-meitvox",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221204153837-meitvox",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组中元素访问"
				}
			]
		},
		{
			"ID": "20221204153837-i4milcd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-i4milcd",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "数组在内存中是一段连续的空间，空间的编号都是从"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "0"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "开始的，依次递增，该编号称为数组的下标，数组可以通过下标访问其任意位置的元素"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。比如："
				}
			]
		},
		{
			"ID": "20221204153837-d5qe3rm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-d5qe3rm",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[]array = new int[]{10, 20, 30, 40, 50};\nSystem.out.println(array[0]);\nSystem.out.println(array[1]);\nSystem.out.println(array[2]);\nSystem.out.println(array[3]);\nSystem.out.println(array[4]);\n\n// 也可以通过[]对数组中的元素进行修改 \narray[0] = 100;\nSystem.out.println(array[0]);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-aytg1oq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-aytg1oq",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "【注意事项】"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-qcq5ni7",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221204153837-qcq5ni7",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"ID": "20221204153837-hsjg8ui",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221204153837-hsjg8ui",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-hv19wsm",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-hv19wsm",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数组是一段连续的内存空间，因此支持随机访问，即通过下标访问快速访问数组中任意位置的元素"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-wd27ho5",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221204153837-wd27ho5",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-j4s526h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-j4s526h",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "下标从0开始，介于"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "[0, N)"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "之间不包含N，N为元素个数，不能越界，否则会报出下标越界异常。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-jal8ik3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-jal8ik3",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array = {1, 2, 3};\nSystem.out.println(array[3]);  // 数组中只有3个元素，下标一次为：0  1  2，array[3]下标越界 \n\n// 执行结果\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 100 \n       at Test.main(Test.java:4)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-wycn2fa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-wycn2fa",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "抛出了"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "java.lang.ArrayIndexOutOfBoundsException"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 异常. 使用数组一定要下标谨防越界."
				}
			]
		},
		{
			"ID": "20221204153955-sngtmw7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153955-sngtmw7"
			}
		},
		{
			"ID": "20221204153837-9t67w7y",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221204153837-9t67w7y",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "遍历数组"
				}
			]
		},
		{
			"ID": "20221204153837-apoqjsn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-apoqjsn",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在数组中可以通过"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "数组对象.length"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 来获取数组的长度"
				}
			]
		},
		{
			"ID": "20221204153837-bw14vo6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-bw14vo6",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[]array = new int[]{10, 20, 30, 40, 50}; \nfor(int i = 0; i \u003c array.length; i++){\n   System.out.println(array[i]); \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-hbdq57i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-hbdq57i",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "也可以使用 "
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "for-each"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 遍历数组"
				}
			]
		},
		{
			"ID": "20221204153837-oh9f6bo",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-oh9f6bo",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] array = {1, 2, 3}; \nfor (int x : array) {\n   System.out.println(x); \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-cczzjlm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-cczzjlm",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "for-each"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 是 for 循环的另外一种使用方式. 能够更方便的完成对数组的遍历. 可以避免循环条件和更新语句写错."
				}
			]
		},
		{
			"ID": "20221204153958-lywja7u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153958-lywja7u"
			}
		},
		{
			"ID": "20221204153837-nedrxtr",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221204153837-nedrxtr",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组是引用类型"
				}
			]
		},
		{
			"ID": "20221204153837-ydsnwog",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-ydsnwog",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "初始JVM的内存分布"
				}
			]
		},
		{
			"ID": "20221204153837-67oqwpq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-67oqwpq",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "内存是一段连续的存储空间，主要用来存储程序运行时数据的。比如："
				}
			]
		},
		{
			"ID": "20221204153837-dzj7o58",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221204153837-dzj7o58",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"ID": "20221204153837-6ndhzwx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221204153837-6ndhzwx",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-qufce71",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-qufce71",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序运行时代码需要加载到内存"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-xspm1lq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221204153837-xspm1lq",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-6tkvzm4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-6tkvzm4",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序运行产生的中间数据要存放在内存"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-r0em2jf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20221204153837-r0em2jf",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-ocsscch",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-ocsscch",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序中的常量也要保存"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-5fid68c",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20221204153837-5fid68c",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-7wo7iwx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-7wo7iwx",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "有些数据可能需要长时间存储，而有些数据当方法运行结束后就要被销毁"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204154010-fiaf6gh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154010-fiaf6gh",
				"updated": "20221204154010"
			}
		},
		{
			"ID": "20221204153837-82d32yt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-82d32yt",
				"updated": "20221204154005"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "因此"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "JVM"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "也对所使用的内存按照功能的不同进行了划分:\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221203230022"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221203230022-20221204154005-lor729m.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20221204153837-d0u6s55",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221204153837-d0u6s55",
				"updated": "20221204154020"
			},
			"Children": [
				{
					"ID": "20221204153837-gl7p9co",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-gl7p9co",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-6rdet9d",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-6rdet9d",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "程序计数器 (PC Register)"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": ": 只是一个很小的空间, "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "保存下一条执行的指令的地址"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-13shhmo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-13shhmo",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-p9v9wla",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-p9v9wla",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "虚拟机栈( JVM Stack)"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": ": 与方法调用相关的一些信息，"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "每个方法在执行时，都会先创建一个栈帧"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，栈帧中包含有： "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "局部变量表、操作数栈、动态链接、返回地址"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "以及其他的一些信息，保存的都是与方法执行时相关的一些信 息。比如：局部变量。"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当方法运行结束后，栈帧就被销毁了，即栈帧中保存的数据也被销毁了"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-lzh1zy9",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-lzh1zy9",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-9atz2aa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-9atz2aa",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "本地方法栈(Native Method Stack)"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": ": 本地方法栈与虚拟机栈的作用类似. 只不过"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "保存的内容是Native方法的局部变量"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": ". 在有些版本的 JVM 实现中(例如HotSpot), 本地方法栈和虚拟机栈是一起的"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-0vy2uee",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-0vy2uee",
						"updated": "20221204154020"
					},
					"Children": [
						{
							"ID": "20221204153837-lkwcl0p",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-lkwcl0p",
								"updated": "20221204154020"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "堆(Heap)"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": ": JVM所管理的最大内存区域. 使用  "
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "new 创建的对象都是在堆上保存"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " (例如前面的   "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "new int[]{1, 2, 3}"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": " )，"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "堆是随着程序开始运行时而创建，随着程序的退出而销毁，堆中的数据只要还有在使用，就不会被销毁"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "。"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-fh52hee",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-fh52hee",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-q2jdemq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-q2jdemq",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeMark",
									"Data": "mark",
									"Children": [
										{
											"Type": "NodeMark2OpenMarker"
										},
										{
											"Type": "NodeStrong",
											"Data": "strong",
											"Children": [
												{
													"Type": "NodeStrongA6kOpenMarker",
													"Data": "**"
												},
												{
													"Type": "NodeText",
													"Data": "方法区(Method Area)"
												},
												{
													"Type": "NodeStrongA6kCloseMarker",
													"Data": "**"
												}
											]
										},
										{
											"Type": "NodeMark2CloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": ": 用于"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": ". 方法编译出的的字节码就是保存在这个区域"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-6py6fau",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-6py6fau",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "现在我们只简单关心堆  和  虚拟机栈这两块空间，后序JVM中还会更详细介绍。"
				}
			]
		},
		{
			"ID": "20221204154026-g2iz8lb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154026-g2iz8lb"
			}
		},
		{
			"ID": "20221204153837-9d8stw5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-9d8stw5",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本类型变量与引用类型变量的区别"
				}
			]
		},
		{
			"ID": "20221204153837-sq1fsig",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-sq1fsig",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本数据类型创建的变量，称为基本变量，该变量空间中直接存放的是其所对应的值；"
				}
			]
		},
		{
			"ID": "20221204153837-tj5cknu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-tj5cknu",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "而引用数据类型创建的变量，一般称为对象的引用，其空间中存储的是对象所在空间的地址。"
				}
			]
		},
		{
			"ID": "20221204153837-9sbv9lp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-9sbv9lp",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void func() {\n   int a = 10;\n   int b = 20;\n   int[] arr = new int[]{1,2,3}; \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-30f0b77",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-30f0b77",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在上述代码中，"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "a"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "b"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "arr"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，都是函数内部的变量，因此其空间都在"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "main方法对应的栈帧中分配"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。\n"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "a"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "、"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "b"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "是内置类型的变量，因此其空间中保存的就是给该变量初始化的值。\narray是数组类型的"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "引用变量"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，其内部保存的内容可以简单理解成是数组在"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "堆空间"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "中的首地址。"
				}
			]
		},
		{
			"ID": "20221204153837-iwjrz17",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-iwjrz17",
				"updated": "20221204154033"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221203230729"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221203230729-20221204154033-13l5v8b.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n从上图可以看到，"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "引用变量并不直接存储对象本身，可以简单理解成存储的是对象在堆中空间的起始地址。通过该地址，引用变量便可以去操作对象"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。有点类似C语言中的指针，但是Java中引用要比指针的操作更简单。"
				}
			]
		},
		{
			"ID": "20221204154036-v5tm31m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154036-v5tm31m"
			}
		},
		{
			"ID": "20221204153837-mftsl2o",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-mftsl2o",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "再谈引用变量"
				}
			]
		},
		{
			"ID": "20221204153837-el8d19p",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-el8d19p",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void func() { \n   int[] array1 = new int[3];\n   array1[0] = 10;\n   array1[1] = 20;\n   array1[2] = 30;\n   \n   int[] array2 = new int[]{1,2,3,4,5};\n   array2[0] = 100;\n   array2[1] = 200;\n   \n   array1 = array2;\n   array1[2] = 300;\n   array1[3] = 400;\n   array2[4] = 500;\n   for (int i = 0; i \u003c array2.length; i++) { \n      System.out.println(array2[i]);\n\t} \n}\n\n//运行结果\n//100\n//200\n//300\n//400\n//500\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-1x6caoz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-1x6caoz",
				"updated": "20221204154043"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221203230909"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221203230909-20221204154043-7qo9i23.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-h2wekhl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-h2wekhl",
				"updated": "20221204154048"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221203230916"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221203230916-20221204154048-n236hmm.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221204154050-l458nhj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154050-l458nhj"
			}
		},
		{
			"ID": "20221204153837-lu5be2o",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-lu5be2o",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "认识 null"
				}
			]
		},
		{
			"ID": "20221204153837-6buf2d3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-6buf2d3",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "null 在 Java 中表示 \"空引用\" , 也就是一个不指向对象的引用."
				}
			]
		},
		{
			"ID": "20221204153837-hthzwbz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-hthzwbz",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] arr = null;\nSystem.out.println(arr[0]); \n\n// 执行结果\nException in thread \"main\" java.lang.NullPointerExceptionat Test.main(Test.java:6)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-dddk11x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-dddk11x",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "null"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的作用类似于 C 语言中的 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "NULL"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " (空指针), 都是表示一个无效的内存位置. 因此不能对这个内存进行任何读写操作. 一旦尝试读写, 就会抛出 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "NullPointerException"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "异常."
				}
			]
		},
		{
			"ID": "20221204153837-zxm60yf",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221204153837-zxm60yf",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221204153837-742tf7f",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221204153837-742tf7f",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "注意: Java 中并没有约定 null 和 0 号地址的内存有任何关联."
						}
					]
				}
			]
		},
		{
			"ID": "20221204154055-37ink41",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154055-37ink41"
			}
		},
		{
			"ID": "20221204153837-xz7pbzv",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221204153837-xz7pbzv",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组的应用场景"
				}
			]
		},
		{
			"ID": "20221204153837-sv06gok",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-sv06gok",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "保存数据"
				}
			]
		},
		{
			"ID": "20221204153837-7etbskw",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-7etbskw",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) { \n   int[] array = {1, 2, 3};\n   for(int i = 0; i \u003c array.length; ++i){ \n       System.out.println(array[i] + \" \"); \n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-mjzapg9",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-mjzapg9",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作为函数的参数"
				}
			]
		},
		{
			"ID": "20221204153837-0b7tilu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-0b7tilu",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "1. 参数传基本数据类型"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-2xqfxxk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-2xqfxxk",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) { \n   int num = 0;\n   func(num);\n   System.out.println(\"num = \" + num); \n}\n\npublic static void func(int x) { \n   x = 10;\n   System.out.println(\"x = \" + x); \n}\n\n// 执行结果 \nx = 10 \nnum = 0\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-go83yz4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-go83yz4",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发现在func方法中修改形参 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "x"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的值, 不影响实参的 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "num"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 值."
				}
			]
		},
		{
			"ID": "20221204153837-0xknnbc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-0xknnbc",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "2. 参数传数组类型(引用数据类型)"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-gqykshs",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-gqykshs",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) { \n   int[] arr = {1, 2, 3};\n   func(arr);\n   System.out.println(\"arr[0] = \" + arr[0]); \n}\n\npublic static void func(int[] a) { \n   a[0] = 10;\n   System.out.println(\"a[0] = \" + a[0]); \n}\n\n// 执行结果 \na[0] = 10 \narr[0] = 10\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-sog9qbz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-sog9qbz",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发现在func方法内部修改数组的内容, 方法外部的数组内容也发生改变.\n因为数组是引用类型，按照引用类型来进行传递，是可以修改其中存放的内容的。"
				}
			]
		},
		{
			"ID": "20221204153837-p21e8u6",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-p21e8u6",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "总结"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ": 所谓的 \"引用\" 本质上只是存了一个地址. Java 将数组设定成引用类型, 这样的话后续进行数组参数传参, 其实只是将数组的地址传入到函数形参中. 这样可以避免对整个数组的拷贝(数组可能比较长, 那么拷贝开销就会很大)."
				}
			]
		},
		{
			"ID": "20221204154100-kwo6dxi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154100-kwo6dxi"
			}
		},
		{
			"ID": "20221204153837-e973qib",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-e973qib",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "作为函数的返回值"
				}
			]
		},
		{
			"ID": "20221204153837-8ofhfav",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-8ofhfav",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "比如：获取斐波那契数列的前N项比如："
				}
			]
		},
		{
			"ID": "20221204153837-o1phoh3",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-o1phoh3",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class array {  \n    public static int[] fib(int n){  \n        if(n \u003c= 0 ){  \n            return null;  \n        }  \n        int[] array = new int[n];  \n        array[0] = array[1] = 1;  \n        for(int i = 2; i \u003c n ;++i){  \n            array[i] = array[i-1]+array[i-2];  \n        }  \n  \n        return array;  \n    }  \n  \n    public static void main(String[] args) {  \n        int[] array = fib(10);  \n  \n        for (int i = 0; i \u003c array.length; i++) {  \n            System.out.println(array[i]);  \n        }  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-xadwpfr",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221204153837-xadwpfr",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组练习"
				}
			]
		},
		{
			"ID": "20221204153837-91k5o9z",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-91k5o9z",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组转字符串"
				}
			]
		},
		{
			"ID": "20221204153837-mh5jj98",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-mh5jj98",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import java.util.Arrays \nint[] arr = {1,2,3,4,5,6};\nString newArr = Arrays.toString(arr); \nSystem.out.println(newArr);\n\n// 执行结果\n[1, 2, 3, 4, 5, 6]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-xn2de4m",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-xn2de4m",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "使用这个方法后续打印数组就更方便一些.\nJava 中提供了 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "java.util.Arrays"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 包, 其中包含了一些操作数组的常用方法."
				}
			]
		},
		{
			"ID": "20221204153837-44f1ypx",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-44f1ypx",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组拷贝"
				}
			]
		},
		{
			"ID": "20221204153837-2f7x7x2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-2f7x7x2",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例"
				}
			]
		},
		{
			"ID": "20221204153837-vw21wwc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-vw21wwc",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n    // newArr和arr引用的是同一个数组  \n    // 因此newArr修改空间中内容之后，arr也可以看到修改的结果  \n    int[] arr = {1,2,3,4,5,6};  \n    int[] newArr = arr;  \n    newArr[0] = 10;  \n    System.out.println(\"newArr = \"+ Arrays.toString(arr));  \n  \n    System.out.println();  \n  \n    // 使用Arrays中copyOf方法完成数组的拷贝：  \n    // copyOf方法在进行数组拷贝时，创建了一个新的数组  \n    // arr和newArr引用的不是同一个数组  \n    arr[0] = 1;  \n    newArr = Arrays.copyOf(arr , arr.length);  \n    System.out.println(\"arr = \"+ Arrays.toString(arr));  \n    System.out.println(\"newArr = \"+ Arrays.toString(newArr));  \n  \n    // 因为arr修改其引用数组中内容时，对newArr没有任何影响  \n    arr[0] = 100;  \n    System.out.println(\"arr = \"+ Arrays.toString(arr));  \n    System.out.println(\"newArr = \"+ Arrays.toString(newArr));  \n  \n    System.out.println();  \n  \n    // 拷贝某个范围.  \n    int[] newArr2 = Arrays.copyOfRange(arr , 2, 4);  \n    System.out.println(\"newArr2 = \"+ Arrays.toString(newArr2));  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-k7yaruc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-k7yaruc",
				"updated": "20221204154108"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221204141913"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221204141913-20221204154108-slu6hva.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-0bx5puf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-0bx5puf",
				"updated": "20221204154114"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221204141926"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221204141926-20221204154114-p59gpd6.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-j2yr38r",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-j2yr38r",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：数组当中存储的是基本类型数据时，不论怎么拷贝基本都不会出现什么问题，但如果存储的是引用数据类型，拷贝时需要考虑深浅拷贝的问题，关于深浅拷贝在后续详细给大家介绍。"
				}
			]
		},
		{
			"ID": "20221204154117-rg7pwtw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154117-rg7pwtw"
			}
		},
		{
			"ID": "20221204153837-e7p6z6w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-e7p6z6w",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "实现自己版本的拷贝数组"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-xa6j0vz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-xa6j0vz",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static int[] copyOf(int[] arr) {  \n    int[] ret = new int[arr.length];  \n    for (int i = 0; i \u003c arr.length; i++) {  \n        ret[i] = arr[i];  \n    }  \n  \n    return ret;  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204154120-ej5nu23",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154120-ej5nu23"
			}
		},
		{
			"ID": "20221204153837-38j2yak",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-38j2yak",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "求数组中元素的平均值"
				}
			]
		},
		{
			"ID": "20221204153837-72zni5i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-72zni5i",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个整型数组, 求平均值"
				}
			]
		},
		{
			"ID": "20221204153837-b1qsu9n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-b1qsu9n",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "代码示例"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-jlziu0q",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-jlziu0q",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n    int[] arr = {1,2,3,4,5,6};  \n    System.out.println(avg(arr));  \n}  \n\npublic static double avg(int[] arr) {  \n    int sum = 0;  \n    for (int x : arr) {  \n        sum += x;  \n    }  \n    return (double)sum / (double)arr.length;  \n}\n\n// 执行结果\n3.5\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204154122-3z2qwnf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154122-3z2qwnf"
			}
		},
		{
			"ID": "20221204153837-76fb9q4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-76fb9q4",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查找数组中指定元素(顺序查找)"
				}
			]
		},
		{
			"ID": "20221204153837-ps06jfi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-ps06jfi",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个数组, 再给定一个元素, 找出该元素在数组中的位置.\n"
				}
			]
		},
		{
			"ID": "20221204154125-oprzu69",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154125-oprzu69"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "代码示例"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-sp0lax7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-sp0lax7",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n        int[] arr = {1,2,3,10,5,6};  \n        System.out.println(find(arr, 10));  \n} \n\npublic static int find(int[] arr, int data) {  \n\tfor (int i = 0; i \u003c arr.length; i++) {  \n\t\tif (arr[i] == data) {  \n\t\t\treturn i;  \n\t\t}  \n\t}  \n\treturn -1; // 表示没有找到  \n}\n\n// 执行结果\n3\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204154126-pnodx0z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154126-pnodx0z"
			}
		},
		{
			"ID": "20221204153837-d3rcb4w",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-d3rcb4w",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "查找数组中指定元素(二分查找)"
				}
			]
		},
		{
			"ID": "20221204153837-nljeose",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-nljeose",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "针对"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "有序数组"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": ", 可以使用更高效的二分查找."
				}
			]
		},
		{
			"ID": "20221204153837-zvtb9uh",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20221204153837-zvtb9uh",
				"updated": "20221204154142"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20221204153837-bi8drkj",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20221204153837-bi8drkj",
						"updated": "20221204154142"
					},
					"Children": [
						{
							"Type": "NodeMark",
							"Data": "mark",
							"Children": [
								{
									"Type": "NodeMark2OpenMarker"
								},
								{
									"Type": "NodeText",
									"Data": "啥叫有序数组?"
								},
								{
									"Type": "NodeMark2CloseMarker"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "\n有序分为 \"升序\" 和 \"降序\"\n如 1 2 3 4 , 依次递增即为升序.\n如 4 3 2 1 , 依次递减即为降序."
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-ahqjtlv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-ahqjtlv",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "以升序数组为例, 二分查找的思路是先取中间位置的元素, 然后使用待查找元素与数组中间元素进行比较："
				}
			]
		},
		{
			"ID": "20221204153837-3ct4uob",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221204153837-3ct4uob",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"ID": "20221204153837-rvnl6nh",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-rvnl6nh",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-xxqh3cf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-xxqh3cf",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果相等，即找到了返回该元素在数组中的下标"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-wvag6s4",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-wvag6s4",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-1vm04cv",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-1vm04cv",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果小于，以类似方式到数组左半侧查找"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-du0ykrm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-du0ykrm",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-jmlub47",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-jmlub47",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果大于，以类似方式到数组右半侧查找"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204154148-9ymaute",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154148-9ymaute"
			}
		},
		{
			"ID": "20221204153837-2o882hd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-2o882hd",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这里我们如果找到就返回数组下标， 没找到就返回-1。"
				}
			]
		},
		{
			"ID": "20221204153837-kyenz1c",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-kyenz1c",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class array {  \n    public static void main(String[] args) {  \n        int[] arr = {1,2,3,4,5,6,7,8,9,10};  \n        System.out.println(binarySearch(arr , 6));  \n    }  \n  \n    public static int binarySearch(int[] arr , int target){  \n        int left = 0;  \n        int right = arr.length-1;  \n        while(left \u003c= right){  \n            int mid = (left + right) / 2;  \n            if(arr[mid] \u003e target){  \n                right = mid-1;  \n            }else if (arr[mid] \u003c target){  \n                left = mid+1;  \n            }else{  \n                return mid;  \n            }  \n        }  \n        return -1;  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-ytj4akl",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-ytj4akl",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到, 针对一个长度为 10000 个元素的数组查找, 二分查找只需要循环 14 次就能完成查找. 随着数组元素个数越多, 二分的优势就越大."
				}
			]
		},
		{
			"ID": "20221204153837-n3uma9y",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-n3uma9y",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组排序(冒泡排序)"
				}
			]
		},
		{
			"ID": "20221204153837-jtd0bls",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-jtd0bls",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个数组, 让数组升序 (降序) 排序."
				}
			]
		},
		{
			"ID": "20221204153837-r4nu14h",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-r4nu14h",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "算法思路"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n假设排升序："
				}
			]
		},
		{
			"ID": "20221204153837-bhpe7aj",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20221204153837-bhpe7aj",
				"updated": "20221204154203"
			},
			"Children": [
				{
					"ID": "20221204153837-5lmwxnz",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20221204153837-5lmwxnz",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-103swum",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-103swum",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "将数组中相邻元素从前往后依次进行比较，如果前一个元素比后一个元素大，则交换，一趟下来后最大元素就在数组的末尾"
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-emflqgo",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20221204153837-emflqgo",
						"updated": "20221204154203"
					},
					"Children": [
						{
							"ID": "20221204153837-s6h2jkx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-s6h2jkx",
								"updated": "20221204154203"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "依次从上上述过程，直到数组中所有的元素都排列好\n​"
								},
								{
									"Type": "NodeImage",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeBang"
										},
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "Pasted image 20221204152016"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "assets/Pasted image 20221204152016-20221204154203-e1bzmxb.png"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-gi0cbhc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-gi0cbhc",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class array{  \n    public static void main(String[] args) {  \n        int[] arr = {9, 5, 2, 7 , 6,10 ,5};  \n        System.out.println(Arrays.toString(arr));  \n        bubbleSort(arr);  \n        System.out.println(Arrays.toString(arr));  \n    }  \n  \n    public static void bubbleSort(int[] arr){  \n        for( int i = 0;  i \u003c arr.length ; i++){  \n            for(int j = 1 ; j \u003c arr.length - i ; j++ ){  \n                if(arr[j] \u003c arr[j-1]){  \n                    int tmp = arr[j];  \n                    arr[j] = arr[j-1];  \n                    arr[j-1] = tmp;  \n                }  \n            }  \n        }  \n    }  \n}\n\n//执行结果\n[9, 5, 2, 7, 6, 10, 5]\n[2, 5, 5, 6, 7, 9, 10]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204154208-9ktlxwi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154208-9ktlxwi"
			}
		},
		{
			"ID": "20221204153837-8yluwvr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-8yluwvr",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "冒泡排序性能较低. Java 中内置了更高效的排序算法"
				}
			]
		},
		{
			"ID": "20221204153837-cf9ykx9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-cf9ykx9",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {  \n    int[] arr = {9, 5, 2, 7};  \n    Arrays.sort(arr);  \n    System.out.println(Arrays.toString(arr));  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-yqtgh34",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-yqtgh34",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于 "
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "Arrays.sort"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": " 的具体实现算法, 我们在后面的排序算法课上再详细介绍. 到时候我们会介绍很多种常见排序算法."
				}
			]
		},
		{
			"ID": "20221204153837-5e9i1dr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221204153837-5e9i1dr",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "数组逆序"
				}
			]
		},
		{
			"ID": "20221204153837-w15710z",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-w15710z",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "给定一个数组, 将里面的元素逆序排列."
				}
			]
		},
		{
			"ID": "20221204153837-zlhhus3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-zlhhus3",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "思路"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-cd185tn",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20221204153837-cd185tn",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"ID": "20221204153837-fmex9zt",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-fmex9zt",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-hy7fnsc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-hy7fnsc",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "设定两个下标, 分别指向第一个元素和最后一个元素. 交换两个位置的元素."
								}
							]
						}
					]
				},
				{
					"ID": "20221204153837-9hwt5cr",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20221204153837-9hwt5cr",
						"updated": "20221204153837"
					},
					"Children": [
						{
							"ID": "20221204153837-vt3228v",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20221204153837-vt3228v",
								"updated": "20221204153837"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "然后让前一个下标自增, 后一个下标自减, 循环继续即可."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20221204153837-jug8cs1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-jug8cs1",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码示例"
				}
			]
		},
		{
			"ID": "20221204153837-dfmtr6k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-dfmtr6k",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class array{  \n    public static void main(String[] args) {  \n        int[] arr = {1, 2, 3, 4 ,5,6,7};  \n        System.out.println(Arrays.toString(arr));  \n        reverse(arr);  \n        System.out.println(Arrays.toString(arr));  \n    }  \n  \n    public static void reverse(int[] arr){  \n        int left = 0 ;  \n        int right = arr.length-1;  \n        while(left \u003c right){ //left ==right 时说明已经到中间位置了，无需交换了  \n            int temp = arr[left];  \n            arr[left] = arr[right];  \n            arr[right] = temp;  \n            left++;  \n            right--;  \n        }  \n    }  \n}\n\n//运行结果\n[1, 2, 3, 4, 5, 6, 7]\n[7, 6, 5, 4, 3, 2, 1]\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204154214-soqcj3t",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154214-soqcj3t"
			}
		},
		{
			"ID": "20221204153837-ygiviam",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221204153837-ygiviam",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组"
				}
			]
		},
		{
			"ID": "20221204153837-i7pebrx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-i7pebrx",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组本质上也就是一维数组, 只不过每个元素又是一个一维数组."
				}
			]
		},
		{
			"ID": "20221204153837-ms2i1qj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-ms2i1qj",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本语法"
				}
			]
		},
		{
			"ID": "20221204153837-82leyki",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-82leyki",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "数据类型[][] 数组名称 = new 数据类型 [行数][列数] { 初始化数据 };\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-aritald",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-aritald",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "代码实例："
				}
			]
		},
		{
			"ID": "20221204153837-5nqoahy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221204153837-5nqoahy",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": " int[][] arr = {  \n\t\t{1, 2, 3, 4},  \n\t\t{5, 6, 7, 8},  \n\t\t{9, 10, 11, 12}  \n};  \nfor (int row = 0; row \u003c arr.length; row++) {  \n\tfor (int col = 0; col \u003c arr[row].length; col++) {  \n\t\tSystem.out.printf(\"%d\\t\", arr[row][col]);  \n\t}  \n\tSystem.out.println(\"\");  \n}\n\n// 执行结果\n1   2   3   4\n5   6   7   8\n9   10  11  12\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221204153837-h9z3qm0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204153837-h9z3qm0",
				"updated": "20221204153837"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二维数组的用法和一维数组并没有明显差别, 因此我们不再赘述.\n同理, 还存在 \"三维数组\", \"四维数组\" 等更复杂的数组, 只不过出现频率都很低."
				}
			]
		},
		{
			"ID": "20221204154224-ep4yhug",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221204154224-ep4yhug"
			}
		}
	]
}