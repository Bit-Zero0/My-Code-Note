{
	"ID": "20230423123523-xz89ae0",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230423123523-xz89ae0",
		"title": "包装类",
		"updated": "20230423123532"
	},
	"Children": [
		{
			"ID": "20230423123532-xw0mx68",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123532-xw0mx68",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在Java中，由于基本类型不是继承自Object，为了在泛型代码中可以支持基本类型，Java给每个基本类型都对应了一个包装类型。"
				}
			]
		},
		{
			"ID": "20230423123532-iekucdt",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423123532-iekucdt",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "基本数据类型和对应的包装类"
				}
			]
		},
		{
			"ID": "20230423123532-3tc9gx4",
			"Type": "NodeTable",
			"TableAligns": [
				2,
				2
			],
			"Properties": {
				"colgroup": "|",
				"id": "20230423123532-3tc9gx4",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeTableHead",
					"Data": "thead",
					"Children": [
						{
							"Type": "NodeTableRow",
							"Data": "tr",
							"Children": [
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "基本数据类型"
										}
									]
								},
								{
									"Type": "NodeTableCell",
									"Data": "th",
									"TableCellAlign": 2,
									"Children": [
										{
											"Type": "NodeText",
											"Data": "包装类"
										}
									]
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "byte"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Byte"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "short"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Short"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "int"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Integer"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "long"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Long"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "float"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Float"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "double"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Double"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "char"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Character"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "boolean"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "Boolean"
								}
							]
						}
					]
				},
				{
					"Type": "NodeTableRow",
					"Data": "tr",
					"Children": [
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2,
							"Children": [
								{
									"Type": "NodeText",
									"Data": "除了 Integer 和 Character， 其余基本类型的包装类都是首字母大写。"
								}
							]
						},
						{
							"Type": "NodeTableCell",
							"Data": "td",
							"TableCellAlign": 2
						}
					]
				}
			]
		},
		{
			"ID": "20230423123532-1k6rizd",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423123532-1k6rizd",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "装箱和拆箱"
				}
			]
		},
		{
			"ID": "20230423123532-tba2yu2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123532-tba2yu2",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class test {  \n    public static void main(String[] args) {  \n        int a = 10;  \n    \n        Integer b = a; // 自动装箱  \n        Integer c = (Integer)a; // 自动装箱  \n    \n        int j = b; // 自动拆箱  \n        int k = (int)b; // 自动拆箱  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123532-wz3berq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123532-wz3berq",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230422214706.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423123532-0tslof0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123532-0tslof0",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【面试题】"
				},
				{
					"Type": "NodeText",
					"Data": "\n下列代码输出什么，为什么？"
				}
			]
		},
		{
			"ID": "20230423123532-5far7ly",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123532-5far7ly",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\tInteger a = 127;\n\tInteger b = 127;\n\tInteger c = 128;\n\tInteger d = 128;\n\tSystem.out.println(a == b);\n\tSystem.out.println(c == d);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123532-dssnhow",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123532-dssnhow",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "答案:"
				}
			]
		},
		{
			"ID": "20230423123532-jbmscj4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123532-jbmscj4",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "true\nfalse\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123532-w5oy12n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123532-w5oy12n",
				"updated": "20230423123532"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "这是因为J"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "ava会在编译时自动装箱将int类型转换为Integer对象，JVM会尽可能利用已有的对象以提高运行效率，为此，Java在执行自动装箱时维护了一个缓存池，当值处于-128到127之间时，获取对应的Integer对象时直接从缓存池中取得"
				},
				{
					"Type": "NodeText",
					"Data": "。\n在本例中，a和b变量的值都在缓存池所代表的范围内（即都等于127），因此它们实际上引用的是同一个对象，所以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "a==b"
				},
				{
					"Type": "NodeText",
					"Data": "​返回true；而c和d的值超过了缓存池的范围，因此它们引用的不是同一个对象，所以"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "c==d"
				},
				{
					"Type": "NodeText",
					"Data": "​返回false。"
				}
			]
		}
	]
}