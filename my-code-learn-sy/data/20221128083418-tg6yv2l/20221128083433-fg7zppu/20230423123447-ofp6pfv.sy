{
	"ID": "20230423123447-ofp6pfv",
	"Spec": "1",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230423123447-ofp6pfv",
		"title": "异常",
		"updated": "20230423123509"
	},
	"Children": [
		{
			"ID": "20230423123501-5fftyr9",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423123501-5fftyr9",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常的概念"
				}
			]
		},
		{
			"ID": "20230423123501-8ifwnqs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-8ifwnqs",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在生活中，一个人表情痛苦，出于关心，可能会问：你是不是生病了，需要我陪你去看医生吗？"
				}
			]
		},
		{
			"ID": "20230423123501-pos9x2s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-pos9x2s",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在程序中也是一样，程序猿是一帮办事严谨、追求完美的高科技人才。在日常开发中，绞尽脑汁将代码写的尽善尽美，在程序运行过程中，难免会出现一些奇奇怪怪的问题。有时通过代码很难去控制，比如：数据格式不对、网络不通畅、内存报警等。"
				}
			]
		},
		{
			"ID": "20230423123501-bku94f3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-bku94f3",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在Java中，将程序执行过程中发生的不正常行为称为异常"
				},
				{
					"Type": "NodeText",
					"Data": "。比如之前写代码时经常遇到的："
				}
			]
		},
		{
			"ID": "20230423123501-5hcd973",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-5hcd973",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-661bq1f",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423123501-661bq1f",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-bzeslth",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-bzeslth",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "算术异常"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-1n18hlp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-1n18hlp",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "System.out.println(10 / 0);\n\n// 执行结果\nException in thread \"main\" java.lang.ArithmeticException: / by zero\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-tluwpna",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-tluwpna",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-4zoysgv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423123501-4zoysgv",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-1bmt9jd",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-1bmt9jd",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "数组越界异常"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-yaxcfxb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-yaxcfxb",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] arr = {1, 2, 3};\nSystem.out.println(arr[100]);\n\n// 执行结果\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 100\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-vg4yivg",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-vg4yivg",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-c3lil2z",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423123501-c3lil2z",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-mftllo9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-mftllo9",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "空指针异常"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-vsxoah5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-vsxoah5",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "int[] arr = null;\nSystem.out.println(arr.length());\n\n// 执行结果\nException in thread \"main\" java.lang.NullPointerException\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-yqpuakm",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-yqpuakm",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "从上述过程中可以看到，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "java中不同类型的异常，都有与其对应的类来进行描述"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423123501-zmu354g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-zmu354g",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常的体系结构\n异常种类繁多，为了对不同异常或者错误进行很好的分类管理，Java内部维护了一个异常的体系结构：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230422154813.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n从上图中可以看到："
				}
			]
		},
		{
			"ID": "20230423123501-zudw9a4",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-zudw9a4",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-6jftrjg",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423123501-6jftrjg",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-s2milgo",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-s2milgo",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Throwable"
								},
								{
									"Type": "NodeText",
									"Data": "：是异常体系的顶层类，其派生出两个重要的子类, "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Error"
								},
								{
									"Type": "NodeText",
									"Data": " 和 "
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Exception"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-d7ekj5r",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423123501-d7ekj5r",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-n3bi482",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-n3bi482",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Error"
								},
								{
									"Type": "NodeText",
									"Data": "：指的是Java虚拟机无法解决的严重问题，比如：JVM的内部错误、资源耗尽等，典型代表："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "StackOverflowError和OutOfMemoryError"
								},
								{
									"Type": "NodeText",
									"Data": "，一旦发生回力乏术，就像人得了癌症。"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-24xma8b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423123501-24xma8b",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-0b41l42",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-0b41l42",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "Exception"
								},
								{
									"Type": "NodeText",
									"Data": "：异常产生后程序员可以通过代码进行处理，使程序继续执行。比如：感冒、发烧。我们平时所说的异常就是Exception。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-i6z8y1p",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423123501-i6z8y1p",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常的分类"
				}
			]
		},
		{
			"ID": "20230423123501-v10jecr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-v10jecr",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常可能在编译时发生，也可能在程序运行时发生，根据发生的时机不同，可以将异常分为：编译时异常 和 运行时异常"
				}
			]
		},
		{
			"ID": "20230423123501-p95l29n",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423123501-p95l29n",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "编译时异常"
				}
			]
		},
		{
			"ID": "20230423123501-o589v2n",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-o589v2n",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "程序编译期间发生的异常"
				},
				{
					"Type": "NodeText",
					"Data": "，称为编译时异常，也称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "受检查异常"
				},
				{
					"Type": "NodeText",
					"Data": "(Checked Exception)"
				}
			]
		},
		{
			"ID": "20230423123501-t7ybc2k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-t7ybc2k",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Person {\n\tprivate String name;\n\tprivate String gender;\n\tint age;\n\n\t// 想要让该类支持深拷贝，覆写Object类的clone方法即可\n\t@Override\n\tpublic Person clone() {\n\t\treturn (Person)super.clone();\n\t}\n}\n\n编译时报错：\nError:(17, 35) java: 未报告的异常错误java.lang.CloneNotSupportedException; 必须对其进行捕获或声明以便抛出\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-fyhauu4",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423123501-fyhauu4",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行时异常"
				}
			]
		},
		{
			"ID": "20230423123501-uih2umk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-uih2umk",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "程序执行期间发生的异常"
				},
				{
					"Type": "NodeText",
					"Data": "，称为运行时异常，也称为"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "非受检查异常"
				},
				{
					"Type": "NodeText",
					"Data": "(Unchecked Exception)\n"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "RunTimeException以及其子类对应的异常，都称为运行时异常"
				},
				{
					"Type": "NodeText",
					"Data": "。比如NullPointerException、ArrayIndexOutOfBoundsException、ArithmeticException。"
				}
			]
		},
		{
			"ID": "20230423123501-5i4ddzs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-5i4ddzs",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "注意：编译时出现的语法性错误，不能称之为异常。例如将 System.out.println 拼写错了, 写成了system.out.println. 此时编译过程中就会出错, 这是 \"编译期\" 出错。而运行时指的是程序已经编译通过得到class 文件了, 再由 JVM 执行过程中出现的错误."
				}
			]
		},
		{
			"ID": "20230423123501-wy454om",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423123501-wy454om",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常的处理"
				}
			]
		},
		{
			"ID": "20230423123501-cuw9yf2",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423123501-cuw9yf2",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "防御式编程"
				}
			]
		},
		{
			"ID": "20230423123501-w0jpfwa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-w0jpfwa",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "错误在代码中是客观存在的. 因此我们要让程序出现问题的时候及时通知程序猿. 主要的方式"
				}
			]
		},
		{
			"ID": "20230423123501-3es53y9",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-3es53y9",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-vzf716o",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423123501-vzf716o",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-ucg6ttz",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-ucg6ttz",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "LBYL"
								},
								{
									"Type": "NodeText",
									"Data": "(Look Before You Leap): 在操作之前就做充分的检查. 即："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "事前防御型"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-2s43byy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-2s43byy",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "boolean ret = false;\nret = 登陆游戏();\nif (!ret) {\n\t处理登陆游戏错误;\n\treturn;\n}\n\nret = 开始匹配();\nif (!ret) {\n\t处理匹配错误;\n\treturn;\n}\n\nret = 游戏确认();\nif (!ret) {\n\t处理游戏确认错误;\n\treturn;\n}\n\nret = 选择英雄();\nif (!ret) {\n\t处理选择英雄错误;\n\treturn;\n}\n\nret = 载入游戏画面();\nif (!ret) {\n\t处理载入游戏错误;\n\treturn;\n}\n......\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-ej5gsos",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-ej5gsos",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "缺陷：正常流程和错误处理流程代码混在一起, 代码整体显的比较混乱。"
				}
			]
		},
		{
			"ID": "20230423123501-o1dt8vp",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-o1dt8vp",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-3m6ui12",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423123501-3m6ui12",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-ll0ujnj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-ll0ujnj",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "EAFP"
								},
								{
									"Type": "NodeText",
									"Data": "(It's Easier to Ask Forgiveness than Permission) : \"事后获取原谅比事前获取许可更容易\". 也就是先操作,遇到问题再处理. 即："
								},
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "事后认错型"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-p7m3prk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-p7m3prk",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "try {\n\t登陆游戏();\n\t开始匹配();\n\t游戏确认();\n\t选择英雄();\n\t载入游戏画面();\n\t...\n} catch (登陆游戏异常) {\n\t处理登陆游戏异常;\n} catch (开始匹配异常) {\n\t处理开始匹配异常;\n} catch (游戏确认异常) {\n\t处理游戏确认异常;\n} catch (选择英雄异常) {\n\t处理选择英雄异常;\n} catch (载入游戏画面异常) {\n\t处理载入游戏画面异常;\n}\n...\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-pno8tk8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-pno8tk8",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "优势：正常流程和错误流程是分离开的, 程序员更关注正常流程，代码更清晰，容易理解代码"
				}
			]
		},
		{
			"ID": "20230423123501-r0qs6bi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-r0qs6bi",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "异常处理的核心思想就是 EAFP"
				},
				{
					"Type": "NodeText",
					"Data": "。\n在Java中，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "异常处理主要的5个关键字"
				},
				{
					"Type": "NodeText",
					"Data": "："
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "throw、try、catch、final、throw"
				},
				{
					"Type": "NodeText",
					"Data": "​s。"
				}
			]
		},
		{
			"ID": "20230423123501-758gblh",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423123501-758gblh",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常的抛出"
				}
			]
		},
		{
			"ID": "20230423123501-0iix5sg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-0iix5sg",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在编写程序时，如果程序中出现错误，此时就需要将错误的信息告知给调用者，比如：参数检测。\n在Java中，可以借助throw关键字，抛出一个指定的异常对象，将错误信息告知给调用者。具体语法如下："
				}
			]
		},
		{
			"ID": "20230423123501-ihiacia",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-ihiacia",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "throw new XXXException(\"异常产生的原因\");\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-zbx5r39",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-zbx5r39",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "【需求】：实现一个获取数组中任意位置元素的方法。"
				}
			]
		},
		{
			"ID": "20230423123501-j6r8yu7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-j6r8yu7",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static int getElement(int[] array, int index){\n\tif(null == array){\n\t\tthrow new NullPointerException(\"传递的数组为null\");\n\t}\n\tif(index \u003c 0 || index \u003e= array.length){\n\t\tthrow new ArrayIndexOutOfBoundsException(\"传递的数组下标越界\");\n\t}\n\n\treturn array[index];\n}\n\npublic static void main(String[] args) {\n\tint[] array = {1,2,3};\n\tgetElement(array, 3);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-t5lqquk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-t5lqquk",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【注意事项】"
				}
			]
		},
		{
			"ID": "20230423123501-noiipta",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-noiipta",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-r9pwr9r",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423123501-r9pwr9r",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-91da8qa",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-91da8qa",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "throw必须写在方法体内部"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-z5h6hok",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423123501-z5h6hok",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-vzg9h41",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-vzg9h41",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "抛出的对象必须是Exception 或者 Exception 的子类对象"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-xdzfy37",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423123501-xdzfy37",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-q4lnkxk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-q4lnkxk",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果抛出的是 RunTimeException 或者 RunTimeException 的子类，则可以不用处理，直接交给JVM来处理"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-234amsu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423123501-234amsu",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-8fddhxr",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-8fddhxr",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果抛出的是编译时异常，用户必须处理，否则无法通过编译"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-kgwcbv1",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230423123501-kgwcbv1",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-03gkwie",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-03gkwie",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeTextMark",
									"TextMarkType": "strong",
									"TextMarkTextContent": "异常一旦抛出，其后的代码就不会执行"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-q5stcgk",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423123501-q5stcgk",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常的捕获"
				}
			]
		},
		{
			"ID": "20230423123501-rk2nggz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-rk2nggz",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常的捕获，也就是异常的具体处理方式，主要有两种：异常声明throws 以及 try-catch捕获处理。"
				}
			]
		},
		{
			"ID": "20230423123501-robury6",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423123501-robury6",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常声明throws"
				}
			]
		},
		{
			"ID": "20230423123501-djwjbsy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-djwjbsy",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "处在方法声明时参数列表之后，当方法中抛出编译时异常，用户不想处理该异常，此时就可以借助throws将异常抛给方法的调用者来处理。即"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "当前方法不处理异常，提醒方法的调用者处理异常"
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20230423123501-4qerqcy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-4qerqcy",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "语法格式:"
				}
			]
		},
		{
			"ID": "20230423123501-tm88ac0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-tm88ac0",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "修饰符 返回值类型 方法名(参数列表) throws 异常类型1，异常类型2...{\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-5mudidx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-5mudidx",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需求：加载指定的配置文件config.ini"
				}
			]
		},
		{
			"ID": "20230423123501-liz7fne",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-liz7fne",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Config {\n\tFile file;\n\t/*\n\tFileNotFoundException : 编译时异常，表明文件不存在\n\t此处不处理，也没有能力处理，应该将错误信息报告给调用者，让调用者检查文件名字是否给错误了\n\t*/\n\tpublic void OpenConfig(String filename) throws FileNotFoundException{\n\t\tif(filename.equals(\"config.ini\")){\n\t\t\tthrow new FileNotFoundException(\"配置文件名字不对\");\n\t\t}\n\t// 打开文件\n\t}\n\n\tpublic void readConfig(){\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-hysws5k",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-hysws5k",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【注意事项】"
				}
			]
		},
		{
			"ID": "20230423123501-1tusuq2",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-1tusuq2",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-jctwe8r",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423123501-jctwe8r",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-jr6pd8i",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-jr6pd8i",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "throws必须跟在方法的参数列表之后"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-w7l67sf",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423123501-w7l67sf",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-035qmq3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-035qmq3",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "声明的异常必须是 Exception 或者 Exception 的子类"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-wtbc50y",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423123501-wtbc50y",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-k464s3y",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-k464s3y",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "方法内部如果抛出了多个异常，throws之后必须跟多个异常类型，之间用逗号隔开，如果抛出多个异常类型具有父子关系，直接声明父类即可。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-pjulecr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-pjulecr",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Config {\n\tFile file;\n\t// public void OpenConfig(String filename) throws\n\tIOException,FileNotFoundException{\n\t// FileNotFoundException 继承自 IOException\n\tpublic void OpenConfig(String filename) throws IOException{\n\t\tif(filename.endsWith(\".ini\")){\n\t\t\tthrow new IOException(\"文件不是.ini文件\");\n\t\t}\n\t\tif(filename.equals(\"config.ini\")){\n\t\t\tthrow new FileNotFoundException(\"配置文件名字不对\");\n\t\t}\n\t// 打开文件\n\t}\n\n\tpublic void readConfig(){\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-rlmz4pb",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-rlmz4pb",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-3c7edqu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423123501-3c7edqu",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-w1ojlqk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-w1ojlqk",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "调用声明抛出异常的方法时，调用者必须对该异常进行处理，或者继续使用throws抛出"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-o79rk11",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-o79rk11",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) throws IOException {\n\tConfig config = new Config();\n\tconfig.openConfig(\"config.ini\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-divf3qd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-divf3qd",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "将光标放在抛出异常方法上，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "alt + Insert"
				},
				{
					"Type": "NodeText",
					"Data": "​ 快速 处理：\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "image.png"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "https://image-1311137268.cos.ap-chengdu.myqcloud.com/SiYuan/20230422160349.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230423123501-gjcm4vb",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423123501-gjcm4vb",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "try-catch捕获并处理"
				}
			]
		},
		{
			"ID": "20230423123501-y3youdv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-y3youdv",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "throws对异常并没有真正处理，而是将异常报告给抛出异常方法的调用者，由调用者处理。如果真正要对异常进行处理，就需要try-catch。"
				}
			]
		},
		{
			"ID": "20230423123501-bs0k7p8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-bs0k7p8",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "语法格式：\ntry{\n\t// 将可能出现异常的代码放在这里\n}catch(要捕获的异常类型 e){\n\t// 如果try中的代码抛出异常了，此处catch捕获时异常类型与try中抛出的异常类型一致时，或者是try中抛出异常的基类时，就会被捕获到\n\t// 对异常就可以正常处理，处理完成后，跳出try-catch结构，继续执行后序代码\n}catch(异常类型 e){\n\t// 对异常进行处理\n}finally{\n\t// 此处代码一定会被执行到\n}\n\n// 后序代码\n// 当异常被捕获到时，异常就被处理了，这里的后序代码一定会执行\n// 如果捕获了，由于捕获时类型不对，那就没有捕获到，这里的代码就不会被执行\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-a2s93q9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-a2s93q9",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "注意："
				},
				{
					"Type": "NodeText",
					"Data": "\n "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "try中的代码可能会抛出异常，也可能不会"
				}
			]
		},
		{
			"ID": "20230423123501-tmyq4eu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-tmyq4eu",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "需求：读取配置文件，如果配置文件名字不是指定名字，抛出异常，调用者进行异常处理"
				}
			]
		},
		{
			"ID": "20230423123501-siy08yl",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-siy08yl",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Config {  \n    File file;  \n    public void openConfig(String filename) throws FileNotFoundException{  \n        if(!filename.equals(\"config.ini\")){  \n            throw new FileNotFoundException(\"配置文件名字不对\");  \n        }  \n    \n\t// 打开文件  \n    }  \n  \n    public void readConfig(){  \n    }\n  \n    public static void main(String[] args) {  \n        Config config = new Config();  \n        try {  \n            config.openConfig(\"config.txt\");  \n            System.out.println(\"文件打开成功\");  \n        } catch (IOException e) {  \n\t\t\t// 异常的处理方式  \n\t\t\t//System.out.println(e.getMessage()); // 只打印异常信息  \n\t\t\t//System.out.println(e); // 打印异常类型：异常信息  \n            e.printStackTrace(); // 打印信息最全面  \n        }  \n\n\t\t// 一旦异常被捕获处理了，此处的代码会执行  \n        System.out.println(\"异常如果被处理了，这里的代码也可以执行\");  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-it0wssg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-it0wssg",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "关于异常的处理方式"
				}
			]
		},
		{
			"ID": "20230423123501-wfqkmke",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230423123501-wfqkmke",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230423123501-9fvb4co",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423123501-9fvb4co",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "异常的种类有很多, 我们要根据不同的业务场景来决定."
						}
					]
				},
				{
					"ID": "20230423123501-wr4jtp8",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423123501-wr4jtp8",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "对于比较严重的问题(例如和算钱相关的场景), 应该让程序直接崩溃, 防止造成更严重的后果"
						}
					]
				},
				{
					"ID": "20230423123501-sr4gz8p",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423123501-sr4gz8p",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "对于不太严重的问题(大多数场景), 可以记录错误日志, 并通过监控报警程序及时通知程序猿"
						}
					]
				},
				{
					"ID": "20230423123501-hcl2tlb",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423123501-hcl2tlb",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "对于可能会恢复的问题(和网络相关的场景), 可以尝试进行重试."
						}
					]
				},
				{
					"ID": "20230423123501-nssjdza",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423123501-nssjdza",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "在我们当前的代码中采取的是经过简化的第二种方式. 我们记录的错误日志是出现异常的方法调用信息, 能很快速的让我们找到出现异常的位置. 以后在实际工作中我们会采取更完备的方式来记录异常信息."
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-vd33kn4",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-vd33kn4",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "【注意事项】"
				}
			]
		},
		{
			"ID": "20230423123501-782t2vg",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-782t2vg",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-6vyksrv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423123501-6vyksrv",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-afg6hcj",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-afg6hcj",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "try块内抛出异常位置之后的代码将不会被执行"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-up396qq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423123501-up396qq",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-2vrabuf",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-2vrabuf",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果抛出异常类型与catch时异常类型不匹配，即异常不会被成功捕获，也就不会被处理，继续往外抛，直到JVM收到后中断程序----异常是按照类型来捕获的"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-itkllfm",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-itkllfm",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\ttry {\n\t\tint[] array = {1,2,3};\n\t\tSystem.out.println(array[3]); // 此处会抛出数组越界异常\n\t}catch (NullPointerException e){ // 捕获时候捕获的是空指针异常--真正的异常无法被捕获到\n\t\te.printStackTrace();\n\t}\n\n\tSystem.out.println(\"后序代码\");\n}\n\n//执行结果\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 3\nat day20210917.ArrayOperator.main(ArrayOperator.java:24)\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-w4alkwt",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-w4alkwt",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-136tgn4",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230423123501-136tgn4",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-t2ragd6",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-t2ragd6",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "try中可能会抛出多个不同的异常对象，则必须用多个catch来捕获----即多种异常，多次捕获"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-jj4suz5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-jj4suz5",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\tint[] arr = {1, 2, 3};\n\ttry {\n\t\tSystem.out.println(\"before\");\n\t\t// arr = null;\n\t\tSystem.out.println(arr[100]);\n\t\tSystem.out.println(\"after\");\n\t} catch (ArrayIndexOutOfBoundsException e) {\n\t\tSystem.out.println(\"这是个数组下标越界异常\");\n\t\te.printStackTrace();\n\t} catch (NullPointerException e) {\n\t\tSystem.out.println(\"这是个空指针异常\");\n\t\te.printStackTrace();\n\t}\n\n\tSystem.out.println(\"after try catch\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-b42zmrr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-b42zmrr",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果多个异常的处理方式是完全相同, 也可以写成这样： 但是此方法,你也就无法知道是什么异常"
				}
			]
		},
		{
			"ID": "20230423123501-a3ikay5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-a3ikay5",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "catch (ArrayIndexOutOfBoundsException | NullPointerException e) {\n\t...\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-bnnuyqj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-bnnuyqj",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果异常之间具有父子关系，一定是子类异常在前catch，父类异常在后catch，否则语法错误："
				}
			]
		},
		{
			"ID": "20230423123501-lhjvrsp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-lhjvrsp",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\tint[] arr = {1, 2, 3};\n\ttry {\n\t\tSystem.out.println(\"before\");\n\t\tarr = null;\n\t\tSystem.out.println(arr[100]);\n\t\tSystem.out.println(\"after\");\n\t} catch (Exception e) { // Exception可以捕获到所有异常\n\t\te.printStackTrace();\n\t}catch (NullPointerException e){ // 永远都捕获执行到\n\t\te.printStackTrace();\n\t}\n\n\tSystem.out.println(\"after try catch\");\n}\n\n//异常\nError:(33, 10) java: 已捕获到异常错误java.lang.NullPointerException\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-4ttkqkf",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-4ttkqkf",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-vbfuvrq",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230423123501-vbfuvrq",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-l58yuh0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-l58yuh0",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "可以通过一个catch捕获所有的异常，即多个异常，一次捕获(不推荐)"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-95zg0yk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-95zg0yk",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\tint[] arr = {1, 2, 3};\n\ttry {\n\t\tSystem.out.println(\"before\");\n\t\tarr = null;\n\t\tSystem.out.println(arr[100]);\n\t\tSystem.out.println(\"after\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\n\tSystem.out.println(\"after try catch\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-wnn91z0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-wnn91z0",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "由于 Exception 类是所有异常类的父类. 因此可以用这个类型表示捕捉所有异常."
				}
			]
		},
		{
			"ID": "20230423123501-gpjqs72",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230423123501-gpjqs72",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230423123501-p7v06vi",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423123501-p7v06vi",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "备注: catch 进行类型匹配的时候, 不光会匹配相同类型的异常对象, 也会捕捉目标异常类型的子类对象.\n如刚才的代码, NullPointerException 和 ArrayIndexOutOfBoundsException 都是 Exception 的子类, 因此都能被捕获到."
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-zr7f5ev",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230423123501-zr7f5ev",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "finally"
				}
			]
		},
		{
			"ID": "20230423123501-lchltwn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-lchltwn",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在写程序时，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "有些特定的代码，不论程序是否发生异常，都需要执行，比如程序中打开的资源"
				},
				{
					"Type": "NodeText",
					"Data": "：网络连接、数据库连接、IO流等，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "在程序正常或者异常退出时，必须要对资源进进行回收"
				},
				{
					"Type": "NodeText",
					"Data": "。另外，"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "因为异常会引发程序的跳转，可能导致有些语句执行不到"
				},
				{
					"Type": "NodeText",
					"Data": "，finally就是用来解决这个问题的。"
				}
			]
		},
		{
			"ID": "20230423123501-o7mk216",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-o7mk216",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "语法格式:"
				}
			]
		},
		{
			"ID": "20230423123501-h7579qk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-h7579qk",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "try{\n\t// 可能会发生异常的代码\n}catch(异常类型 e){\n\t// 对捕获到的异常进行处理\n}finally{\n\t// 此处的语句无论是否发生异常，都会被执行到\n}\n\n// 如果没有抛出异常，或者异常被捕获处理了，这里的代码也会执行\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-8agecgc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-8agecgc",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\ttry{\n\t\tint[] arr = {1,2,3};\n\t\tarr[100] = 10;\n\t\tarr[0] = 10;\n\t}catch (ArrayIndexOutOfBoundsException e){\n\t\tSystem.out.println(e);\n\t}finally {\n\t\tSystem.out.println(\"finally中的代码一定会执行\");\n\t}\n\n\tSystem.out.println(\"如果没有抛出异常，或者异常被处理了，try-catch后的代码也会执行\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-rszeezg",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-rszeezg",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "问题：既然 finally 和 try-catch-finally 后的代码都会执行，那为什么还要有finally呢？"
				},
				{
					"Type": "NodeText",
					"Data": "\n需求：实现getData方法，内部输入一个整形数字，然后将该数字返回，并再main方法中打印"
				}
			]
		},
		{
			"ID": "20230423123501-d6yzz3t",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-d6yzz3t",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class TestFinally {  \n    public static int getData(){  \n        Scanner sc = null;  \n        try{  \n            sc = new Scanner(System.in);  \n            int data = sc.nextInt();  \n            return data;  \n        }catch (InputMismatchException e){  \n            e.printStackTrace();  \n        }finally {  \n            System.out.println(\"finally中代码\");  \n        }  \n    \n        System.out.println(\"try-catch-finally之后代码\");  \n        if(null != sc){  \n            sc.close();  \n        }  \n        return 0;  \n    }  \n\n    public static void main(String[] args) {  \n        int data = getData();  \n        System.out.println(data);  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-4sgi1lc",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-4sgi1lc",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行结果:"
				}
			]
		},
		{
			"ID": "20230423123501-sv41hp6",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-sv41hp6",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "100\nfinally中代码\n100\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-xjjx8cs",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-xjjx8cs",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "上述程序，如果正常输入，成功接收输入后程序就返回了，try-catch-finally之后的代码根本就没有执行，即输入流就没有被释放，造成资源泄漏。"
				}
			]
		},
		{
			"ID": "20230423123501-za2thbx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-za2thbx",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "注意：finally中的代码一定会执行的，一般在finally中进行一些资源清理的扫尾工作。"
				}
			]
		},
		{
			"ID": "20230423123501-ijtaybi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-ijtaybi",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 下面程序输出什么？\npublic static void main(String[] args) {\n\tSystem.out.println(func());\n}\npublic static int func() {\n\ttry {\n\t\treturn 10;\n\t} finally {\n\t\treturn 20;\n\t}\n}\n\n// A: 10    B: 20   C: 30    D: 编译失败\n//答案: B\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-1vz2f9j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-1vz2f9j",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "​"
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "finally"
				},
				{
					"Type": "NodeText",
					"Data": "​ "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "strong",
					"TextMarkTextContent": "执行的时机是在方法返回之前"
				},
				{
					"Type": "NodeText",
					"Data": "("
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "try"
				},
				{
					"Type": "NodeText",
					"Data": "​ 或者 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "catch"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中如果有 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "return"
				},
				{
					"Type": "NodeText",
					"Data": "​ 会在这个 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "return"
				},
				{
					"Type": "NodeText",
					"Data": "​ 之前执行 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "finally"
				},
				{
					"Type": "NodeText",
					"Data": "​). 但是如果 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "finally"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中也存在 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "return"
				},
				{
					"Type": "NodeText",
					"Data": "​ 语句, 那么就会执行 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "finally"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "return"
				},
				{
					"Type": "NodeText",
					"Data": "​, 从而不会执行到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "try"
				},
				{
					"Type": "NodeText",
					"Data": "​ 中原有的 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "return"
				},
				{
					"Type": "NodeText",
					"Data": "​."
				}
			]
		},
		{
			"ID": "20230423123501-3m1q61q",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-3m1q61q",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般我们不建议在 finally 中写 return (被编译器当做一个警告)."
				}
			]
		},
		{
			"ID": "20230423123501-soub4v0",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230423123501-soub4v0",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "异常的处理流程"
				}
			]
		},
		{
			"ID": "20230423123501-ieepf64",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-ieepf64",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "关于 \"调用栈\""
				}
			]
		},
		{
			"ID": "20230423123501-zage5lt",
			"Type": "NodeBlockquote",
			"Properties": {
				"id": "20230423123501-zage5lt",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeBlockquoteMarker",
					"Data": "\u003e"
				},
				{
					"ID": "20230423123501-vneo9pr",
					"Type": "NodeParagraph",
					"Properties": {
						"id": "20230423123501-vneo9pr",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"Type": "NodeText",
							"Data": "方法之间是存在相互调用关系的, 这种调用关系我们可以用 \"调用栈\" 来描述. 在 JVM 中有一块内存空间称为 \"虚拟机栈\" 专门存储方法之间的调用关系. 当代码中出现异常的时候, 我们就可以使用 "
						},
						{
							"Type": "NodeTextMark",
							"TextMarkType": "code",
							"TextMarkTextContent": "e.printStackTrace();"
						},
						{
							"Type": "NodeText",
							"Data": "​ 的方式查看出现异常代码的调用栈."
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-y3oz5g7",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-y3oz5g7",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果本方法中没有合适的处理异常的方式, 就会沿着调用栈向上传递"
				}
			]
		},
		{
			"ID": "20230423123501-r62qip0",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-r62qip0",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class test {  \n    public static void main(String[] args) {  \n        try {  \n            func();  \n        } catch (ArrayIndexOutOfBoundsException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"after try catch\");  \n    }  \n  \n    public static void func() {  \n        int[] arr = {1, 2, 3};  \n        System.out.println(arr[100]);  \n    }  \n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-zeqecdh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-zeqecdh",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行结果"
				}
			]
		},
		{
			"ID": "20230423123501-yc14fzv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-yc14fzv",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "java.lang.ArrayIndexOutOfBoundsException: 100\nat demo02.Test.func(Test.java:18)\nat demo02.Test.main(Test.java:9)\nafter try catch\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-dtrnrae",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-dtrnrae",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果向上一直传递都没有合适的方法处理异常, 最终就会交给 JVM 处理, 程序就会异常终止(和我们最开始未使用 try catch 时是一样的)."
				}
			]
		},
		{
			"ID": "20230423123501-2pb4s8w",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-2pb4s8w",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\tfunc();\n\tSystem.out.println(\"after try catch\");\n}\npublic static void func() {\n\tint[] arr = {1, 2, 3};\n\tSystem.out.println(arr[100]);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-g9qlab5",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-g9qlab5",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "执行结果"
				}
			]
		},
		{
			"ID": "20230423123501-ybh3adi",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-ybh3adi",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 执行结果\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 100\nat demo02.Test.func(Test.java:14)\nat demo02.Test.main(Test.java:8\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-aqbwsnh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-aqbwsnh",
				"updated": "20230423123509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "可以看到, 程序已经异常终止了, 没有执行到 "
				},
				{
					"Type": "NodeTextMark",
					"TextMarkType": "code",
					"TextMarkTextContent": "System.out.println(\u0026quot;after try catch\u0026quot;);"
				},
				{
					"Type": "NodeText",
					"Data": "​ 这一行."
				}
			]
		},
		{
			"ID": "20230423123501-2529m1u",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-2529m1u",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "【异常处理流程总结】"
				}
			]
		},
		{
			"ID": "20230423123501-7jm1v56",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423123501-7jm1v56",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-dygqsgy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-dygqsgy",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-egk8lh3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-egk8lh3",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "程序先执行 try 中的代码"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-4c2gomd",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-4c2gomd",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-rin4nx0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-rin4nx0",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果 try 中的代码出现异常, 就会结束 try 中的代码, 看和 catch 中的异常类型是否匹配."
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-a502w6m",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-a502w6m",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-m33uoje",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-m33uoje",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果找到匹配的异常类型, 就会执行 catch 中的代码"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-tzcoft7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-tzcoft7",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-tqfe7sx",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-tqfe7sx",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果没有找到匹配的异常类型, 就会将异常向上传递到上层调用者."
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-ugywpxs",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-ugywpxs",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-o9r1665",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-o9r1665",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "无论是否找到匹配的异常类型, finally 中的代码都会被执行到(在该方法结束之前执行)."
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-e112fdo",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-e112fdo",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-slgs2db",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-slgs2db",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "如果上层调用者也没有处理的了异常, 就继续向上传递."
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-pi8od1b",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-pi8od1b",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-lya4awp",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-lya4awp",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "一直到 main 方法也没有合适的代码处理异常, 就会交给 JVM 来进行处理, 此时程序就会异常终止."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-06vwj6t",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230423123501-06vwj6t",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "自定义异常类"
				}
			]
		},
		{
			"ID": "20230423123501-n06zdny",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-n06zdny",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Java 中虽然已经内置了丰富的异常类, 但是并不能完全表示实际开发中所遇到的一些异常，此时就需要维护符合我们实际情况的异常结构."
				}
			]
		},
		{
			"ID": "20230423123501-o7emgt9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-o7emgt9",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "例如, 我们实现一个用户登陆功能."
				}
			]
		},
		{
			"ID": "20230423123501-85d2vbp",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-85d2vbp",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Login {\n\tprivate String userName = \"admin\";\n\tprivate String password = \"123456\";\n\n\n\tpublic void loginInfo(String userName, String password) {\n\t\tif (!this.userName.equals(userName)) {\n\t\t\t// TODO 处理用户名错误\n\t\t}\n\t\tif (!this.password.equals(password)) {\n\t\t\t// TODO 处理密码错误\n\t\t}\n\t\tSystem.out.println(\"登陆成功\");\n\t}\n\n\tpublic  void main(String[] args) {\n\t\tLogin login = new Login();\n\t\tlogin.loginInfo(\"admin\", \"123456\");\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-mxyqpzw",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-mxyqpzw",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时我们在处理用户名密码错误的时候可能就需要抛出两种异常. 我们可以基于已有的异常类进行扩展(继承), 创建和我们业务相关的异常类."
				}
			]
		},
		{
			"ID": "20230423123501-qg4jqv3",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-qg4jqv3",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "具体方式："
				}
			]
		},
		{
			"ID": "20230423123501-15lqyqd",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230423123501-15lqyqd",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-daiaoow",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230423123501-daiaoow",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-7oxw3s5",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-7oxw3s5",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "自定义异常类，然后继承自Exception 或者 RunTimeException"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-6a6155f",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230423123501-6a6155f",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-rc8xhb4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-rc8xhb4",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "实现一个带有String类型参数的构造方法，参数含义：出现异常的原因"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123501-ijjdjqx",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-ijjdjqx",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class UserNameError extends Exception {\n\tpublic UserNameError(String message) {\n\t\tsuper(message);\n\t}\n}\n\nclass PasswordError extends Exception {\n\tpublic PasswordError(String message) {\n\t\tsuper(message);\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-mveubdb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-mveubdb",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "此时我们的 login 代码可以改成"
				}
			]
		},
		{
			"ID": "20230423123501-ce5yazn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230423123501-ce5yazn",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public static void main(String[] args) {\n\ttry {\n\t\tLogin login = new Login();\n\t\tlogIn.loginInfo(\"admin\", \"123456\");\n\t} catch (UserNameError userNameError) {\n\t\tuserNameError.printStackTrace();\n\t} catch (PasswordError passwordError) {\n\t\tpasswordError.printStackTrace();\n\t}\n}\n\npublic void loginInfo(String userName, String password) throws UserError,PasswordError {\n\tif (!this.userName.equals(userName)) {\n\t\tthrow new UserError(\"用户名错误\");\n\t}\n\tif (!this.password.equals(password)) {\n\t\tthrow new PasswordError(\"密码错误\");\n\t}\n\tSystem.out.println(\"登陆成功\");\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230423123501-9y2bg31",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123501-9y2bg31",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"Type": "NodeTextMark",
					"TextMarkType": "mark strong",
					"TextMarkTextContent": "注意事项"
				}
			]
		},
		{
			"ID": "20230423123501-v6uqal7",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230423123501-v6uqal7",
				"updated": "20230423123501"
			},
			"Children": [
				{
					"ID": "20230423123501-378dqx5",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-378dqx5",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-uerkm67",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-uerkm67",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "自定义异常通常会继承自 Exception 或者 RuntimeException"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-aqw08xm",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-aqw08xm",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-1m45c7a",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-1m45c7a",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "继承自 Exception 的异常默认是受查异常"
								}
							]
						}
					]
				},
				{
					"ID": "20230423123501-t3mn7uw",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230423123501-t3mn7uw",
						"updated": "20230423123501"
					},
					"Children": [
						{
							"ID": "20230423123501-frbm8nh",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230423123501-frbm8nh",
								"updated": "20230423123501"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "继承自 RuntimeException 的异常默认是非受查异常."
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230423123447-9g74e6g",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230423123447-9g74e6g",
				"updated": "20230423123447"
			}
		}
	]
}