{
	"ID": "20221021215235-hn266kd",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221021215235-hn266kd",
		"title": "单例模式",
		"updated": "20221021215519"
	},
	"Children": [
		{
			"ID": "20221021215246-s51en6h",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221021215246-s51en6h",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "单例模式的概念"
				}
			]
		},
		{
			"ID": "20221021215246-6xbr5sa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021215246-6xbr5sa",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "一个类只能创建一个对象，即单例模式，该模式可以保证系统中该类只有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息，这种方式简化了在复杂环境下的配置管理。"
				}
			]
		},
		{
			"ID": "20221021215251-zv7gh1s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021215251-zv7gh1s"
			}
		},
		{
			"ID": "20221021215246-7w51bpa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021215246-7w51bpa",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "单例模式有两种实现方法："
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "饿汉方式"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": " ， "
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "懒汉方式"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20221021215255-shdlpl8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021215255-shdlpl8"
			}
		},
		{
			"ID": "20221021215246-3hhp5rb",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221021215246-3hhp5rb",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "饿汉方式"
				}
			]
		},
		{
			"ID": "20221021215246-k0z0qyq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021215246-k0z0qyq",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "就是说不管你将来用不用，程序启动时就创建一个唯一的实例对象"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeText",
							"Data": "。"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n优点：简单，创建这个对象时没有线程安全问题。\n缺点：可能会导致进程启动慢，且如果有"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "多个单例类对象实例启动顺序不确定"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20221021215246-bz5n7t2",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221021215246-bz5n7t2",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class CallInfo\n{\npublic:\n\tstatic CallInfo\u0026 GetInstance()\n\t{\n\t\treturn _inst;\n\t}\n\n\t//...\n\n\tCallInfo() = delete;\n\tCallInfo(const CallInfo\u0026 sg) = delete;\nprivate:\n\tCallInfo(){}\n\tstatic CallInfo _inst;\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221021215302-8olzhfp",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021215302-8olzhfp"
			}
		},
		{
			"ID": "20221021215246-jk7izle",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20221021215246-jk7izle",
				"updated": "20221021215302"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "懒汉方式"
				}
			]
		},
		{
			"ID": "20221021215246-5vqz6qy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021215246-5vqz6qy",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeStrong",
							"Data": "strong",
							"Children": [
								{
									"Type": "NodeStrongA6kOpenMarker",
									"Data": "**"
								},
								{
									"Type": "NodeText",
									"Data": "事先没有准备好，第一次访问，才创建对象。"
								},
								{
									"Type": "NodeStrongA6kCloseMarker",
									"Data": "**"
								}
							]
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n优点：对应解决饿汉的两个缺点。\n缺点：相对饿汉方式复杂一些，尤其还要控制"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "线程安全问题"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "。"
				}
			]
		},
		{
			"ID": "20221021215246-fwstl01",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221021215246-fwstl01",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class CallInfo\n{\npublic:\n\tstatic CallInfo\u0026 GetInstance() //懒汉方式是一定要加锁的，不然会创建出多个实例\n\t{\n\t\tif (_pInst == nullptr)// 双检查加锁,可以减少线程对锁的竞争，以此提高效率\n\t\t{\n\t\t\tstd::unique_lock\u003cmutex\u003e lock(_mtx);\n\t\t\tif (_pInst == nullptr)\n\t\t\t{\n\t\t\t\t_pInst = new CallInfo;\n\t\t\t}\n\t\t}\n\t\treturn *_pInst;\n\t}\n\n\tCallInfo(const CallInfo\u0026 sg)  = delete;\n\tCallInfo\u0026 operator=(const CallInfo\u0026 sg) = delete;\n\nprivate:\n\tCallInfo() {}\n\n\tstatic mutex _mtx; //一份单例要一直使用一把锁，所以需要static\n\tstatic CallInfo* _pInst;\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221021215246-x886b9g",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20221021215246-x886b9g",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "实现一个内嵌垃圾回收类"
				}
			]
		},
		{
			"ID": "20221021215246-ex5le9x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221021215246-ex5le9x",
				"updated": "20221021215246"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一般懒汉的单例对象，不需要回收，因为进程正常结束，资源都会还给系统，这个对象只有一个系统自动回收也没什么问题，但是如果你在单例对象释放析构时，有一些要完成的动作，比如要记录日志等等。那么可以考虑搞个类似下面的回收类帮助去完成这个事情"
				}
			]
		},
		{
			"ID": "20221021215246-xwn1ua8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221021215246-xwn1ua8",
				"updated": "20221021215519"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "class CallInfo\n{\npublic:\n\tstatic CallInfo\u0026 GetInstance()\n\t{\n\t\tif (_pInst == nullptr)// 双检查加锁,可以减少线程对锁的竞争，以此提高效率\n\t\t{\n\t\t\tstd::unique_lock\u003cmutex\u003e lock(_mtx);\n\t\t\tif (_pInst == nullptr)\n\t\t\t{\n\t\t\t\t_pInst = new CallInfo;\n\t\t\t}\n\t\t}\n\n\t\treturn *_pInst;\n\t}\n\n\tclass CGarbo // 实现一个内嵌垃圾回收类\n\t{\n\tpublic:\n\t\t~CGarbo()\n\t\t{\n\t\t\tif (_pInst)\n\t\t\t{\n\t\t\t\tdelete _pInst;\n\t\t\t\t_pInst = nullptr;\n\t\t\t}\n\t\t}\n\t};\n\n\tCallInfo(const CallInfo\u0026 sg) = delete;\n\tCallInfo\u0026 operator=(const CallInfo\u0026 sg) = delete;\n\nprivate:\n\tCallInfo() {}\n\n\tstatic mutex _mtx; //一份单例要一直使用一把锁，所以需要static\n\tstatic CallInfo* _pInst;\n};\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}