{
	"ID": "20221011093646-qop7ntw",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221011093646-qop7ntw",
		"title": "单生产者单消费者模型代码",
		"updated": "20221011093944"
	},
	"Children": [
		{
			"ID": "20221011093905-7u9rrbh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011093905-7u9rrbh",
				"updated": "20221011093905"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " CPtest.cpp文件"
				}
			]
		},
		{
			"ID": "20221011093905-8tf3hfu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011093905-8tf3hfu",
				"updated": "20221011093905"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\nusing namespace ns_blockqueue;\n\nvoid *consumer(void *args)\n{\n    BlockQueue\u003cint\u003e *bq = (BlockQueue\u003cint\u003e*)args;\n    while(true){\n        sleep(2);\n        int data = 0;\n        bq-\u003ePop(\u0026data);\n\n        std::cout \u003c\u003c \"消费者消费了一个数据: \" \u003c\u003c  data \u003c\u003c std::endl;\n    }\n}\n\nvoid *producter(void *args)\n{\n    BlockQueue\u003cint\u003e *bq = (BlockQueue\u003cint\u003e*)args;\n    while(true){\n         //sleep(1);\n        //1. 制造数据,生产者的数据(task)从哪里来？？\n        int data = rand()%20 + 1;\n        std::cout \u003c\u003c \"生产者生产数据: \" \u003c\u003c data \u003c\u003c std::endl;\n        bq-\u003ePush(data);\n    }\n}\n\nint main()\n{\n    srand((long long)time(nullptr));\n    BlockQueue\u003cint\u003e *bq = new BlockQueue\u003cint\u003e();\n\n    pthread_t c,p;\n    pthread_create(\u0026c, nullptr, consumer, (void*)bq);\n    pthread_create(\u0026p, nullptr, producter, (void*)bq);\n\n    pthread_join(c, nullptr);\n    pthread_join(p, nullptr);\n  \n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011093905-cpmjawk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011093905-cpmjawk",
				"updated": "20221011093905"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": " BlockQueue.hpp 文件"
				}
			]
		},
		{
			"ID": "20221011093905-ghmlbj1",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221011093905-ghmlbj1",
				"updated": "20221011093905"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#pragma once\n#include \u003ciostream\u003e\n#include \u003cqueue\u003e\n#include \u003cpthread.h\u003e\n\nnamespace ns_blockqueue\n{\n    const int default_cap = 5;\n\n    template \u003cclass T\u003e\n    class BlockQueue\n    {\n    private:\n        std::queue\u003cT\u003e bq_; //我们的阻塞队列\n        int cap_;          //队列的元素上限\n        pthread_mutex_t mtx_; //保护临界资源的锁\n        //1. 当生产满了的时候，就应该不要生产了(不要竞争锁了)，而应该让消费者来消费\n        //2. 当消费空了，就不应该消费（不要竞争锁了）,应该让生产者来进行生产\n        pthread_cond_t is_full_; //bq_满的， 消费者在改条件变量下等待\n        pthread_cond_t is_empty_; //bq_空的，生产者在改条件变量下等待\n    private:\n        bool IsFull()\n        {\n            return bq_.size() == cap_;\n        }\n        bool IsEmpty()\n        {\n            return bq_.size() == 0;\n        }\n        void LockQueue()\n        {\n            pthread_mutex_lock(\u0026mtx_);\n        }\n        void UnlockQueue()\n        {\n            pthread_mutex_unlock(\u0026mtx_);\n        }\n        void ProducterWait()\n        {\n            //pthread_cond_wait\n            //1. 调用的时候，会首先自动释放mtx_!,然后再挂起自己\n            //2. 返回的时候，会首先自动竞争锁，获取到锁之后，才能返回！\n            pthread_cond_wait(\u0026is_empty_, \u0026mtx_);\n        }\n        void ConsumerWait()\n        {\n            pthread_cond_wait(\u0026is_full_, \u0026mtx_);\n        }\n        void WakeupComsumer()\n        {\n            pthread_cond_signal(\u0026is_full_);\n        }\n        void WakeupProducter()\n        {\n            pthread_cond_signal(\u0026is_empty_);\n        }\n    public:\n        BlockQueue(int cap = default_cap):cap_(cap)\n        {\n            pthread_mutex_init(\u0026mtx_, nullptr);\n            pthread_cond_init(\u0026is_empty_, nullptr);\n            pthread_cond_init(\u0026is_full_, nullptr);\n        }\n        ~BlockQueue()\n        {\n            pthread_mutex_destroy(\u0026mtx_);\n            pthread_cond_destroy(\u0026is_empty_);\n            pthread_cond_destroy(\u0026is_full_);\n        }\n    public:\n        //const \u0026:输入\n        //*: 输出\n        //\u0026: 输入输出\n        void Push(const T \u0026in)\n        {\n            LockQueue();\n            //临界区\n            while(IsFull()){ //不能使用if进行判断，因为wait有可能挂起失败\n                //等待的，把线程挂起，我们当前是持有锁的！！！\n                ProducterWait();\n            }\n            //向队列中放数据，生产函数\n            bq_.push(in);\n\n            //if(bq_.size() \u003e cap_/2 ) WakeupComsumer();\n            UnlockQueue();\n            WakeupComsumer();\n\n        }\n\n        void Pop(T *out)\n        {\n            LockQueue();\n            //从队列中拿数据，消费函数函数\n            while(IsEmpty()){ //不能使用if进行判断，因为wait有可能挂起失败\n                //无法消费\n                ConsumerWait();\n            }\n            *out = bq_.front();\n            bq_.pop();\n\n            //if(bq_.size() \u003c cap_/2 ) WakeupProducter();\n            UnlockQueue();\n\t\t\tWakeupProducter();\n        }\n    };\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221011093905-90t09hf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011093905-90t09hf",
				"updated": "20221011093936"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "运行结果，先让生产者生产两秒后，消费者开始购买\n​"
				},
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20220919202138"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20220919202138-20221011093933-bzv30oo.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221011093944-boosp47",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221011093944-boosp47"
			}
		}
	]
}