{
	"ID": "20221113213523-boocxbg",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221113213523-boocxbg",
		"title": "epoll代码实例",
		"updated": "20221113214058"
	},
	"Children": [
		{
			"ID": "20221113213523-9ppdzom",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221113213523-9ppdzom",
				"updated": "20221113214047"
			}
		},
		{
			"ID": "20221113211217-mx9mwr8",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221113211217-mx9mwr8",
				"updated": "20221113211217"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "LT 模式"
				}
			]
		},
		{
			"ID": "20221113214055-ecrhla9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221113214055-ecrhla9",
				"updated": "20221113214058"
			},
			"Children": [
				{
					"Type": "NodeBlockRef",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeBlockRefID",
							"Data": "20221113213910-4qaavqy"
						},
						{
							"Type": "NodeBlockRefSpace"
						},
						{
							"Type": "NodeBlockRefDynamicText",
							"Data": "Sock.hpp(端口复用版)"
						},
						{
							"Type": "NodeCloseParen"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				}
			]
		},
		{
			"ID": "20221113211217-qcoukea",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221113211217-qcoukea",
				"updated": "20221113211217"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003csys/epoll.h\u003e\n#include \u003ciostream\u003e\n#include \u003ccstdlib\u003e\n#include \u003cunistd.h\u003e\n\n#include \"Sock.hpp\"\n\n#define SIZE 128\n#define NUM 64\n\nstatic void Usage(std::string proc)\n{\n    std::cerr \u003c\u003c \"Usage: \" \u003c\u003c proc \u003c\u003c \" port\" \u003c\u003c std::endl;\n}\n\n// ./epoll_server port\nint main(int argc, char* argv[])\n{\n    if (argc != 2)\n    {\n        Usage(argv[0]);\n        exit(1);\n    }\n    // 1. 建立tcp 监听socket\n    uint16_t port = (uint16_t)atoi(argv[1]);\n    int listen_sock = Sock::Socket();\n    Sock::Bind(listen_sock, port);\n    Sock::Listen(listen_sock);\n\n    // 2. 创建epoll模型，获得epfd(文件描述符)\n    int epfd = epoll_create(SIZE);\n\n    // 3. 先将listen_sock和它所关心的事件，添加到内核\n    struct epoll_event ev;\n    ev.events = EPOLLIN | EPOLLET;\n    ev.data.fd = listen_sock;\n\n    epoll_ctl(epfd, EPOLL_CTL_ADD, listen_sock, \u0026ev);\n\n    // 4. 事件循环\n    volatile bool quit = false;\n    struct epoll_event revs[NUM];\n    while (!quit)\n    {\n        int timeout = -1;\n        //这里传入的数组，仅仅是尝试从内核中拿回来已经就绪的事件\n        int n = epoll_wait(epfd, revs, NUM, timeout); // TODO\n        switch (n)\n        {\n        case 0:\n            std::cout \u003c\u003c \"time out ...\" \u003c\u003c std::endl;\n            break;\n        case -1:\n            std::cerr \u003c\u003c \"epoll error ...\" \u003c\u003c std::endl;\n            break;\n        default: //有时间就绪\n            std::cout \u003c\u003c \"有事件就绪啦!\" \u003c\u003c std::endl;\n            // 5. 处理就绪事件\n            for (int i = 0; i \u003c n; i++)\n            {\n                int sock = revs[i].data.fd; //暂时方案\n                std::cout \u003c\u003c \"文件描述符: \" \u003c\u003c sock \u003c\u003c \" 上面有事件就绪啦\" \u003c\u003c std::endl;\n                if (revs[i].events \u0026 EPOLLIN)\n                {\n                    std::cout \u003c\u003c \"文件描述符: \" \u003c\u003c sock \u003c\u003c \" 读事件就绪\" \u003c\u003c std::endl;\n                    if (sock == listen_sock)\n                    {\n                        std::cout \u003c\u003c \"文件描述符: \" \u003c\u003c sock \u003c\u003c \" 链接数据就绪\" \u003c\u003c std::endl;\n\n                        // 5.1 处理链接事件\n                        int fd = Sock::Accept(listen_sock);\n                        if (fd \u003e= 0)\n                        {\n                            std::cout \u003c\u003c \"获取新链接成功啦： \" \u003c\u003c fd \u003c\u003c std::endl;\n                            //能不能立即读取呢？？不能！\n                            struct epoll_event _ev;\n                            _ev.events = EPOLLIN; // EPOLLIN | EPOLLOUT | EPOLLERR\n                            _ev.data.fd = fd;\n                            epoll_ctl(epfd, EPOLL_CTL_ADD, fd, \u0026_ev); //新的fd托管给了epoll！\n                            std::cout \u003c\u003c \"已经将\" \u003c\u003c fd \u003c\u003c \" 托管给epoll啦\" \u003c\u003c std::endl;\n                        }\n                        else\n                        {\n                            // Do Nothing!\n                        }\n                    }\n                    else\n                    {\n                        // 5.2 正常的读取处理\n                        std::cout \u003c\u003c \"文件描述符: \" \u003c\u003c sock \u003c\u003c \"正常数据就绪\" \u003c\u003c std::endl;\n                        char buffer[1024];\n                        ssize_t s = recv(sock, buffer, sizeof(buffer) - 1, 0);\n                        if (s \u003e 0)\n                        {\n                            buffer[s] = 0;\n                            std::cout \u003c\u003c \"client [\" \u003c\u003c sock \u003c\u003c \"]# \" \u003c\u003c buffer \u003c\u003c std::endl;\n\n                            // //将我们的关心事件更改成为EPOLLOUT\n                            // struct epoll_event _ev;\n                            // _ev.events = EPOLLOUT;\n                            // _ev.data.fd = sock;\n                            // epoll_ctl(epfd, EPOLL_CTL_MOD, sock, \u0026_ev);\n                        }\n                        else if (s == 0)\n                        {\n                            //对端关闭链接\n                            std::cout \u003c\u003c \"client quit \" \u003c\u003c sock \u003c\u003c std::endl;\n                            close(sock);\n                            epoll_ctl(epfd, EPOLL_CTL_DEL, sock, nullptr);\n                            std::cout \u003c\u003c \"sock: \" \u003c\u003c sock \u003c\u003c \"delete from epoll success\" \u003c\u003c std::endl;\n                        }\n                        else\n                        {\n                            //读取失败\n                            std::cout \u003c\u003c \"recv error\" \u003c\u003c std::endl;\n                            close(sock);\n                            epoll_ctl(epfd, EPOLL_CTL_DEL, sock, nullptr);\n                            std::cout \u003c\u003c \"sock: \" \u003c\u003c sock \u003c\u003c \"delete from epoll success\" \u003c\u003c std::endl;\n                        }\n                    }\n                }\n                else if (revs[i].events \u0026 EPOLLOUT)\n                {\n                    //处理写事件\n                }\n                else\n                {\n                    // TODO\n                }\n            }\n            break;\n        }\n    }\n\n    close(epfd);\n    close(listen_sock);\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221113213554-hs8edvz",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221113213554-hs8edvz"
			}
		},
		{
			"ID": "20221113213555-fugrgnn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221113213555-fugrgnn"
			}
		},
		{
			"ID": "20221113211217-ayuqlkt",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20221113211217-ayuqlkt",
				"updated": "20221113211217"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ET 模式"
				}
			]
		},
		{
			"ID": "20221113211217-gzotnou",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221113211217-gzotnou",
				"updated": "20221113211217"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003cerrno.h\u003e\n#include \u003csys/socket.h\u003e\n#include \u003cnetdb.h\u003e\n#include \u003cfcntl.h\u003e\n#include \u003csys/epoll.h\u003e\n#include \u003cstring.h\u003e\n\n#define MAXEVENTS 64\n\n//函数:\n//功能:创建和绑定一个TCP socket\n//参数:端口\n//返回值:创建的socket\nstatic int\ncreate_and_bind(char* port)\n{\n    struct addrinfo hints;\n    struct addrinfo* result, * rp;\n    int s, sfd;\n\n    memset(\u0026hints, 0, sizeof(struct addrinfo));\n    hints.ai_family = AF_UNSPEC;     /* Return IPv4 and IPv6 choices */\n    hints.ai_socktype = SOCK_STREAM; /* We want a TCP socket */\n    hints.ai_flags = AI_PASSIVE;     /* All interfaces */\n\n    s = getaddrinfo(NULL, port, \u0026hints, \u0026result);\n    if (s != 0)\n    {\n        fprintf(stderr, \"getaddrinfo: %s\\n\", gai_strerror(s));\n        return -1;\n    }\n\n    for (rp = result; rp != NULL; rp = rp-\u003eai_next)\n    {\n        sfd = socket(rp-\u003eai_family, rp-\u003eai_socktype, rp-\u003eai_protocol);\n        if (sfd == -1)\n            continue;\n\n        s = bind(sfd, rp-\u003eai_addr, rp-\u003eai_addrlen);\n        if (s == 0)\n        {\n            /* We managed to bind successfully! */\n            break;\n        }\n\n        close(sfd);\n    }\n\n    if (rp == NULL)\n    {\n        fprintf(stderr, \"Could not bind\\n\");\n        return -1;\n    }\n\n    freeaddrinfo(result);\n\n    return sfd;\n}\n\n//函数\n//功能:设置socket为非阻塞的\nstatic int\nmake_socket_non_blocking(int sfd)\n{\n    int flags, s;\n\n    //得到文件状态标志\n    flags = fcntl(sfd, F_GETFL, 0);\n    if (flags == -1)\n    {\n        perror(\"fcntl\");\n        return -1;\n    }\n\n    //设置文件状态标志\n    flags |= O_NONBLOCK;\n    s = fcntl(sfd, F_SETFL, flags);\n    if (s == -1)\n    {\n        perror(\"fcntl\");\n        return -1;\n    }\n\n    return 0;\n}\n\n//端口由参数argv[1]指定\nint main(int argc, char* argv[])\n{\n    int sfd, s;\n    int efd;\n    struct epoll_event event;\n    struct epoll_event* events;\n\n    if (argc != 2)\n    {\n        fprintf(stderr, \"Usage: %s [port]\\n\", argv[0]);\n        exit(EXIT_FAILURE);\n    }\n\n    sfd = create_and_bind(argv[1]);\n    if (sfd == -1)\n        abort();\n\n    s = make_socket_non_blocking(sfd);\n    if (s == -1)\n        abort();\n\n    s = listen(sfd, SOMAXCONN);\n    if (s == -1)\n    {\n        perror(\"listen\");\n        abort();\n    }\n\n    //除了参数size被忽略外,此函数和epoll_create完全相同\n    efd = epoll_create1(0);\n    if (efd == -1)\n    {\n        perror(\"epoll_create\");\n        abort();\n    }\n\n    event.data.fd = sfd;\n    event.events = EPOLLIN | EPOLLET; //读入,边缘触发方式\n    s = epoll_ctl(efd, EPOLL_CTL_ADD, sfd, \u0026event);\n    if (s == -1)\n    {\n        perror(\"epoll_ctl\");\n        abort();\n    }\n\n    /* Buffer where events are returned */\n    events = calloc(MAXEVENTS, sizeof event);\n\n    /* The event loop */\n    while (1)\n    {\n        int n, i;\n\n        n = epoll_wait(efd, events, MAXEVENTS, -1);\n        for (i = 0; i \u003c n; i++)\n        {\n            if ((events[i].events \u0026 EPOLLERR) ||\n                (events[i].events \u0026 EPOLLHUP) ||\n                (!(events[i].events \u0026 EPOLLIN)))\n            {\n                /* An error has occured on this fd, or the socket is not\n                   ready for reading (why were we notified then?) */\n                fprintf(stderr, \"epoll error\\n\");\n                close(events[i].data.fd);\n                continue;\n            }\n\n            else if (sfd == events[i].data.fd)\n            {\n                /* We have a notification on the listening socket, which\n                   means one or more incoming connections. */\n                while (1)\n                {\n                    struct sockaddr in_addr;\n                    socklen_t in_len;\n                    int infd;\n                    char hbuf[NI_MAXHOST], sbuf[NI_MAXSERV];\n\n                    in_len = sizeof in_addr;\n                    infd = accept(sfd, \u0026in_addr, \u0026in_len);\n                    if (infd == -1)\n                    {\n                        if ((errno == EAGAIN) ||\n                            (errno == EWOULDBLOCK))\n                        {\n                            /* We have processed all incoming\n                               connections. */\n                            break;\n                        }\n                        else\n                        {\n                            perror(\"accept\");\n                            break;\n                        }\n                    }\n\n                    //将地址转化为主机名或者服务名\n                    s = getnameinfo(\u0026in_addr, in_len,\n                        hbuf, sizeof hbuf,\n                        sbuf, sizeof sbuf,\n                        NI_NUMERICHOST | NI_NUMERICSERV); // flag参数:以数字名返回\n                    //主机地址和服务地址\n\n                    if (s == 0)\n                    {\n                        printf(\"Accepted connection on descriptor %d \"\n                            \"(host=%s, port=%s)\\n\",\n                            infd, hbuf, sbuf);\n                    }\n\n                    /* Make the incoming socket non-blocking and add it to the\n                       list of fds to monitor. */\n                    s = make_socket_non_blocking(infd);\n                    if (s == -1)\n                        abort();\n\n                    event.data.fd = infd;\n                    event.events = EPOLLIN | EPOLLET;\n                    s = epoll_ctl(efd, EPOLL_CTL_ADD, infd, \u0026event);\n                    if (s == -1)\n                    {\n                        perror(\"epoll_ctl\");\n                        abort();\n                    }\n                }\n                continue;\n            }\n            else\n            {\n                /* We have data on the fd waiting to be read. Read and\n                   display it. We must read whatever data is available\n                   completely, as we are running in edge-triggered mode\n                   and won't get a notification again for the same\n                   data. */\n                int done = 0;\n\n                while (1)\n                {\n                    ssize_t count;\n                    char buf[512];\n\n                    count = read(events[i].data.fd, buf, sizeof(buf));\n                    if (count == -1)\n                    {\n                        /* If errno == EAGAIN, that means we have read all\n                           data. So go back to the main loop. */\n                        if (errno != EAGAIN)\n                        {\n                            perror(\"read\");\n                            done = 1;\n                        }\n                        break;\n                    }\n                    else if (count == 0)\n                    {\n                        /* End of file. The remote has closed the\n                           connection. */\n                        done = 1;\n                        break;\n                    }\n\n                    /* Write the buffer to standard output */\n                    s = write(1, buf, count);\n                    if (s == -1)\n                    {\n                        perror(\"write\");\n                        abort();\n                    }\n                }\n\n                if (done)\n                {\n                    printf(\"Closed connection on descriptor %d\\n\",\n                        events[i].data.fd);\n\n                    /* Closing the descriptor will make epoll remove it\n                       from the set of descriptors which are monitored. */\n                    close(events[i].data.fd);\n                }\n            }\n        }\n    }\n\n    free(events);\n    close(sfd);\n    return EXIT_SUCCESS;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}