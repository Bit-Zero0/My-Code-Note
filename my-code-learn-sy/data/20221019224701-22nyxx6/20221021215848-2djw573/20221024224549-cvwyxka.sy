{
	"ID": "20221024224549-cvwyxka",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20221024224549-cvwyxka",
		"title": "UDP改善版代码",
		"updated": "20221024224919"
	},
	"Children": [
		{
			"ID": "20221024224636-fyj5oeq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224636-fyj5oeq",
				"updated": "20221024224703"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "udp_server.cpp"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20221024224549-6fh901n",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221024224549-6fh901n",
				"updated": "20221024224919"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003ccerrno\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003cnetinet/in.h\u003e//IPv4与IPv6的地址定义在其中\n#include \u003carpa/inet.h\u003e\n\nconst uint16_t port = 6666;\n\nint main()\n{\n    //1. 创建套接字，打开网络文件\n    int sock = socket(AF_INET , SOCK_DGRAM ,0 );//使用SOCK_DGRAM是因为我们写的是原始套接字，UDP。\n    if (sock \u003c 0)\n    {\n        std::cerr \u003c\u003c \"socket create error\" \u003c\u003c errno \u003c\u003c std::endl;\n        return 1;\n    }\n\n    //2. 给该服务器绑定端口和ip(特殊处理)\n    struct sockaddr_in local;\n    local.sin_family = AF_INET;\n    local.sin_port = htons(port);//此处的端口号，是我们计算机上的变量，是主机序列\n    // a. 需要将人识别的点分十进制，字符串风格IP地址，转化成为4字节整数IP\n    // b. 也要考虑大小端\n    //in_addr_t inet_addr(const char *cp); 能完成上面ab两个工作.需要头文件\u003cnetinet/in,h\u003e,\u003carpa/inet.h\u003e,\u003csys/socket.h\u003e\n\n    // 坑:\n    // 云服务器，不允许用户直接bind公网IP，另外, 实际正常编写的时候，我们也不会指明IP\n     //local.sin_addr.s_addr = inet_addr(\"42.192.83.143\"); //点分十进制，字符串风格[0-255].[0-255].[0-255].[0-255]\n\n    // INADDR_ANY: 如果你bind的是确定的IP(主机)， 意味着只有发到该IP主机上面的数据\n    // 才会交给你的网络进程, 但是，一般服务器可能有多张网卡，配置多个IP，我们需要的不是\n    // 某个IP上面的数据，我们需要的是，所有发送到该主机，发送到该端口的数据！\n    local.sin_addr.s_addr = INADDR_ANY;\n\n    if (bind(sock , (struct sockaddr*)\u0026local , sizeof(local)) \u003c 0)\n    {\n        std::cerr \u003c\u003c \"bind error \" \u003c\u003c errno \u003c\u003c std::endl;\n        return 2;\n    }\n\n    bool quit = false;\n    #define NUM 1024\n    char buffer[NUM];\n\n    while (!quit)\n    {\n        struct sockaddr_in peer;\n\n        socklen_t len = sizeof(peer);\n\n        ssize_t cnt = recvfrom(sock , buffer ,sizeof(buffer)-1 , 0 , (struct sockaddr *)\u0026peer , \u0026len);\n\n        if(cnt \u003e 0)\n        {\n\n            buffer[cnt] = 0;\n            FILE* fp = popen(buffer , \"r\"); // 打开相应指令文件\n\n\n            std::string echo_hello;\n            char line[1024] = {0};\n            while(fgets(line , sizeof(line) , fp)!= nullptr)\n            {\n                echo_hello += line;\n            }\n\n            pclose(fp);\n            std::cout \u003c\u003c \"client #\" \u003c\u003c buffer \u003c\u003c std::endl;\n\n            sendto(sock , echo_hello.c_str() , echo_hello.size() , 0 ,(struct sockaddr*)\u0026peer , len );\n        }\n        else\n        {\n            std::cout \u003c\u003c \"recvfrom error\" \u003c\u003c errno \u003c\u003c std::endl;\n        }\n    }\n\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221024224637-i2d0f5y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224637-i2d0f5y"
			}
		},
		{
			"ID": "20221024224738-34orozy",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224738-34orozy",
				"updated": "20221024224852"
			},
			"Children": [
				{
					"Type": "NodeMark",
					"Data": "mark",
					"Children": [
						{
							"Type": "NodeMark2OpenMarker"
						},
						{
							"Type": "NodeText",
							"Data": "udp_client.cpp"
						},
						{
							"Type": "NodeMark2CloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20221024224747-603n0ru",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20221024224747-603n0ru",
				"updated": "20221024224845"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "Y3Bw"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "#include \u003ciostream\u003e\n#include \u003cstring\u003e\n#include \u003ccerrno\u003e\n#include \u003csys/socket.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003cnetinet/in.h\u003e\n#include \u003carpa/inet.h\u003e\n\nvoid Usage(std::string proc)\n{\n    std::cout \u003c\u003c \"Usage: \\n\\t\" \u003c\u003c proc \u003c\u003c \" server_ip server_port\" \u003c\u003c std::endl;\n}\n\nint main(int argc , char* argv[])\n{\n    if (argc != 3)\n    {\n        Usage(argv[0]);\n        return 0;\n    }\n\n    // 1. 创建套接字，打开网络文件\n    int sock = socket(AF_INET , SOCK_DGRAM ,0);\n    if(sock \u003c 0)\n    {\n        std::cerr \u003c\u003c \"socket error \" \u003c\u003c errno \u003c\u003c std::endl;\n        return 1;\n    }\n\n    struct sockaddr_in server;\n    server.sin_family = AF_INET;\n    server.sin_port = htons(atoi(argv[2]));\n    server.sin_addr.s_addr = inet_addr(argv[1]);\n\n    while(1)\n    {\n        std::string message;\n        std::cout\u003c\u003c \"请输入指令# \";\n        char line[1024];\n        fgets(line , sizeof(line) , stdin);\n\n        sendto(sock ,line ,sizeof(line) , 0, (struct sockaddr*)\u0026server , sizeof(server));\n\n        struct sockaddr_in tmp;\n        socklen_t len = sizeof(tmp);\n        char buffer[1024];\n\n        ssize_t cnt =  recvfrom(sock , buffer , sizeof(buffer) , 0 ,(struct sockaddr*)\u0026tmp , \u0026len);\n        if(cnt \u003e 0)\n        {\n            buffer[cnt] = 0;\n            std::cout \u003c\u003c buffer \u003c\u003c std::endl;\n        }\n        else\n        {}\n    }\n\n    return 0;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20221024224738-w9m6pjr",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224738-w9m6pjr"
			}
		},
		{
			"ID": "20221024224709-52e2bdi",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20221024224709-52e2bdi",
				"updated": "20221024224727"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Properties": {
						"parent-style": "max-width: 1100px;",
						"style": "width: 1090px;"
					},
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText",
							"Data": "Pasted image 20221024134959"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/Pasted image 20221024134959-20221024223943-2nojw6m.png"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeKramdownSpanIAL",
					"Data": "{: style=\"width: 1090px;\" parent-style=\"max-width: 1100px;\"}"
				}
			]
		}
	]
}